namespace FlatDataGlobal;

enum GroundNodeType: int {
	None,
	WalkAble,
	JumpAble,
	TSSOnly,
	NotWalkAble,
}
enum BubbleType: int {
	Idle,
	Monologue,
	EmoticonNormal,
	EmoticonFavorite,
	EmoticonReward,
	EmoticonGiveGift,
}
enum FurnitureCategory: int {
	Furnitures,
	Decorations,
	Interiors,
}
enum FurnitureSubCategory: int {
	Table,
	Closet,
	Chair,
	Bed,
	FurnitureEtc,
	FurnitureSubCategory1,
	Prop,
	HomeAppliance,
	WallDecoration,
	FloorDecoration,
	DecorationEtc,
	DecorationSubCategory1,
	Floor,
	Background,
	Wallpaper,
	InteriorsSubCategory1,
	All,
}
enum FurnitureLocation: int {
	None,
	Inventory,
	Floor,
	WallLeft,
	WallRight,
}
enum AcademyMessageConditions: int {
	None,
	FavorRankUp,
	AcademySchedule,
	Answer,
	Feedback,
}
enum AcademyMessageTypes: int {
	None,
	Text,
	Image,
}
enum VoiceEvent: int {
	OnTSA,
	FormationPickUp,
	CampaignResultDefeat,
	CampaignResultVictory,
	CharacterLevelUp,
	CharacterTranscendence,
	SkillLevelUp,
	Formation,
	CampaignCharacterSpawn,
	BattleStartTimeline,
	BattleVictoryTimeline,
	CharacterFavor,
	BattleMiss,
	BattleBlock,
	BattleCover,
	BattleMove,
	BattleMoveToForamtionBeacon,
	MGS_GameStart,
	MGS_CharacterSelect,
	MGS_Attacking,
	MGS_GeasGet,
}
enum UnitType: int {
	None,
	AR,
	RF,
	HG,
	MG,
	SMG,
	SG,
	HZ,
	Melee,
}
enum AttackType: int {
	Single,
	Splash,
	Through,
	Heal,
}
enum ProjectileType: int {
	Guided,
	Ground,
	GuidedExplosion,
	GroundConstDistance,
	AirConstDistance,
}
enum DamageFontColor: int {
	Blue,
	White,
	Yellow,
	Red,
	Green,
}
enum TargetingCellType: int {
	None,
	Near,
	Far,
}
enum TargetingUnitType: int {
	None,
	Near,
	Far,
	MinHp,
	MaxHp,
	Random,
}
enum ProjectileAction: int {
	None,
	Damage,
	Heal,
}
enum FontType: int {
	None,
	Damage,
	Block,
	Heal,
	Miss,
	Critical,
	Skill,
	Immune,
	DamageResist,
	DamageWeak,
	CriticalResist,
	CriticalWeak,
	Effective,
	CriticalEffective,
}
enum EmoticonEvent: int {
	CoverEnter,
	ShelterEnter,
	Panic,
	NearlyDead,
	Reload,
	Found,
	GetBeacon,
	Warning,
}
enum BulletType: int {
	Normal,
	Pierce,
	Explosion,
	Siege,
	Mystic,
	None,
	Sonic,
}
enum ActionType: int {
	Crush,
	Courage,
	Tactic,
}
enum BuffOverlap: int {
	Able,
	Unable,
	Change,
	Additive,
}
enum ReArrangeTargetType: int {
	AllySelf,
	AllyAll,
	AllyUnitType,
	AllyGroup,
}
enum ArmorType: int {
	LightArmor,
	HeavyArmor,
	Unarmed,
	Structure,
	Normal,
	ElasticArmor,
}
enum WeaponType: int {
	None,
	SG,
	SMG,
	AR,
	GL,
	HG,
	RL,
	SR,
	DSMG,
	RG,
	DSG,
	Vulcan,
	Missile,
	Cannon,
	Taser,
	MG,
	Binah,
	MT,
	Relic,
	FT,
}
enum EntityMaterialType: int {
	Wood,
	Stone,
	Flesh,
	Metal,
}
enum CoverMotionType: int {
	All,
	Kneel,
}
enum TargetSortBy: int {
	DISTANCE,
	HP,
	DAMAGE_EFFICIENCY,
	TARGETED_COUNT,
	RANDOM,
	FRONT_FORMATION,
}
enum PositioningType: int {
	CloseToObstacle,
	CloseToTarget,
}
enum DamageType: int {
	Normal,
	Critical,
	IgnoreDefence,
}
enum FormationLine: int {
	Students,
	TSS,
}
enum ExternalBTNodeType: int {
	Sequence,
	Selector,
	Instant,
	SubNode,
	ExecuteAll,
}
enum ExternalBTTrigger: int {
	None,
	HPUnder,
	ApplySkillEffectCategory,
	HaveNextExSkillActiveGauge,
	UseNormalSkill,
	UseExSkill,
	CheckActiveGaugeOver,
	CheckPeriod,
	CheckSummonCharacterCountOver,
	CheckSummonCharacterCountUnder,
	ApplyGroggy,
	ApplyLogicEffectTemplateId,
	OnSpawned,
	CheckActiveGaugeBetween,
	DestroyParts,
	CheckHallucinationCountOver,
	CheckHallucinationCountUnder,
	UseSkillEndGroupId,
}
enum ExternalBehavior: int {
	UseNextExSkill,
	ChangePhase,
	ChangeSection,
	AddActiveGauge,
	UseSelectExSkill,
	ClearNormalSkill,
	MoveLeft,
	MoveRight,
	AllUseSelectExSkill,
	ConnectCharacterToDummy,
	ConnectExSkillToParts,
	SetMaxHPToParts,
	AlivePartsUseExSkill,
	ActivatePart,
	AddGroggy,
	SelectTargetToUseSkillAlly,
	ForceChangePhase,
	ClearUseSkillEndGroupId,
}
enum TacticEntityType: int {
	None,
	Student,
	Minion,
	Elite,
	Champion,
	Boss,
	Obstacle,
	Servant,
	Vehicle,
	Summoned,
	Hallucination,
	DestructibleProjectile,
}
enum BuffIconType: int {
	None,
	Debuff_DyingPenalty,
	CC_MindControl,
	CC_Inoperative,
	CC_Confusion,
	CC_Provoke,
	CC_Silence,
	CC_Blind,
	Dot_Damage,
	Dot_Heal,
	Buff_AttackPower,
	Buff_CriticalChance,
	Buff_CriticalDamage,
	Buff_DefensePower,
	Buff_Dodge,
	Buff_Hit,
	Buff_WeaponRange,
	Buff_SightRange,
	Buff_MoveSpeed,
	Buff_Mind,
	Debuf_AttackPower,
	Debuff_CriticalChance,
	Debuff_CriticalDamage,
	Debuff_DefensePower,
	Debuff_Dodge,
	Debuff_Hit,
	Debuff_WeaponRange,
	Debuff_SightRange,
	Debuff_MoveSpeed,
	Debuff_Mind,
	Buff_AttackTime,
	Debuff_AttackTime,
	Buff_MaxHp,
	Debuff_MaxHp,
	Buff_MaxBulletCount,
	Debuff_MaxBulletCount,
	Debuff_SuppliesCondition,
	Buff_HealEffectivenessRate,
	Debuff_HealEffectivenessRate,
	Buff_HealPower,
	Debuff_HealPower,
	Buff_CriticalChanceResistPoint,
	Debuff_CriticalChanceResistPoint,
	CC_Stunned,
	Debuff_ConcentratedTarget,
	Buff_Immortal,
	Max,
}
enum Difficulty: int {
	Normal,
	Hard,
	VeryHard,
	Hardcore,
	Extreme,
	Insane,
	Torment,
}
enum EngageType: int {
	SearchAndMove,
	HoldPosition,
}
enum HitEffectPosition: int {
	Position,
	HeadBone,
	BodyBone,
	Follow,
}
enum StageTopography: int {
	Street,
	Outdoor,
	Indoor,
}
enum TerrainAdaptationStat: int {
	D,
	C,
	B,
	A,
	S,
	SS,
}
enum SquadType: int {
	None,
	Main,
	Support,
	TSS,
}
enum ObstacleClass: int {
	MAIN,
	SUB,
}
enum ObstacleDestroyType: int {
	Remain,
	Remove,
}
enum ObstacleHeightType: int {
	Low,
	Middle,
	High,
}
enum ObstacleCoverType: int {
	None,
	Cover,
	Shelter,
}
enum SkillCategory: int {
	None,
}
enum LogicEffectCategory: int {
	None,
	Attack,
	Heal,
	Buff,
	Debuff,
	CrowdControl,
	Boss,
	Dummy,
}
enum AimIKType: int {
	None,
	OneHandRight,
	OneHandLeft,
	TwoHandRight,
	TwoHandLeft,
	Tripod,
	Dual,
	Max,
}
enum DamageAttribute: int {
	Resist,
	Normal,
	Weak,
	Effective,
}
enum SkillPriorityCheckCondition: int {
	None,
	HPRateUnder,
	DebuffCountOver,
	BuffCountOver,
	CrowdControlOver,
}
enum SkillPriorityCheckTarget: int {
	Ally,
	Enemy,
	All,
}
enum StageType: int {
	Main,
	Sub,
}
enum OperatorCondition: int {
	None,
	StrategyStart,
	StrategyVictory,
	StrategyDefeat,
	AdventureCombatStart,
	AdventureCombatVictory,
	AdventureCombatDefeat,
	ArenaCombatStart,
	ArenaCombatVictory,
	ArenaCombatDefeat,
	WeekDungeonCombatStart,
	WeekDungeonCombatVictory,
	WeekDungeonCombatDefeat,
	SchoolDungeonCombatStart,
	SchoolDungeonCombatVictory,
	SchoolDungeonCombatDefeat,
	StrategyWarpUnitFromHideTile,
	TimeAttackDungeonStart,
	TimeAttackDungeonVictory,
	TimeAttackDungeonDefeat,
	WorldRaidBossSpawn,
	WorldRaidBossKill,
	WorldRaidBossDamaged,
	WorldRaidScenarioBattle,
}
enum KnockbackDirection: int {
	TargetToCaster,
	CasterToTarget,
	TargetToHitPosition,
	HitPositionToTarget,
	CasterToHitPosition,
	HitPositionToCaster,
	Caster,
	Target,
}
enum EndCondition: int {
	Duration,
	ReloadCount,
	AmmoCount,
	AmmoHit,
	HitCount,
	None,
	UseExSkillCount,
}
enum LogicEffectSound: int {
	None,
	Damage,
	Heal,
	Knockback,
}
enum EffectBone: int {
	None,
	Shot,
	Head,
	Body,
	Shot2,
	Shot3,
	Extra,
	Extra2,
	Extra3,
}
enum ArenaSimulatorServer: int {
	Preset,
	Live,
	Dev,
	QA,
}
enum ClearCheck: int {
	None,
	Success_Play,
	Success_Sweep,
	Fail_Timeout,
	Fail_PlayerGiveUp,
	Fail_Annihilation,
}
enum BuffType: int {
	None,
	Buff_AttackPower,
	Buff_CriticalChance,
	Buff_CriticalDamage,
	Buff_DefensePower,
	Buff_Dodge,
	Buff_Hit,
	Buff_WeaponRange,
	Buff_SightRange,
	Buff_MoveSpeed,
	Buff_AttackTime,
	Buff_MaxHp,
	Buff_MaxBulletCount,
	DeBuff_AttackPower,
	DeBuff_CriticalChance,
	DeBuff_CriticalDamage,
	DeBuff_DefensePower,
	DeBuff_Dodge,
	DeBuff_Hit,
	DeBuff_WeaponRange,
	DeBuff_SightRange,
	DeBuff_MoveSpeed,
	DeBuff_AttackTime,
	DeBuff_MaxHp,
	DeBuff_MaxBulletCount,
}
enum WorldRaidDifficulty: int {
	None,
	A,
	B,
	C,
	D,
	E,
	F,
	G,
}
enum TacticSpeed: int {
	None,
	Slow,
	Normal,
	Fast,
}
enum TacticSkillUse: int {
	None,
	Auto,
	Manual,
}
enum ShowSkillCutIn: int {
	None,
	Once,
	Always,
}
enum BattleCalculationStat: int {
	FinalDamage,
	FinalHeal,
	FinalDamageRatio,
	FinalDamageRatio2,
	FinalCriticalRate,
}
enum StatLevelUpType: int {
	Standard,
	Premature,
	LateBloom,
	Obstacle,
	TimeAttack,
}
enum GrowthCategory: int {
	None,
	LevelUp,
	Transcend,
	SkillLevelUp,
}
enum StatType: int {
	None,
	MaxHP,
	AttackPower,
	DefensePower,
	HealPower,
	AccuracyPoint,
	AccuracyRate,
	DodgePoint,
	DodgeRate,
	CriticalPoint,
	CriticalChanceRate,
	CriticalResistChanceRate,
	CriticalDamageRate,
	MoveSpeed,
	SightRange,
	ActiveGauge,
	StabilityPoint,
	StabilityRate,
	ReloadTime,
	MaxBulletCount,
	IgnoreDelayCount,
	WeaponRange,
	BlockRate,
	BodyRadius,
	ActionCount,
	StrategyMobility,
	StrategySightRange,
	StreetBattleAdaptation,
	OutdoorBattleAdaptation,
	IndoorBattleAdaptation,
	HealEffectivenessRate,
	CriticalChanceResistPoint,
	CriticalDamageResistRate,
	LifeRecoverOnHit,
	NormalAttackSpeed,
	AmmoCost,
	GroggyGauge,
	GroggyTime,
	DamageRatio,
	DamagedRatio,
	OppressionPower,
	OppressionResist,
	RegenCost,
	InitialWeaponRangeRate,
	DefensePenetration,
	DefensePenetrationResisit,
	ExtendBuffDuration,
	ExtendDebuffDuration,
	ExtendCrowdControlDuration,
	EnhanceExplosionRate,
	EnhancePierceRate,
	EnhanceMysticRate,
	EnhanceLightArmorRate,
	EnhanceHeavyArmorRate,
	EnhanceUnarmedRate,
	EnhanceSiegeRate,
	EnhanceNormalRate,
	EnhanceStructureRate,
	EnhanceNormalArmorRate,
	DamageRatio2Increase,
	DamageRatio2Decrease,
	DamagedRatio2Increase,
	DamagedRatio2Decrease,
	Max,
	EnhanceSonicRate,
	EnhanceElasticArmorRate,
}
enum ProductionStep: int {
	ToDo,
	Doing,
	Complete,
	Release,
}
enum TacticRole: int {
	None,
	DamageDealer,
	Tanker,
	Supporter,
	Healer,
	Vehicle,
}
enum TacticRange: int {
	Back,
	Front,
	Middle,
}
enum CVCollectionType: int {
	CVNormal,
	CVEvent,
	CVEtc,
}
enum CVPrintType: int {
	CharacterOverwrite,
	PrefabOverwrite,
	Add,
}
enum CVExceptionTarget: int {
	CharacterId,
	SquadType,
}
enum ClanSocialGrade: int {
	None,
	President,
	Manager,
	Member,
	Applicant,
	Refused,
	Kicked,
	Quit,
	VicePredisident,
}
enum ClanJoinOption: int {
	Free,
	Permission,
	All,
}
enum ClanSearchOption: int {
	Name,
	Id,
}
enum ClanRewardType: int {
	None,
	AssistTerm,
	AssistRent,
	Attendance,
}
enum ConquestEnemyType: int {
	None,
	Normal,
	MiddleBoss,
	Boss,
	UnexpectedEvent,
	Challenge,
	IndividualErosion,
	MassErosion,
}
enum ConquestTeamType: int {
	None,
	Team1,
	Team2,
	Team3,
}
enum ConquestTileType: int {
	None,
	Start,
	Normal,
	Battle,
	Base,
}
enum ConquestObjectType: int {
	None,
	ParcelOneTimePerAccount,
}
enum ConquestItemType: int {
	None,
	EventPoint,
	EventToken1,
	EventToken2,
	EventToken3,
	EventToken4,
	EventToken5,
}
enum ConquestProgressType: int {
	None,
	Upgrade,
	Manage,
}
enum TileState: int {
	None,
	PartiallyConquested,
	FullyConquested,
}
enum ConquestEventType: int {
	None,
	Event01,
	Event02,
}
enum ConquestConditionType: int {
	None,
	OpenDateOffset,
	ItemAcquire,
	ParcelUse,
	KillUnit,
}
enum ConquestErosionType: int {
	None,
	IndividualErosion,
	MassErosion,
}
enum ContentType: int {
	None,
	CampaignMainStage,
	CampaignSubStage,
	WeekDungeon,
	EventContentMainStage,
	EventContentSubStage,
	CampaignTutorialStage,
	EventContentMainGroundStage,
	SchoolDungeon,
	TimeAttackDungeon,
	Raid,
	Conquest,
	EventContentStoryStage,
	CampaignExtraStage,
	StoryStrategyStage,
	ScenarioMode,
	EventContent,
	WorldRaid,
	EliminateRaid,
	Chaser,
}
enum EventContentType: int {
	Stage,
	Gacha,
	Mission,
	Shop,
	Raid,
	Arena,
	BoxGacha,
	Collection,
	Recollection,
	MiniGameRhythm,
	CardShop,
	EventLocation,
	MinigameRhythmEvent,
	FortuneGachaShop,
	SubEvent,
	EventMeetup,
	BoxGachaResult,
	Conquest,
	WorldRaid,
	DiceRace,
	MiniGameRhythmMission,
	WorldRaidEntrance,
	MiniEvent,
	MiniGameShooting,
	MiniGameShootingMission,
	MiniGameTBG,
	TimeAttackDungeon,
	EliminateRaid,
}
enum OpenCondition: int {
	Hide,
	Lock,
	Open,
}
enum ResetContentType: int {
	None,
	HardStagePlay,
	StarategyMapHeal,
	ShopRefresh,
	ArenaDefenseVictoryReward,
	WeeklyMasterCoin,
	WorldRaidGemEnterCount,
	ConquestDailyErosionCheck,
	MiniEventToken,
}
enum WeekDungeonType: int {
	None,
	ChaserA,
	ChaserB,
	ChaserC,
	FindGift,
	Blood,
}
enum StarGoalType: int {
	None,
	AllAlive,
	Clear,
	GetBoxes,
	ClearTimeInSec,
}
enum OpenConditionContent: int {
	Shop,
	Gacha,
	LobbyIllust,
	Raid,
	Cafe,
	Unit_Growth_Skill,
	Unit_Growth_LevelUp,
	Unit_Growth_Transcendence,
	Arena,
	Academy,
	Equip,
	Item,
	Favor,
	Prologue,
	Mission,
	WeekDungeon_Chase,
	__Deprecated_WeekDungeon_FindGift,
	__Deprecated_WeekDungeon_Blood,
	Story_Sub,
	Story_Replay,
	WeekDungeon,
	None,
	Shop_Gem,
	Craft,
	Student,
	GuideMission,
	Clan,
	Echelon,
	Campaign,
	EventContent,
	Guild,
	EventStage_1,
	EventStage_2,
	Talk,
	Billing,
	Schedule,
	Story,
	Tactic_Speed,
	Cafe_Invite,
	EventMiniGame_1,
	SchoolDungeon,
	TimeAttackDungeon,
	ShiftingCraft,
	WorldRaid,
	Tactic_Skip,
	Mulligan,
	EventPermanent,
	Main_L_1_2,
	Main_L_1_3,
	Main_L_1_4,
	EliminateRaid,
}
enum ContentLockType: int {
	None,
	NotUseControlledByOtherSetting,
	Academy,
	Arena,
	Billing,
	Cafe,
	Campaign,
	Clan,
	Craft,
	Echelon,
	Equipment,
	EventContent,
	EventStage_1,
	EventStage_2,
	Favor,
	Gacha,
	GuideMission,
	Item,
	LobbyIllust,
	Mission,
	MomoTalk,
	Raid,
	Schedule,
	Shop,
	SkipHistorySave,
	Story,
	Unit_Growth_LevelUp,
	Unit_Growth_Skill,
	Unit_Growth_Transcendence,
	WeekDungeon,
	WeekDungeon_Chase,
	SchoolDungeon,
	TimeAttackDungeon,
	WorldRaid,
	RaidSeasonReward,
	RaidRankingReward,
	Friend,
	Main_L_1_2,
	Main_L_1_3,
	Main_L_1_4,
	EliminateRaid,
	EliminateRaidSeasonReward,
	EliminateRaidRankingReward,
}
enum TutorialFailureContentType: int {
	None,
	Campaign,
	WeekDungeon,
	Raid,
	TimeAttackDungeon,
	WorldRaid,
	Conquest,
}
enum FeverBattleType: int {
	Campaign,
	Raid,
	WeekDungeon,
	Arena,
}
enum EventContentScenarioConditionType: int {
	None,
	DayAfter,
	EventPoint,
}
enum EventTargetType: int {
	WeekDungeon,
	Chaser,
	Campaign_Normal,
	Campaign_Hard,
	SchoolDungeon,
	AcademySchedule,
	TimeAttackDungeon,
	AccountLevelExpIncrease,
	Raid,
	EliminateRaid,
}
enum ContentResultType: int {
	Failure,
	Success,
}
enum EventContentItemType: int {
	EventPoint,
	EventToken1,
	EventToken2,
	EventToken3,
	EventToken4,
	EventToken5,
	EventMeetUpTicket,
}
enum RaidSeasonType: int {
	None,
	Open,
	Close,
	Settlement,
}
enum BuffConditionType: int {
	All,
	Character,
	School,
	Weapon,
}
enum EventCollectionUnlockType: int {
	None,
	ClearSpecificEventStage,
	ClearSpecificEventScenario,
	ClearSpecificEventMission,
	PurchaseSpecificItemCount,
	SpecificEventLocationRank,
	DiceRaceConsumeDiceCount,
	MinigameTBGThemaClear,
}
enum ShortcutContentType: int {
	None,
	CampaignStage,
	EventStage,
	Blood,
	WeekDungeon,
	Arena,
	Raid,
	Shop,
	ItemInventory,
	Craft,
	SchoolDungeon,
	Academy,
}
enum JudgeGrade: int {
	None,
	Miss,
	Attack,
	Critical,
}
enum SchoolDungeonType: int {
	SchoolA,
	SchoolB,
	SchoolC,
	None,
}
enum EventContentBuffFindRule: int {
	None,
	WeaponType,
	SquadType,
	StreetBattleAdaptation,
	OutdoorBattleAdaptation,
	IndoorBattleAdaptation,
	BulletType,
	School,
	TacticRange,
}
enum TimeAttackDungeonRewardType: int {
	Fixed,
	TimeWeight,
}
enum TimeAttackDungeonType: int {
	None,
	Defense,
	Shooting,
	Destruction,
}
enum SuddenMissionContentType: int {
	OrdinaryState,
	CampaignNormalStage,
	CampaignHardStage,
	EventStage,
	WeekDungeon,
	Chaser,
	SchoolDungeon,
	TimeAttackDungeon,
	Raid,
}
enum ContentsChangeType: int {
	None,
	WorldRaidBossDamageRatio,
	WorldRaidBossGroupDate,
}
enum EventNotifyType: int {
	RewardIncreaseEvent,
	AccountExpIncreaseEvent,
	RaidSeasonManager,
	TimeAttackDungeonSeasonManage,
	EliminateRaidSeasonManage,
}
enum EventContentDiceRaceResultType: int {
	DiceResult1,
	DiceResult2,
	DiceResult3,
	DiceResult4,
	DiceResult5,
	DiceResult6,
	MoveForward,
	LapFinish,
	EventOccur,
	DiceResultFixed1,
	DiceResultFixed2,
	DiceResultFixed3,
	DiceResultFixed4,
	DiceResultFixed5,
	DiceResultFixed6,
	SpecialReward,
}
enum EventContentDiceRaceNodeType: int {
	StartNode,
	RewardNode,
	MoveForwardNode,
	SpecialRewardNode,
}
enum GuideMissionTabType: int {
	None,
	Daily,
	StageClear,
}
enum RankingSearchType: int {
	None,
	Rank,
	Score,
}
enum EventContentReleaseType: int {
	None,
	Permanent,
	MainStory,
}
enum EquipmentCategory: int {
	Unable,
	Exp,
	Bag,
	Hat,
	Gloves,
	Shoes,
	Badge,
	Hairpin,
	Charm,
	Watch,
	Necklace,
	WeaponExpGrowthA,
	WeaponExpGrowthB,
	WeaponExpGrowthC,
	WeaponExpGrowthZ,
}
enum EquipmentOptionType: int {
	None,
	MaxHP_Base,
	MaxHP_Coefficient,
	AttackPower_Base,
	AttackPower_Coefficient,
	DefensePower_Base,
	DefensePower_Coefficient,
	HealPower_Base,
	HealPower_Coefficient,
	CriticalPoint_Base,
	CriticalPoint_Coefficient,
	CriticalChanceRate_Base,
	CriticalDamageRate_Base,
	CriticalDamageRate_Coefficient,
	SightRange_Base,
	SightRange_Coefficient,
	MaxBulletCount_Base,
	MaxBulletCount_Coefficient,
	HPRecoverOnKill_Base,
	HPRecoverOnKill_Coefficient,
	StreetBattleAdaptation_Base,
	OutdoorBattleAdaptation_Base,
	IndoorBattleAdaptation_Base,
	HealEffectivenessRate_Base,
	HealEffectivenessRate_Coefficient,
	CriticalChanceResistPoint_Base,
	CriticalChanceResistPoint_Coefficient,
	CriticalDamageResistRate_Base,
	CriticalDamageResistRate_Coefficient,
	ExSkillUpgrade,
	OppressionPower_Base,
	OppressionPower_Coefficient,
	OppressionResist_Base,
	OppressionResist_Coefficient,
	StabilityPoint_Base,
	StabilityPoint_Coefficient,
	AccuracyPoint_Base,
	AccuracyPoint_Coefficient,
	DodgePoint_Base,
	DodgePoint_Coefficient,
	MoveSpeed_Base,
	MoveSpeed_Coefficient,
	Max,
	NormalAttackSpeed_Base,
	NormalAttackSpeed_Coefficient,
}
enum MultipleConditionCheckType: int {
	And,
	Or,
}
enum Language: int {
	Kr,
	Jp,
	Th,
	Tw,
	En,
}
enum SoundType: int {
	UI,
	BGM,
	FX,
}
enum WeekDay: int {
	Sunday,
	Monday,
	Tuesday,
	Wednesday,
	Thursday,
	Friday,
	Saturday,
	All,
}
enum EchelonType: int {
	None,
	Adventure,
	Raid,
	ArenaAttack,
	ArenaDefence,
	WeekDungeonChaserA,
	Scenario,
	WeekDungeonBlood,
	WeekDungeonChaserB,
	WeekDungeonChaserC,
	WeekDungeonFindGift,
	EventContent,
	SchoolDungeonA,
	SchoolDungeonB,
	SchoolDungeonC,
	TimeAttack,
	WorldRaid,
	Conquest,
	ConquestManage,
	StoryStrategyStage,
	EliminateRaid01,
	EliminateRaid02,
	EliminateRaid03,
}
enum NoticeType: int {
	None,
	Notice,
	Event,
}
enum RewardTag: int {
	Default,
	FirstClear,
	StrategyObject,
	Event,
	ThreeStar,
	ProductMonthly,
	Rare,
	EventBonus,
	TimeWeight,
	ProductWeekly,
	ProductBiweekly,
	EventPermanentReward,
	ConquestManageEvent,
	ConquestManageDefault,
	ConquestCalculateDefault,
	ConquestCalculateLevel2,
	ConquestCalculateLevel3,
	ConquestFootholdUpgrade2,
	ConquestFootholdUpgrade3,
	ConquestErosionPenalty,
	GemBonus,
	GemPaid,
}
enum ArenaRewardType: int {
	None,
	Time,
	Daily,
	SeasonRecord,
	OverallRecord,
	SeasonClose,
	AttackVictory,
	DefenseVictory,
	RankIcon,
}
enum ServiceActionType: int {
	ClanCreate,
	HardAdventurePlayCountRecover,
}
enum RaidStatus: int {
	None,
	Playing,
	Clear,
	Close,
}
enum WebAPIErrorLevel: int {
	None,
	Warning,
	Error,
}
enum GachaTicketType: int {
	None,
	PackageThreeStar,
	ThreeStar,
	TwoStar,
	Normal,
	NormalOnce,
	StartDash,
	SelectRecruit,
	PackagePropertyThreeStar,
}
enum EventChangeType: int {
	MainSub,
	SubMain,
}
enum CafeCharacterState: int {
	None,
	Idle,
	Walk,
	Reaction,
	Interaction,
	Max,
}
enum FurnitureFunctionType: int {
	None,
	EventCollection,
	VideoPlay,
	TrophyCollection,
}
enum NotificationEventReddot: int {
	StagePointReward,
	MissionComplete,
	MiniGameMissionComplete,
	WorldRaidReward,
	ConquestCalculateReward,
	DiceRaceLapReward,
}
enum EmblemCategory: int {
	None,
	Default,
	GroupStroy,
	EventChallenge,
	MainStory,
	Favor,
}
enum EmblemDisplayType: int {
	Always,
	Time,
	Favor,
}
enum EmblemCheckPassType: int {
	None,
	Default,
	Favor,
}
enum FriendSearchLevelOption: int {
	Recommend,
	All,
	Level1To30,
	Level31To40,
	Level41To50,
	Level51To60,
	Level61To70,
	Level71To80,
	Level81To90,
	Level91To100,
}
enum ItemCategory: int {
	Coin,
	CharacterExpGrowth,
	SecretStone,
	Material,
	Consumable,
	Collectible,
	Favor,
	RecruitCoin,
	MonthlyBonus,
	InvisibleToken,
}
enum MailType: int {
	System,
	Attendance,
	Event,
	MassTrade,
	InventoryFull,
	ArenaDefenseVictory,
	CouponUsageReward,
	ArenaSeasonClose,
	ProductReward,
	MonthlyProductReward,
	ExpiryChangeItem,
	ClanAttendance,
	AccountLink,
	NewUserBonus,
	LeftClanAssistReward,
	CashShopBuy,
	MonthlyProductPackage,
	WebEventReward,
	AttendanceImmediately,
	WeeklyProductReward,
	BiweeklyProductReward,
}
enum AttendanceType: int {
	Basic,
	Event,
	Newbie,
	EventCountDown,
	Event20Days,
}
enum AttendanceCountRule: int {
	Accumulation,
	Date,
}
enum AttendanceResetType: int {
	User,
	Server,
}
enum Geas: int {
	ForwardProjectile,
	DiagonalProjectile,
	SideProjectile,
	Pierce,
	Reflect,
	Burn,
	Chill,
	AttackPower,
	AttackSpeed,
	Critical,
	Heal,
}
enum TBGObjectType: int {
	None,
	EnemyBoss,
	EnemyMinion,
	Random,
	Facility,
	TreasureBox,
	Start,
	Portal,
}
enum TBGOptionSuccessType: int {
	None,
	TBGItemAcquire,
	ItemAcquire,
}
enum TBGItemType: int {
	None,
	Dice,
	Heal,
	HealExpansion,
	Defence,
	Guide,
	DiceResultValue,
	DefenceCritical,
}
enum TBGItemEffectType: int {
	None,
	PermanentContinuity,
	TemporaryContinuation,
	Immediately,
}
enum TBGTileType: int {
	None,
	Start,
	Movable,
	UnMovable,
}
enum TBGThemaType: int {
	None,
	Normal,
	Hidden,
}
enum TBGPortalCondition: int {
	None,
	ObjectAllEncounter,
	Round,
}
enum TBGProbModifyCondition: int {
	None,
	AllyRevive,
	DicePlayFail,
}
enum TBGVoiceCondition: int {
	None,
	DiceResultSuccess,
	DiceResultFailBattle,
	DiceResultFailRandom,
	EnemyDie,
	TreasureBoxNormal,
	TreasureBoxSpecial,
	FacilityResult,
}
enum MiniGameTBGThemaRewardType: int {
	TreasureReward,
	EmptyTreasureReward,
}
enum MissionCategory: int {
	Challenge,
	Daily,
	Weekly,
	Achievement,
	GuideMission,
	All,
	MiniGameScore,
	MiniGameEvent,
	EventAchievement,
	DailySudden,
	DailyFixed,
	EventFixed,
}
enum MissionResetType: int {
	None,
	Daily,
	Weekly,
}
enum MissionCompleteConditionType: int {
	None,
	Reset_DailyLogin,
	Reset_DailyLoginCount,
	Reset_CompleteMission,
	Achieve_EquipmentLevelUpCount,
	Achieve_EquipmentTierUpCount,
	Achieve_CharacterLevelUpCount,
	Reset_CharacterTranscendenceCount,
	Reset_ClearTaticBattleCount,
	Achieve_ClearCampaignStageCount,
	Reset_KillSpecificEnemyCount,
	Reset_KillEnemyWithTagCount,
	Reset_GetCharacterCount,
	Reset_GetCharacterWithTagCount,
	Reset_GetSpecificCharacterCount,
	Reset_AccountLevelUp,
	Reset_GetEquipmentCount,
	Reset_GachaCount,
	Reset_UseGem,
	Reset_GetGem,
	Reset_GetGemPaid,
	Achieve_GetGold,
	Achieve_GetItem,
	Reset_GetFavorLevel,
	Reset___Deprecated_EquipmentAtSpecificLevelCount,
	Reset_EquipmentAtSpecificTierUpCount,
	Reset_CharacterAtSpecificLevelCount,
	Reset_CharacterAtSpecificTranscendenceCount,
	Achieve_CharacterSkillLevelUpCount,
	Reset_CharacterAtSpecificSkillLevelCount,
	Reset_CompleteScheduleCount,
	Reset_CompleteScheduleGroupCount,
	Reset_AcademyLocationRankSum,
	Reset_CraftCount,
	Achieve_GetComfortPoint,
	Achieve_GetWeaponCount,
	Reset_EquipWeaponCount_Obsolete,
	Reset_CompleteScheduleWithSpecificCharacter,
	Reset_CafeInteractionCount,
	Reset_SpecificCharacterAtSpecificLevel,
	Reset_SpecificCharacterAtSpecificTranscendence,
	Reset_LobbyInteraction,
	Achieve_ClearWeekDungeonCount,
	Reset_ClearSpecificWeekDungeonCount,
	Achieve_JoinRaidCount,
	Reset_JoinSpecificRaidCount,
	Achieve_JoinArenaCount,
	Reset_ArenaVictoryCount,
	Reset_RaidDamageAmountOnOneBattle,
	Reset_ClearEventStageCount,
	Reset_UseSpecificCharacterCount,
	Achieve_UseGold,
	Reset_UseTiket,
	Reset_ShopBuyCount,
	Reset_ShopBuyActionPointCount,
	Reset_SpecificCharacterAtSpecificFavorRank,
	Reset_ClearSpecificScenario,
	Reset_GetSpecificItemCount,
	Achieve_TotalGetClearStarCount,
	Reset_CompleteCampaignStageMinimumTurn,
	Achieve_TotalLoginCount,
	Reset_LoginAtSpecificTime,
	Reset_CompleteFavorSchedule,
	Reset_CompleteFavorScheduleAtSpecificCharacter,
	Reset_GetMemoryLobbyCount,
	Reset_GetFurnitureGroupCount,
	Reset_AcademyLocationAtSpecificRank,
	Reset_ClearCampaignStageDifficultyNormal,
	Reset_ClearCampaignStageDifficultyHard,
	Achieve_ClearChaserDungeonCount,
	Reset_ClearSpecificChaserDungeonCount,
	Reset_GetCafeRank,
	Reset_SpecificStarCharacterCount,
	Reset_EventClearCampaignStageCount,
	Reset_EventClearSpecificCampaignStageCount,
	Reset_EventCompleteCampaignStageMinimumTurn,
	Reset_EventClearCampaignStageDifficultyNormal,
	Reset_EventClearCampaignStageDifficultyHard,
	Reset_ClearSpecificCampaignStageCount,
	Reset_GetItemWithTagCount,
	Reset_GetFurnitureWithTagCount,
	Reset_GetEquipmentWithTagCount,
	Reset_ClearCampaignStageTimeLimitFromSecond,
	Reset_ClearEventStageTimeLimitFromSecond,
	Reset_ClearRaidTimeLimitFromSecond,
	Reset_ClearBattleWithTagCount,
	Reset_ClearWeekDungeonTimeLimitFromSecond,
	Reset_CompleteScheduleWithTagCount,
	Reset_ClearChaserDungeonTimeLimitFromSecond,
	Reset_GetTotalScoreRhythm,
	Reset_GetBestScoreRhythm,
	Reset_GetSpecificScoreRhythm,
	Reset_ClearStageRhythm,
	Reset_GetComboCountRhythm,
	Reset_GetFullComboRhythm,
	Reset_GetFeverCountRhythm,
	Reset_UseActionPoint,
	Achieve_ClearSchoolDungeonCount,
	Reset_ClearSchoolDungeonTimeLimitFromSecond,
	Reset_ClearSpecificSchoolDungeonCount,
	Reset_GetCriticalCountRhythm,
	Achieve_WeaponTranscendenceCount,
	Achieve_WeaponLevelUpCount,
	Reset_WeaponAtSpecificTranscendenceCount,
	Reset_WeaponAtSpecificLevelUpCount,
	Reset_BuyShopGoods,
	Reset_ClanLogin,
	Reset_AssistCharacterSetting,
	Reset_DailyMissionFulfill,
	Reset_SelectedMissionFulfill,
	Reset_TotalDamageToWorldRaid,
	Reset_JoinWorldRaidTypeNumber,
	Reset_JoinWorldRaidBattleWithTagCount,
	Reset_ClearWorldRaidTimeLimitFromSecond,
	Achieve_KillEnemyWithDecagrammatonSPOTagCount,
	Reset_ConquerTileCount,
	Reset_ConquerSpecificStepTileCount,
	Reset_ConquerSpecificStepTileAll,
	Reset_UpgradeConquestBaseTileCount,
	Reset_KillConquestBoss,
	Reset_ClearEventConquestTileTimeLimitFromSecond,
	Reset_DiceRaceUseDiceCount,
	Reset_DiceRaceFinishLapCount,
	Reset_FortuneGachaCount,
	Reset_FortuneGachaCountByGrade,
	Reset_ClearCountShooting,
	Reset_ClearSpecificStageShooting,
	Reset_ClearSpecificCharacterShooting,
	Reset_ClearSpecificSectionShooting,
	Achieve_JoinEliminateRaidCount,
}
enum AccountAchievementType: int {
	TotalLoginCount,
	TotalGetClearStarCount,
	TotalCharacterLevelUpCount,
	TotalCharacterSkillLevelUpCount,
	TotalClearCampaignStageCount,
	TotalClearChaserDungeonCount,
	TotalClearWeekDungeonCount,
	TotalEquipmentLevelUpCount,
	TotalEquipmentTierUpCount,
	MaxComfortPoint,
	TotalGetGold,
	TotalUseGold,
	TotalJoinArenaCount,
	TotalJoinRaidCount,
	TotalClearSchoolDungeonCount,
	TotalGetWeaponCount,
	TotalWeaponLevelUpCount,
	TotalWeaponTranscendenceCount,
	KillEnemyWithDecagrammatonSPOTagCount,
	EventPoint,
	ConquestCalculateReward,
	TotalJoinEliminateRaidCount,
}
enum MissionToastDisplayConditionType: int {
	Always,
	Complete,
	Never,
}
enum NexonBillingState: int {
	ValiDateWait,
	ValiDateFail,
	ValiDateSuccess,
	Finish,
}
enum AccountBanType: int {
	None,
	AbuseGamePlay,
	AbuseMarket,
	AbuseGameSystem,
	OperaionPolicyViolate,
	Useillegalprogram,
	Temporaryconstraint,
}
enum ParcelType: int {
	None,
	Character,
	Currency,
	Equipment,
	Item,
	GachaGroup,
	Product,
	Shop,
	MemoryLobby,
	AccountExp,
	CharacterExp,
	FavorExp,
	TSS,
	Furniture,
	ShopRefresh,
	LocationExp,
	Recipe,
	CharacterWeapon,
	ProductMonthly,
	CharacterGear,
	IdCardBackground,
	Emblem,
}
enum Rarity: int {
	N,
	R,
	SR,
	SSR,
}
enum Tier: int {
	T1,
	T2,
	T3,
	T4,
}
enum CurrencyTypes: int {
	Invalid,
	Gold,
	GemPaid,
	GemBonus,
	Gem,
	ActionPoint,
	AcademyTicket,
	ArenaTicket,
	RaidTicket,
	WeekDungeonChaserATicket,
	WeekDungeonFindGiftTicket,
	WeekDungeonBloodTicket,
	WeekDungeonChaserBTicket,
	WeekDungeonChaserCTicket,
	SchoolDungeonATicket,
	SchoolDungeonBTicket,
	SchoolDungeonCTicket,
	TimeAttackDungeonTicket,
	MasterCoin,
	WorldRaidTicketA,
	WorldRaidTicketB,
	WorldRaidTicketC,
	ChaserTotalTicket,
	SchoolDungeonTotalTicket,
	EliminateTicketA,
	EliminateTicketB,
	EliminateTicketC,
	Max,
}
enum SortingTarget: int {
	None,
	Rarity,
	Level,
	StarGrade,
	Tier,
}
enum CurrencyOverChargeType: int {
	CanNotCharge,
	FitToLimit,
	ChargeOverLimit,
}
enum CurrencyAdditionalChargeType: int {
	EnableAutoChargeOverLimit,
	DisableAutoChargeOverLimit,
}
enum RecipeType: int {
	None,
	Craft,
	SkillLevelUp,
	CharacterTranscendence,
	EquipmentTierUp,
	CafeRankUp,
	SelectionItem,
	WeaponTranscendence,
	SelectRecruit,
}
enum GachaGroupType: int {
	None,
	Reward_General,
	System_Craft,
	Reward_Pack,
}
enum ParcelChangeReason: int {
	None,
	Acquire_NewAccount,
	Acquire_PlayReward,
	Acquire_ChapterReward,
	Acquire_LoginReward,
	Acquire_EventReward,
	Acquire_GMPush,
	Acquire_ShopBuy,
	Acquire_GachaBuy,
	Acquire_CurrencyBuy,
	Equipment_Equip,
	Equipment_Unequip,
	Equipment_Levelup,
	Equipment_LimitBreak,
	Equipment_Transcendence,
	Equipment_Enchant,
	Item_Use,
	Item_Lock,
	Item_CharacterGrowthMaterial,
	Item_Change,
	Item_Delete,
	Item_Consume,
	Item_SelectTicket,
	Character_ExpGrowth,
	Character_Transcendence,
	Character_SkillLevelUp,
	Character_FavorGrowth,
	Furniture_CafeSet,
	Furniture_CafeRecall,
	Academy_AttendSchedule,
	Academy_MessageList,
	Adventure_EnterMainStage,
	Adventure_EnterSubStage,
	Adventure_MainStageBattleResult,
	Adventure_SubStageBattleResult,
	Adventure_ChapterClearReward,
	Adventure_Retreat,
	Adventure_PurchasePlayCountHardStage,
	Adventure_TutorialStage,
	Adventure_TutorialStageBattleResult,
	ContentSweep_Sweep,
	Arena_TimeReward,
	Arena_DailyReward,
	Arena_EnterBattle,
	Arena_BattleResult,
	Cafe_Interact,
	Cafe_Production,
	Cafe_RankUp,
	Cafe_GiveGift,
	WeekDungeon_BattleResult,
	WeekDungeon_EnterBattle,
	WeekDungeon_Retreat,
	Mission_Clear,
	Shop_Refresh,
	Shop_BuyEligma,
	Shop_BuyMerchandise,
	Shop_BuyGacha,
	Scenario_Clear,
	Recipe_Craft,
	Raid_Failed,
	Raid_Reward,
	Raid_SeasonReward,
	Raid_CreateBattle,
	CumulativeTimeReward_Reward,
	Mail_Receive,
	MomoTalk_FavorSchedule,
	WeekDungeon_EnterBlood,
	WeekDungeon_EnterGift,
	Acquire_ActionPoint,
	Acquire_ArenaTicket,
	EventContent_TotalReward,
	Craft_UpdateNode,
	Craft_CompleteProcess,
	Craft_Reward,
	EventContent_BattleResult,
	Adventure_Sweep,
	EventContent_Sweep,
	WeekDungeon_Sweep,
	Acquire_MonthlyProduct,
	Acquire_DailyReward,
	Billing_PurchaseProduct,
	EventContent_EnterMainStage,
	EventContent_EnterSubStage,
	EventContent_MainStageResult,
	EventContent_SubStageResult,
	EventContent_Retreat,
	WeekDungeon_BloodResult,
	WeekDungeon_GiftResult,
	WeekDungeon_EnterChaserA,
	WeekDungeon_EnterChaserB,
	WeekDungeon_EnterChaserC,
	WeekDungeon_ChaserAResult,
	WeekDungeon_ChaserBResult,
	WeekDungeon_ChaserCResult,
	EventContent_BoxGacha,
	Raid_Sweep,
	Clan_AssistReward,
	EventContent_CardShop,
	CharacterWeapon_ExpGrowth,
	CharacterWeapon_Transcendence,
	MiniGameMission_Clear,
	Clan_Create,
	ContentDiscard_Currency,
	SchoolDungeon_EnterSchoolA,
	SchoolDungeon_EnterSchoolB,
	SchoolDungeon_EnterSchoolC,
	SchoolDungeon_SchoolAResult,
	SchoolDungeon_SchoolBResult,
	SchoolDungeon_SchoolCResult,
	TimeAttackDungeon_CreateBattle,
	TimeAttackDungeon_EndBattle,
	TimeAttackDungeon_Reward,
	Arena_SeasonReward,
	Arena_OverallReward,
	EventContent_AttendSchedule,
	EventContent_BuyFortuneGacha,
	Equipment_BatchGrowth,
	Craft_Shift_Start,
	Craft_Shift_CompleteProcess,
	Craft_Shift_Reward,
	EventContent_EnterStoryStage,
	EventContent_StoryStageResult,
	WorldRaid_EndBattle,
	WorldRaid_Reward,
	Conquest_EnterBattle,
	Conquest_EnterUnExpectBattle,
	Conquest_BattleResult,
	Conquest_UnExpectBattleResult,
	Conquest_UpgradeBase,
	Conquest_ManageBase,
	Conquest_CalculatedReward,
	Conquest_TakeEventBoxObject,
	Conquest_ConquerNormalTile,
	Item_SelectRecruit,
	Adventure_EnterExtraStage,
	Adventure_ExtraStageBattleResult,
	Scenario_EnterMainStage,
	Scenario_MainStageResult,
	Scenario_RetreatMainStage,
	EventContent_DiceRaceRollReward,
	EventContent_DiceRaceLapReward,
	ShiftingCraft_BeginProcess,
	ShiftingCraft_CompleteProcess,
	ShiftingCraft_Reward,
	MiniGame_ShootingBattleResult,
	MiniGame_ShootingSweep,
	EliminateRaid_Failed,
	EliminateRaid_Reward,
	EliminateRaid_SeasonReward,
	EliminateRaid_CreateBattle,
	EliminateRaid_Sweep,
	Item_AutoSynth,
	ContentSweep_MultiSweep,
	Emblem_Acquire,
}
enum ConsumeCondition: int {
	And,
	Or,
}
enum DailyRefillType: int {
	None,
	Default,
	Login,
}
enum ScenarioBGType: int {
	None,
	Image,
	BlurRT,
	Spine,
	Hide,
}
enum ScenarioType: int {
	None,
	Title,
	Place,
}
enum ScenarioTypes: int {
	None,
	Title,
	Place,
}
enum ScenarioCharacterAction: int {
	Idle,
	Shake,
	Greeting,
	FalldownLeft,
	FalldownRight,
	Stiff,
	Hophop,
	Jump,
}
enum ScenarioCharacterBehaviors: int {
	None,
	Appear,
	Disappear,
	AppearToLeft,
	ApperToRight,
	DisappearToLeft,
	DisappearToRight,
	MoveToTarget,
}
enum ScenarioCharacterShapes: int {
	None,
	Signal,
	BlackSilhouette,
	Closeup,
	Highlight,
}
enum ScenarioBGScroll: int {
	None,
	Vertical,
	Horizontal,
}
enum DialogCategory: int {
	Cafe,
	Echelon,
	CharacterSSRNew,
	CharacterGet,
	Birthday,
	Dating,
	Title,
	UILobby,
	UILobbySpecial,
	UIShop,
	UIGacha,
	UIRaidLobby,
	UIWork,
	UITitle,
	UIWeekDungeon,
	UIAcademyLobby,
	UIRaidLobbySeasonOff,
	UIRaidLobbySeasonOn,
	UIWorkAronaSit,
	UIWorkAronaSleep,
	UIWorkAronaWatch,
	UIGuideMission,
	UILobby2,
	UIClanSearchList,
	UIAttendance,
	UIAttendanceEvent01,
	UIEventLobby,
	UIEventShop,
	UIEventBoxGachaShop,
	UIAttendanceEvent02,
	UIAttendanceEvent03,
	UIEventCardShop,
	UISchoolDungeon,
	UIAttendanceEvent,
	UISpecialOperationLobby,
	WeaponGet,
	UIAttendanceEvent04,
	UIEventFortuneGachaShop,
	UIAttendanceEvent05,
	UIAttendanceEvent06,
	UIMission,
	UIEventMission,
	UIAttendanceEvent08,
	UIAttendanceEvent07,
	UIEventMiniGameMission,
	UIAttendanceEvent09,
	UIAttendanceEvent10,
	UIAttendanceEvent11,
	UIWorkPlanaSit,
	UIWorkPlanaUmbrella,
	UIWorkPlanaCabinet,
	UIWorkCoexist_AronaSleepSit,
	UIWorkCoexist_PlanaWatchSky,
	UIWorkCoexist_PlanaSitPeek,
	UIWorkCoexist_AronaSleepPeek,
	UIEventArchive,
	UIAttendanceEvent12,
	UIAttendanceEvent13,
	UIAttendanceEvent14,
	GlobalAttendance01,
	GlobalAttendance02,
	GlobalAttendance03,
	GlobalAttendance04,
	GlobalAttendance05,
}
enum DialogCondition: int {
	Idle,
	Enter,
	Exit,
	Buy,
	SoldOut,
	BoxGachaNormal,
	BoxGachaPrize,
	Prize0,
	Prize1,
	Prize2,
	Prize3,
	Interaction,
	Luck0,
	Luck1,
	Luck2,
	Luck3,
	Luck4,
	Luck5,
	StoryOpen,
	CollectionOpen,
}
enum DialogConditionDetail: int {
	None,
	Day,
	Close,
}
enum DialogType: int {
	Talk,
	Think,
	UITalk,
}
enum Anniversary: int {
	None,
	UserBDay,
	StudentBDay,
}
enum School: int {
	None,
	Hyakkiyako,
	RedWinter,
	Trinity,
	Gehenna,
	Abydos,
	Millennium,
	Arius,
	Shanhaijing,
	Valkyrie,
	WildHunt,
	SRT,
	SCHALE,
	ETC,
}
enum StoryCondition: int {
	Open,
	Locked,
	ComingSoon,
	Hide,
}
enum EmojiEvent: int {
	EnterConver,
	EnterShelter,
	SignalLeader,
	Nice,
	Reload,
	Blind,
	Panic,
	Silence,
	NearyDead,
	Run,
	TerrainAdaptionS,
	TerrainAdaptionA,
	TerrainAdaptionB,
	TerrainAdaptionC,
	TerrainAdaptionD,
	TerrainAdaptionSS,
}
enum ScenarioModeTypes: int {
	None,
	Main,
	Sub,
	Replay,
	Mini,
}
enum ScenarioModeSubTypes: int {
	None,
	Club,
	TSS,
}
enum ScenarioModeReplayTypes: int {
	None,
	Event,
	Favor,
	Work,
	EventMeetup,
}
enum ScenarioEffectDepth: int {
	None,
	AboveBg,
	AboveCharacter,
	AboveAll,
}
enum ScenarioZoomAnchors: int {
	Center,
	LeftTop,
	LeftBottom,
	RightTop,
	RightBottom,
}
enum ScenarioZoomType: int {
	Instant,
	Slide,
}
enum ScenarioContentType: int {
	Prologue,
	WeekDungeon,
	Raid,
	Arena,
	Favor,
	Shop,
	EventContent,
	Craft,
	Chaser,
	EventContentMeetup,
	TimeAttack,
	Mission,
	EventContentPermanentPrologue,
	EventContentReturnSeason,
	MiniEvent,
	EliminateRaid,
}
enum PurchaseCountResetType: int {
	None,
	Day,
	Week,
	Month,
}
enum ShopCategoryType: int {
	General,
	SecretStone,
	Raid,
	Gold,
	Ap,
	PickupGacha,
	NormalGacha,
	PointGacha,
	EventGacha,
	ArenaTicket,
	Arena,
	TutoGacha,
	RecruitSellection,
	EventContent_0,
	EventContent_1,
	EventContent_2,
	EventContent_3,
	EventContent_4,
	_Obsolete,
	LimitedGacha,
	MasterCoin,
	SecretStoneGrowth,
	TicketGacha,
	DirectPayGacha_DontUseGlobal,
	FesGacha,
	TimeAttack,
	Chaser,
	ChaserTicket,
	SchoolDungeonTicket,
	AcademyTicket,
	Special,
	Care,
	BeforehandGacha,
	EliminateRaid,
	GlobalSpecialGacha,
}
enum PurchaseServerTag: int {
	Audit,
	PreAudit,
	Production,
	Hotfix,
	Temp1,
	Temp2,
	Temp3,
	Temp4,
	Temp5,
	Test,
	TestIn,
}
enum PurchaseStatusCode: int {
	None,
	Start,
	PublishSuccess,
	End,
	Error,
	DuplicateOrder,
	Refund,
}
enum StoreType: int {
	None,
	GooglePlay,
	AppStore,
	OneStore,
}
enum PurchasePeriodType: int {
	None,
	Day,
	Week,
	Month,
}
enum PurchaseSourceType: int {
	None,
	Product,
	ProductMonthly,
}
enum ProductCategory: int {
	None,
	Gem,
	Monthly,
	Package,
	GachaDirect,
	GachaDirect_DontUseGlobal,
}
enum ProductDisplayTag: int {
	None,
	New,
	Hot,
	Sale,
}
enum ProductTagType: int {
	Monthly,
	Weekly,
	Biweekly,
}
enum BillingTransactionEndType: int {
	None,
	Success,
	Cancel,
}
enum GachaRewardType: int {
	None,
	Eligma,
	Eleph,
}
enum ShopFreeRecruitType: int {
	None,
	Accumulation,
	Reset,
}
enum GachaDisplayTag: int {
	None,
	Limited,
	TwoStar,
	ThreeStar,
	Free,
	New,
	Fes,
	SelectRecruit,
}
enum SocialMode: int {
	TITLE,
	LOBBY,
	FORMATION,
	STAGE_SELECT,
	BATTLE,
	POPUP,
	BATTLE_RESULT,
	BATTLE_RESULT_VICTORY,
	BATTLE_RESULT_DEFEAT,
	INVALID,
	TACTIC,
	STRATEGY,
	ACCONT,
	CAMPAIGN_STORY,
	CAMPAIGN_STAGE,
	TACTICREADY,
}
enum AccountState: int {
	WaitingSignIn,
	Normal,
	Dormant,
	Comeback,
	Newbie,
}
enum MessagePopupLayout: int {
	TextOnly,
	ImageBig,
	ImageSmall,
}
enum MessagePopupImagePositionType: int {
	ImageFirst,
	TextFirst,
}
enum MessagePopupButtonType: int {
	Accept,
	Cancel,
	Command,
}
enum ToastType: int {
	None,
	Tactic_Left,
	Tactic_Right,
	Social_Center,
	Social_Mission,
	Social_Right,
	Notice_Center,
}
enum StrategyAIType: int {
	None,
	Guard,
	Pursuit,
}
enum StageDifficulty: int {
	None,
	Normal,
	Hard,
	VeryHard,
}
enum HexaUnitGrade: int {
	Grade1,
	Grade2,
	Grade3,
	Boss,
}
enum TacticEnvironment: int {
	None,
	WarFog,
}
enum StrategyObjectType: int {
	None,
	Start,
	Heal,
	Skill,
	StatBuff,
	Parcel,
	ParcelOneTimePerAccount,
	Portal,
	PortalOneWayEnterance,
	PortalOneWayExit,
	Observatory,
	Beacon,
	BeaconOneTime,
	EnemySpawn,
	SwitchToggle,
	SwitchMovableWhenToggleOff,
	SwitchMovableWhenToggleOn,
	FixedStart01,
	FixedStart02,
	FixedStart03,
	FixedStart04,
}
enum StrategyEnvironment: int {
	None,
	MapFog,
}
enum Tag: int {
	Furniture,
	MovieMania,
	Scientific,
	Military,
	Machine,
	Gamer,
	Cook,
	Farmer,
	Sociable,
	Officer,
	Eerie,
	Intellectual,
	Healthy,
	Gourmet,
	TreasureHunter,
	CraftItem,
	CDItem,
	ExpItem,
	SecretStone,
	BookItem,
	FavorItem,
	MaterialItem,
	Item,
	CraftCommitment,
	ExpendableItem,
	Equipment,
	EnemyLarge,
	Decagram,
	EnemySmall,
	EnemyMedium,
	EnemyXLarge,
	Gehenna,
	Millennium,
	Valkyrie,
	Hyakkiyako,
	RedWinter,
	Shanhaijing,
	Abydos,
	Trinity,
	Hanger,
	StudyRoom,
	ClassRoom,
	Library,
	Lobby,
	ShootingRange,
	Office,
	SchaleResidence,
	SchaleOffice,
	Restaurant,
	Laboratory,
	AVRoom,
	ArcadeCenter,
	Gym,
	Garden,
	Convenience,
	Soldiery,
	Lounge,
	SchoolBuilding,
	Club,
	Campus,
	SchoolYard,
	Plaza,
	StudentCouncilOffice,
	ClosedBuilding,
	Annex,
	Pool,
	AllySmall,
	AllyMedium,
	AllyLarge,
	AllyXLarge,
	Dessert,
	Sports,
	Bedding,
	Curios,
	Electronic,
	Toy,
	Reservation,
	Household,
	Horticulture,
	Fashion,
	Functional,
	Delicious,
	Freakish,
	MomoFriends,
	Music,
	LoveStory,
	Game,
	Girlish,
	Beauty,
	Army,
	Humanities,
	Observational,
	Jellyz,
	Detective,
	Roman,
	CuriousFellow,
	Mystery,
	Doll,
	Movie,
	Art,
	PureLiterature,
	Food,
	Smart,
	BigMeal,
	Simplicity,
	Specialized,
	Books,
	Cosmetics,
	Gift1,
	Gift2,
	F_Aru,
	F_Eimi,
	F_Haruna,
	F_Hihumi,
	F_Hina,
	F_Hoshino,
	F_Iori,
	F_Maki,
	F_Neru,
	F_Izumi,
	F_Shiroko,
	F_Shun,
	F_Sumire,
	F_Tsurugi,
	F_Akane,
	F_Chise,
	F_Akari,
	F_Hasumi,
	F_Nonomi,
	F_Kayoko,
	F_Mutsuki,
	F_Zunko,
	F_Serika,
	F_Tsubaki,
	F_Yuuka,
	F_Haruka,
	F_Asuna,
	F_Kotori,
	F_Suzumi,
	F_Pina,
	F_Aris,
	F_Azusa,
	F_Cherino,
	TagName0004,
	TagName0005,
	F_Koharu,
	F_Hanako,
	F_Midori,
	F_Momoi,
	F_Hibiki,
	F_Karin,
	F_Saya,
	F_Mashiro,
	F_Airi,
	F_Fuuka,
	F_Hanae,
	F_Hare,
	F_Utaha,
	F_Ayane,
	F_Chinatsu,
	F_Kotama,
	F_Juri,
	F_Serina,
	F_Shimiko,
	F_Yoshimi,
	TagName0009,
	F_Shizuko,
	F_Izuna,
	F_Nodoka,
	F_Yuzu,
	Shield,
	Helmet,
	RedHelmet,
	Helicopter,
	RangeAttack,
	MeleeAttack,
	Sweeper,
	Blackmarket,
	Yoheki,
	Kaiserpmc,
	Crusader,
	Goliath,
	Drone,
	Piece,
	ChampionHeavyArmor,
	Sukeban,
	Arius,
	EnemyKotori,
	EnemyYuuka,
	KaiserpmcHeavyArmor,
	BlackmarketHeavyArmor,
	YohekiHeavyArmor,
	SweeperBlack,
	SweeperYellow,
	GasMaskLightArmor,
	GehennaFuuki,
	ChampionAutomata,
	YohekiAutomata,
	Automata,
	EnemyIori,
	EnemyAkari,
	NewAutomata,
	NewAutomataBlack,
	NewAutomataYellow,
	Hat,
	Gloves,
	Shoes,
	Bag,
	Badge,
	Hairpin,
	Charm,
	Watch,
	Necklace,
	Cafe,
	GameCenter,
	ChocolateCafe,
	Main,
	Support,
	Explosion,
	Pierce,
	Mystic,
	LightArmor,
	HeavyArmor,
	Unarmed,
	Cover,
	Uncover,
	AR,
	SR,
	DSG,
	SMG,
	MG,
	HG,
	GL,
	SG,
	MT,
	RG,
	Front,
	Middle,
	Back,
	StreetBattle_Over_A,
	OutdoorBattle_Over_A,
	IndoorBattle_Over_A,
	StreetBattle_Under_B,
	OutdoorBattle_Under_B,
	IndoorBattle_Under_B,
	Kaitenranger,
	Transport,
	Itcenter,
	Powerplant,
	SukebanSwim_SMG,
	SukebanSwim_MG,
	SukebanSwim_SR,
	SukebanSwim_Champion,
	Token_S6,
	Swimsuit,
	WaterPlay,
	F_Hihumi_Swimsuit,
	F_Azusa_Swimsuit,
	F_Tsurugi_Swimsuit,
	F_Mashiro_Swimsuit,
	F_Hina_swimsuit,
	F_Iori_swimsuit,
	F_Izumi_swimsuit,
	F_Shiroko_RidingSuit,
	Church,
	Stronghold,
	Gallery,
	MusicRoom,
	Emotional,
	F_Shun_Kid,
	F_Kirino_default,
	F_Saya_Casual,
	F_Neru_BunnyGirl,
	F_Karin_BunnyGirl,
	F_Asuna_BunnyGirl,
	DecagrammatonSPO,
	Justice,
	F_Natsu,
	F_Miku,
	F_Ako,
	F_Mari,
	F_Chinatsu_Onsen,
	F_Tomoe,
	F_Cherino_Onsen,
	F_Nodoka_Onsen,
	F_Aru_Newyear,
	F_Mutsuki_Newyear,
	F_Serika_Newyear,
	Boss,
	F_Wakamo,
	F_Sena,
	F_Chihiro,
	F_Fubuki,
	F_Mimori,
	SkillBookUltimatePieace,
	MaterialItemN,
	MaterialItemR,
	MaterialItemSR,
	MaterialItemSSR,
	CDItemN,
	CDItemR,
	CDItemSR,
	CDItemSSR,
	BookItemN,
	BookItemR,
	BookItemSR,
	BookItemSSR,
	ShiftingCraftMaterial_Furniture,
	TrophyBronzeGroup001,
	TrophySilverGroup001,
	TrophyGoldGroup001,
	TrophyPlatinumGroup001,
	ShiftingCraftCategory_CommonMaterial,
	ShiftingCraftCategory_CDItem,
	ShiftingCraftCategory_BookItem,
	ShiftingCraftCategory_Furniture,
	Token_S14,
	F_Ui,
	F_Hinata,
	F_Marina,
	SRT,
	F_Miyako,
	F_Miyu,
	F_Saki,
	Ninja,
	F_Tsukuyo,
	F_Michiru,
	F_Kaede,
	F_Iroha,
	F_Misaki,
	F_Atsuko,
	F_Hiyori,
	F_Wakamo_Swimsuit,
	F_Nonomi_Swimsuit,
	F_Ayane_Swimsuit,
	CraftMaterial_SecretStone,
	CraftMaterial_FurnitureN,
	CraftMaterial_FurnitureR,
	CraftMaterial_FurnitureSR,
	CraftMaterial_FurnitureSSR,
	ExpEquip,
	WeaponExpEquip,
	TheSeminar,
	Fuuki,
	Kohshinjo68,
	GameDev,
	Countermeasure,
	CleanNClearing,
	GourmetClub,
	F_Hoshino_Swimsuit,
	F_Izuna_Swimsuit,
	F_Chise_Swimsuit,
	F_Shizuko_Swimsuit,
	F_Saori,
	CraftMaterial_FavorItemSR,
	CraftMaterial_FavorItemSSR,
	ShiftingCraftCategory_FavorItem,
	F_Akari2,
	F_Aris2,
	F_Asuna2,
	F_Asuna_BunnyGirl2,
	F_Atsuko2,
	F_Ayane_Swimsuit2,
	F_Azusa_Swimsuit2,
	F_Cherino_Onsen2,
	F_Chinatsu2,
	F_Hare2,
	F_Haruna2,
	F_Hihumi2,
	F_Hihumi_Swimsuit2,
	F_Hina2,
	F_Hina_swimsuit2,
	F_Hinata2,
	F_Hoshino2,
	F_Hoshino_Swimsuit2,
	F_Juri2,
	F_Karin2,
	F_Karin_BunnyGirl2,
	F_Kirino_default2,
	F_Kotori2,
	F_Mashiro2,
	F_Mashiro_Swimsuit2,
	F_Midori2,
	F_Misaki2,
	F_Miyako2,
	F_Miyu2,
	F_Momoi2,
	F_Neru_BunnyGirl2,
	F_Pina2,
	F_Saya_Casual2,
	F_Sena2,
	F_Serina2,
	F_Suzumi2,
	F_Tomoe2,
	F_Tsubaki2,
	F_Tsurugi2,
	F_Tsurugi_Swimsuit2,
	F_Ui2,
	F_Utaha2,
	F_Wakamo2,
	F_Wakamo_Swimsuit2,
	F_Yuuka2,
	CraftMaterial_Furniture,
	TrophyBronzeGroup002,
	TrophySilverGroup002,
	TrophyGoldGroup002,
	TrophyPlatinumGroup002,
	F_Kazusa,
	F_Kokona,
	F_Moe,
	F_Kokona2,
	AtsukoOriginal,
	FromAriusSquad,
	EventChallenge_ExplosionTarget,
	F_Utaha_Cheerleader,
	F_Hibiki_Cheerleader,
	F_Akane_BunnyGirl,
	F_Noa,
	F_Utaha_Cheerleader2,
	F_Hibiki_Cheerleader2,
	F_Akane_BunnyGirl2,
	F_Yuuka_Track,
	F_Mari_Track,
	F_Hasumi_Track,
	F_Himari,
	F_Mari_Track2,
	F_Hasumi_Track2,
	F_Himari2,
	Veritas,
	SPTF,
	Engineer,
	F_Shigure,
	F_Serina_Holiday,
	F_Hanae_Holiday,
	F_Shigure2,
	F_Serina_Holiday2,
	F_Hanae_Holiday2,
	Holiday,
	Perorozilla_MiddleSize,
	Perorozilla_SmallSize,
	F_Haruna_Newyear,
	F_Haruna_Newyear2,
	F_Mine,
	F_Mine2,
	F_Junko_Newyear,
	F_Junko_Newyear2,
	F_Fuuka_Newyear,
	F_Fuuka_Newyear2,
	F_Megu,
	F_Megu2,
	F_Sakurako,
	F_Sakurako2,
	F_Kanna,
	F_Kanna2,
	F_Mika,
	F_Mika2,
	UnNamedGuardianMiddle,
	F_Toki,
	F_Toki2,
	F_Koyuki,
	F_Koyuki2,
	F_Nagisa,
	F_Nagisa2,
	F_Kayoko_Newyear,
	F_Kayoko_Newyear2,
	F_Haruka_Newyear,
	F_Haruka_Newyear2,
	F_Kaho,
	F_Kaho2,
	DUArea,
	F_Aris_Maid,
	F_Aris_Maid2,
	F_Yuzu_Maid,
	F_Yuzu_Maid2,
	F_Toki_BunnyGirl,
	F_Toki_BunnyGirl2,
	F_Reisa,
	F_Reisa2,
	Genryumon,
	BlackTortoisePromenade,
	LaborParty,
	F_Rumi,
	F_Rumi2,
	F_Mina,
	F_Mina2,
	F_Minori,
	F_Minori2,
	ValkyrieCD,
	ValkyrieBook,
	F_Miyako_Swimsuit,
	F_Miyako_Swimsuit2,
	F_Saki_Swimsuit,
	F_Saki_Swimsuit2,
	F_Miyu_Swimsuit,
	F_Miyu_Swimsuit2,
	F_Shiroko_Swimsuit,
	F_Shiroko_Swimsuit2,
	EN0005_CenterPipe,
	TagName0496,
	TagName0497,
	TagName0498,
	TagName0499,
	TagName0500,
	TagName0501,
	TagName0502,
	TagName0503,
	TagName0504,
	TagName0505,
	TagName0506,
	TagName0507,
	TagName0508,
	TagName0509,
	TagName0510,
	TagName0511,
	TagName0512,
	TagName0513,
	TagName0514,
	TagName0515,
	TagName0516,
	TagName0517,
	TagName0518,
	TagName0519,
	TagName0520,
	TagName0521,
	TagName0522,
	TagName0523,
	TagName0524,
	TagName0525,
	TagName0526,
	TagName0527,
	TagName0528,
	TagName0529,
	TagName0530,
	TagName0531,
	TagName0532,
	TagName0533,
	TagName0534,
	TagName0535,
	TagName0536,
	TagName0537,
	TagName0538,
	TagName0539,
	TagName0540,
	TagName0541,
	TagName0542,
	TagName0543,
	TagName0544,
	TagName0545,
	TagName0546,
	TagName0547,
	TagName0548,
	TagName0549,
	TagName0550,
	TagName0551,
	TagName0552,
	TagName0553,
	TagName0554,
	TagName0555,
	TagName0556,
	TagName0557,
	TagName0558,
	TagName0559,
	TagName0560,
	TagName0561,
	TagName0562,
	TagName0563,
	TagName0564,
	TagName0565,
	TagName0566,
	TagName0567,
	TagName0568,
	TagName0569,
	TagName0570,
	TagName0571,
	TagName0572,
	TagName0573,
	TagName0574,
	TagName0575,
	TagName0576,
	TagName0577,
	TagName0578,
	TagName0579,
	TagName0580,
	TagName0581,
	TagName0582,
	TagName0583,
	TagName0584,
	TagName0585,
	TagName0586,
	TagName0587,
	TagName0588,
	TagName0589,
	TagName0590,
	TagName0591,
	TagName0592,
	TagName0593,
	TagName0594,
	TagName0595,
	TagName0596,
	TagName0597,
	TagName0598,
	TagName0599,
	TagName0600,
	TagName0601,
	TagName0602,
	TagName0603,
	TagName0604,
	TagName0605,
	TagName0606,
	TagName0607,
	TagName0608,
	TagName0609,
	TagName0610,
	TagName0611,
	TagName0612,
	TagName0613,
	TagName0614,
	TagName0615,
	TagName0616,
	TagName0617,
	TagName0618,
	TagName0619,
	TagName0620,
	TagName0621,
	TagName0622,
	TagName0623,
	TagName0624,
	TagName0625,
	TagName0626,
	TagName0627,
	TagName0628,
	TagName0629,
	TagName0630,
	TagName0631,
	TagName0632,
	TagName0633,
	TagName0634,
	TagName0635,
	TagName0636,
	TagName0637,
	TagName0638,
	TagName0639,
	TagName0640,
	TagName0641,
	TagName0642,
	TagName0643,
	TagName0644,
	TagName0645,
	TagName0646,
	TagName0647,
	TagName0648,
	TagName0649,
	TagName0650,
	TagName0651,
	TagName0652,
	TagName0653,
	TagName0654,
	TagName0655,
	TagName0656,
	TagName0657,
	TagName0658,
	TagName0659,
	TagName0660,
	TagName0661,
	TagName0662,
	TagName0663,
	TagName0664,
	TagName0665,
	TagName0666,
	TagName0667,
	TagName0668,
	TagName0669,
	TagName0670,
	TagName0671,
	TagName0672,
	TagName0673,
	TagName0674,
	TagName0675,
	TagName0676,
	TagName0677,
	TagName0678,
	TagName0679,
	TagName0680,
	TagName0681,
	TagName0682,
	TagName0683,
	TagName0684,
	TagName0685,
	TagName0686,
	TagName0687,
	TagName0688,
	TagName0689,
	TagName0690,
	TagName0691,
	TagName0692,
	TagName0693,
	TagName0694,
	TagName0695,
	TagName0696,
	TagName0697,
	TagName0698,
	TagName0699,
	TagName0700,
	TagName0701,
	TagName0702,
	TagName0703,
	TagName0704,
	TagName0705,
	TagName0706,
	TagName0707,
	TagName0708,
	TagName0709,
	TagName0710,
	TagName0711,
	TagName0712,
	TagName0713,
	TagName0714,
	TagName0715,
	TagName0716,
	TagName0717,
	TagName0718,
	TagName0719,
	TagName0720,
	TagName0721,
	TagName0722,
	TagName0723,
	TagName0724,
	TagName0725,
	TagName0726,
	TagName0727,
	TagName0728,
	TagName0729,
	TagName0730,
	TagName0731,
	TagName0732,
	TagName0733,
	TagName0734,
	TagName0735,
	TagName0736,
	TagName0737,
	TagName0738,
	TagName0739,
	TagName0740,
	TagName0741,
	TagName0742,
	TagName0743,
	TagName0744,
	TagName0745,
	TagName0746,
	TagName0747,
	TagName0748,
	TagName0749,
	TagName0750,
	TagName0751,
	TagName0752,
	TagName0753,
	TagName0754,
	TagName0755,
	TagName0756,
	TagName0757,
	TagName0758,
	TagName0759,
	TagName0760,
	TagName0761,
	TagName0762,
	TagName0763,
	TagName0764,
	TagName0765,
	TagName0766,
	TagName0767,
	TagName0768,
	TagName0769,
	TagName0770,
	TagName0771,
	TagName0772,
	TagName0773,
	TagName0774,
	TagName0775,
	TagName0776,
	TagName0777,
	TagName0778,
	TagName0779,
	TagName0780,
	TagName0781,
	TagName0782,
	TagName0783,
	TagName0784,
	TagName0785,
	TagName0786,
	TagName0787,
	TagName0788,
	TagName0789,
	TagName0790,
	TagName0791,
	TagName0792,
	TagName0793,
	TagName0794,
	TagName0795,
	TagName0796,
	TagName0797,
	TagName0798,
	TagName0799,
	TagName0800,
	TagName0801,
	TagName0802,
	TagName0803,
	TagName0804,
	TagName0805,
	TagName0806,
	TagName0807,
	TagName0808,
	TagName0809,
	TagName0810,
	TagName0811,
	TagName0812,
	TagName0813,
	TagName0814,
	TagName0815,
	TagName0816,
	TagName0817,
	TagName0818,
	TagName0819,
	TagName0820,
	TagName0821,
	TagName0822,
	TagName0823,
	TagName0824,
	TagName0825,
	TagName0826,
	TagName0827,
	TagName0828,
	TagName0829,
	TagName0830,
	TagName0831,
	TagName0832,
	TagName0833,
	TagName0834,
	TagName0835,
	TagName0836,
	TagName0837,
	TagName0838,
	TagName0839,
	TagName0840,
	TagName0841,
	TagName0842,
	TagName0843,
	TagName0844,
	TagName0845,
	TagName0846,
	TagName0847,
	TagName0848,
	TagName0849,
	TagName0850,
	TagName0851,
	TagName0852,
	TagName0853,
	TagName0854,
	TagName0855,
	TagName0856,
	TagName0857,
	TagName0858,
	TagName0859,
	TagName0860,
	TagName0861,
	TagName0862,
	TagName0863,
	TagName0864,
	TagName0865,
	TagName0866,
	TagName0867,
	TagName0868,
	TagName0869,
	TagName0870,
	TagName0871,
	TagName0872,
	TagName0873,
	TagName0874,
	TagName0875,
	TagName0876,
	TagName0877,
	TagName0878,
	TagName0879,
	TagName0880,
	TagName0881,
	TagName0882,
	TagName0883,
	TagName0884,
	TagName0885,
	TagName0886,
	TagName0887,
	TagName0888,
	TagName0889,
	TagName0890,
	TagName0891,
	TagName0892,
	TagName0893,
	TagName0894,
	TagName0895,
	TagName0896,
	TagName0897,
	TagName0898,
	TagName0899,
	TagName0900,
	TagName0901,
	TagName0902,
	TagName0903,
	TagName0904,
	TagName0905,
	TagName0906,
	TagName0907,
	TagName0908,
	TagName0909,
	TagName0910,
	TagName0911,
	TagName0912,
	TagName0913,
	TagName0914,
	TagName0915,
	TagName0916,
	TagName0917,
	TagName0918,
	TagName0919,
	TagName0920,
	TagName0921,
	TagName0922,
	TagName0923,
	TagName0924,
	TagName0925,
	TagName0926,
	TagName0927,
	TagName0928,
	TagName0929,
	TagName0930,
	TagName0931,
	TagName0932,
	TagName0933,
	TagName0934,
	TagName0935,
	TagName0936,
	TagName0937,
	TagName0938,
	TagName0939,
	TagName0940,
	TagName0941,
	TagName0942,
	TagName0943,
	TagName0944,
	TagName0945,
	TagName0946,
	TagName0947,
	TagName0948,
	TagName0949,
	TagName0950,
	TagName0951,
	TagName0952,
	TagName0953,
	TagName0954,
	TagName0955,
	TagName0956,
	TagName0957,
	TagName0958,
	TagName0959,
	TagName0960,
	TagName0961,
	TagName0962,
	TagName0963,
	TagName0964,
	TagName0965,
	TagName0966,
	TagName0967,
	TagName0968,
	TagName0969,
	TagName0970,
	TagName0971,
	TagName0972,
	TagName0973,
	TagName0974,
	TagName0975,
	TagName0976,
	TagName0977,
	TagName0978,
	TagName0979,
	TagName0980,
	TagName0981,
	TagName0982,
	TagName0983,
	TagName0984,
	TagName0985,
	TagName0986,
	TagName0987,
	TagName0988,
	TagName0989,
	TagName0990,
	TagName0991,
	TagName0992,
	TagName0993,
	TagName0994,
	TagName0995,
	TagName0996,
	TagName0997,
	TagName0998,
	TagName0999,
	TagName1000,
	TagName1001,
	TagName1002,
	TagName1003,
	TagName1004,
	TagName1005,
	TagName1006,
	TagName1007,
	TagName1008,
	TagName1009,
	TagName1010,
	TagName1011,
	TagName1012,
	TagName1013,
	TagName1014,
	TagName1015,
	TagName1016,
	TagName1017,
	TagName1018,
	TagName1019,
	TagName1020,
	TagName1021,
	TagName1022,
	TagName1023,
	TagName1024,
	TagName1025,
	TagName1026,
	TagName1027,
	TagName1028,
	TagName1029,
	TagName1030,
	TagName1031,
	TagName1032,
	TagName1033,
	TagName1034,
	TagName1035,
	TagName1036,
	TagName1037,
	TagName1038,
	TagName1039,
	TagName1040,
	TagName1041,
	TagName1042,
	TagName1043,
	TagName1044,
	TagName1045,
	TagName1046,
	TagName1047,
	TagName1048,
	TagName1049,
	TagName1050,
	TagName1051,
	TagName1052,
	TagName1053,
	TagName1054,
	TagName1055,
	TagName1056,
	TagName1057,
	TagName1058,
	TagName1059,
	TagName1060,
	TagName1061,
	TagName1062,
	TagName1063,
	TagName1064,
	TagName1065,
	TagName1066,
	TagName1067,
	TagName1068,
	TagName1069,
	TagName1070,
	TagName1071,
	TagName1072,
	TagName1073,
	TagName1074,
	TagName1075,
	TagName1076,
	TagName1077,
	TagName1078,
	TagName1079,
	TagName1080,
	TagName1081,
	TagName1082,
	TagName1083,
	TagName1084,
	TagName1085,
	TagName1086,
	TagName1087,
	TagName1088,
	TagName1089,
	TagName1090,
	TagName1091,
	TagName1092,
	TagName1093,
	TagName1094,
	TagName1095,
	TagName1096,
	TagName1097,
	TagName1098,
	TagName1099,
	TagName1100,
	TagName1101,
	TagName1102,
	TagName1103,
	TagName1104,
	TagName1105,
	TagName1106,
	TagName1107,
	TagName1108,
	TagName1109,
	TagName1110,
	TagName1111,
	TagName1112,
	TagName1113,
	TagName1114,
	TagName1115,
	TagName1116,
	TagName1117,
	TagName1118,
	TagName1119,
	TagName1120,
	TagName1121,
	TagName1122,
	TagName1123,
	TagName1124,
	TagName1125,
	TagName1126,
	TagName1127,
	TagName1128,
	TagName1129,
	TagName1130,
	TagName1131,
	TagName1132,
	TagName1133,
	TagName1134,
	TagName1135,
	TagName1136,
	TagName1137,
	TagName1138,
	TagName1139,
	TagName1140,
	TagName1141,
	TagName1142,
	TagName1143,
	TagName1144,
	TagName1145,
	TagName1146,
	TagName1147,
	TagName1148,
	TagName1149,
	TagName1150,
	TagName1151,
	TagName1152,
	TagName1153,
	TagName1154,
	TagName1155,
	TagName1156,
	TagName1157,
	TagName1158,
	TagName1159,
	TagName1160,
	TagName1161,
	TagName1162,
	TagName1163,
	TagName1164,
	TagName1165,
	TagName1166,
	TagName1167,
	TagName1168,
	TagName1169,
	TagName1170,
	TagName1171,
	TagName1172,
	TagName1173,
	TagName1174,
	TagName1175,
	TagName1176,
	TagName1177,
	TagName1178,
	TagName1179,
	TagName1180,
	TagName1181,
	TagName1182,
	TagName1183,
	TagName1184,
	TagName1185,
	TagName1186,
	TagName1187,
	TagName1188,
	TagName1189,
	TagName1190,
	TagName1191,
	TagName1192,
	TagName1193,
	TagName1194,
	TagName1195,
	TagName1196,
	TagName1197,
	TagName1198,
	TagName1199,
	TagName1200,
	TagName1201,
	TagName1202,
	TagName1203,
	TagName1204,
	TagName1205,
	TagName1206,
	TagName1207,
	TagName1208,
	TagName1209,
	TagName1210,
	TagName1211,
	TagName1212,
	TagName1213,
	TagName1214,
	TagName1215,
	TagName1216,
	TagName1217,
	TagName1218,
	TagName1219,
	TagName1220,
	TagName1221,
	TagName1222,
	TagName1223,
	TagName1224,
	TagName1225,
	TagName1226,
	TagName1227,
	TagName1228,
	TagName1229,
	TagName1230,
	TagName1231,
	TagName1232,
	TagName1233,
	TagName1234,
	TagName1235,
	TagName1236,
	TagName1237,
	TagName1238,
	TagName1239,
	TagName1240,
	TagName1241,
	TagName1242,
	TagName1243,
	TagName1244,
	TagName1245,
	TagName1246,
	TagName1247,
	TagName1248,
	TagName1249,
	TagName1250,
	TagName1251,
	TagName1252,
	TagName1253,
	TagName1254,
	TagName1255,
	TagName1256,
	TagName1257,
	TagName1258,
	TagName1259,
	TagName1260,
	TagName1261,
	TagName1262,
	TagName1263,
	TagName1264,
	TagName1265,
	TagName1266,
	TagName1267,
	TagName1268,
	TagName1269,
	TagName1270,
	TagName1271,
	TagName1272,
	TagName1273,
	TagName1274,
	TagName1275,
	TagName1276,
	TagName1277,
	TagName1278,
	TagName1279,
	TagName1280,
	TagName1281,
	TagName1282,
	TagName1283,
	TagName1284,
	TagName1285,
	TagName1286,
	TagName1287,
	TagName1288,
	TagName1289,
	TagName1290,
	TagName1291,
	TagName1292,
	TagName1293,
	TagName1294,
	TagName1295,
	TagName1296,
	TagName1297,
	TagName1298,
	TagName1299,
	TagName1300,
	TagName1301,
	TagName1302,
	TagName1303,
	TagName1304,
	TagName1305,
	TagName1306,
	TagName1307,
	TagName1308,
	TagName1309,
	TagName1310,
	TagName1311,
	TagName1312,
	TagName1313,
	TagName1314,
	TagName1315,
	TagName1316,
	TagName1317,
	TagName1318,
	TagName1319,
	TagName1320,
	TagName1321,
	TagName1322,
	TagName1323,
	TagName1324,
	TagName1325,
	TagName1326,
	TagName1327,
	TagName1328,
	TagName1329,
	TagName1330,
	TagName1331,
	TagName1332,
	TagName1333,
	TagName1334,
	TagName1335,
	TagName1336,
	TagName1337,
	TagName1338,
	TagName1339,
	TagName1340,
	TagName1341,
	TagName1342,
	TagName1343,
	TagName1344,
	TagName1345,
	TagName1346,
	TagName1347,
	TagName1348,
	TagName1349,
	TagName1350,
	TagName1351,
	TagName1352,
	TagName1353,
	TagName1354,
	TagName1355,
	TagName1356,
	TagName1357,
	TagName1358,
	TagName1359,
	TagName1360,
	TagName1361,
	TagName1362,
	TagName1363,
	TagName1364,
	TagName1365,
	TagName1366,
	TagName1367,
	TagName1368,
	TagName1369,
	TagName1370,
	TagName1371,
	TagName1372,
	TagName1373,
	TagName1374,
	TagName1375,
	TagName1376,
	TagName1377,
	TagName1378,
	TagName1379,
	TagName1380,
	TagName1381,
	TagName1382,
	TagName1383,
	TagName1384,
	TagName1385,
	TagName1386,
	TagName1387,
	TagName1388,
	TagName1389,
	TagName1390,
	TagName1391,
	TagName1392,
	TagName1393,
	TagName1394,
	TagName1395,
	TagName1396,
	TagName1397,
	TagName1398,
	TagName1399,
	TagName1400,
	TagName1401,
	TagName1402,
	TagName1403,
	TagName1404,
	TagName1405,
	TagName1406,
	TagName1407,
	TagName1408,
	TagName1409,
	TagName1410,
	TagName1411,
	TagName1412,
	TagName1413,
	TagName1414,
	TagName1415,
	TagName1416,
	TagName1417,
	TagName1418,
	TagName1419,
	TagName1420,
	TagName1421,
	TagName1422,
	TagName1423,
	TagName1424,
	TagName1425,
	TagName1426,
	TagName1427,
	TagName1428,
	TagName1429,
	TagName1430,
	TagName1431,
	TagName1432,
	TagName1433,
	TagName1434,
	TagName1435,
	TagName1436,
	TagName1437,
	TagName1438,
	TagName1439,
	TagName1440,
	TagName1441,
	TagName1442,
	TagName1443,
	TagName1444,
	TagName1445,
	TagName1446,
	TagName1447,
	TagName1448,
	TagName1449,
	TagName1450,
	TagName1451,
	TagName1452,
	TagName1453,
	TagName1454,
	TagName1455,
	TagName1456,
	TagName1457,
	TagName1458,
	TagName1459,
	TagName1460,
	TagName1461,
	TagName1462,
	TagName1463,
	TagName1464,
	TagName1465,
	TagName1466,
	TagName1467,
	TagName1468,
	TagName1469,
	TagName1470,
	TagName1471,
	TagName1472,
	TagName1473,
	TagName1474,
	TagName1475,
	TagName1476,
	TagName1477,
	TagName1478,
	TagName1479,
	TagName1480,
	TagName1481,
	TagName1482,
	TagName1483,
	TagName1484,
	TagName1485,
	TagName1486,
	TagName1487,
	TagName1488,
	TagName1489,
	TagName1490,
	TagName1491,
	TagName1492,
	TagName1493,
	TagName1494,
	TagName1495,
	TagName1496,
	TagName1497,
	TagName1498,
	TagName1499,
	TagName1500,
	TagName1501,
	TagName1502,
	TagName1503,
	TagName1504,
	TagName1505,
	TagName1506,
	TagName1507,
	TagName1508,
	TagName1509,
	TagName1510,
	TagName1511,
	TagName1512,
	TagName1513,
	TagName1514,
	TagName1515,
	TagName1516,
	TagName1517,
	TagName1518,
	TagName1519,
	TagName1520,
	TagName1521,
	TagName1522,
	TagName1523,
	TagName1524,
	TagName1525,
	TagName1526,
	TagName1527,
	TagName1528,
	TagName1529,
	TagName1530,
	TagName1531,
	TagName1532,
	TagName1533,
	TagName1534,
	TagName1535,
	TagName1536,
	TagName1537,
	TagName1538,
	TagName1539,
	TagName1540,
	TagName1541,
	TagName1542,
	TagName1543,
	TagName1544,
	TagName1545,
	TagName1546,
	TagName1547,
	TagName1548,
	TagName1549,
	TagName1550,
	TagName1551,
	TagName1552,
	TagName1553,
	TagName1554,
	TagName1555,
	TagName1556,
	TagName1557,
	TagName1558,
	TagName1559,
	TagName1560,
	TagName1561,
	TagName1562,
	TagName1563,
	TagName1564,
	TagName1565,
	TagName1566,
	TagName1567,
	TagName1568,
	TagName1569,
	TagName1570,
	TagName1571,
	TagName1572,
	TagName1573,
	TagName1574,
	TagName1575,
	TagName1576,
	TagName1577,
	TagName1578,
	TagName1579,
	TagName1580,
	TagName1581,
	TagName1582,
	TagName1583,
	TagName1584,
	TagName1585,
	TagName1586,
	TagName1587,
	TagName1588,
	TagName1589,
	TagName1590,
	TagName1591,
	TagName1592,
	TagName1593,
	TagName1594,
	TagName1595,
	TagName1596,
	TagName1597,
	TagName1598,
	TagName1599,
	TagName1600,
	TagName1601,
	TagName1602,
	TagName1603,
	TagName1604,
	TagName1605,
	TagName1606,
	TagName1607,
	TagName1608,
	TagName1609,
	TagName1610,
	TagName1611,
	TagName1612,
	TagName1613,
	TagName1614,
	TagName1615,
	TagName1616,
	TagName1617,
	TagName1618,
	TagName1619,
	TagName1620,
	TagName1621,
	TagName1622,
	TagName1623,
	TagName1624,
	TagName1625,
	TagName1626,
	TagName1627,
	TagName1628,
	TagName1629,
	TagName1630,
	TagName1631,
	TagName1632,
	TagName1633,
	TagName1634,
	TagName1635,
	TagName1636,
	TagName1637,
	TagName1638,
	TagName1639,
	TagName1640,
	TagName1641,
	TagName1642,
	TagName1643,
	TagName1644,
	TagName1645,
	TagName1646,
	TagName1647,
	TagName1648,
	TagName1649,
	TagName1650,
	TagName1651,
	TagName1652,
	TagName1653,
	TagName1654,
	TagName1655,
	TagName1656,
	TagName1657,
	TagName1658,
	TagName1659,
	TagName1660,
	TagName1661,
	TagName1662,
	TagName1663,
	TagName1664,
	TagName1665,
	TagName1666,
	TagName1667,
	TagName1668,
	TagName1669,
	TagName1670,
	TagName1671,
	TagName1672,
	TagName1673,
	TagName1674,
	TagName1675,
	TagName1676,
	TagName1677,
	TagName1678,
	TagName1679,
	TagName1680,
	TagName1681,
	TagName1682,
	TagName1683,
	TagName1684,
	TagName1685,
	TagName1686,
	TagName1687,
	TagName1688,
	TagName1689,
	TagName1690,
	TagName1691,
	TagName1692,
	TagName1693,
	TagName1694,
	TagName1695,
	TagName1696,
	TagName1697,
	TagName1698,
	TagName1699,
	TagName1700,
	TagName1701,
	TagName1702,
	TagName1703,
	TagName1704,
	TagName1705,
	TagName1706,
	TagName1707,
	TagName1708,
	TagName1709,
	TagName1710,
	TagName1711,
	TagName1712,
	TagName1713,
	TagName1714,
	TagName1715,
	TagName1716,
	TagName1717,
	TagName1718,
	TagName1719,
	TagName1720,
	TagName1721,
	TagName1722,
	TagName1723,
	TagName1724,
	TagName1725,
	TagName1726,
	TagName1727,
	TagName1728,
	TagName1729,
	TagName1730,
	TagName1731,
	TagName1732,
	TagName1733,
	TagName1734,
	TagName1735,
	TagName1736,
	TagName1737,
	TagName1738,
	TagName1739,
	TagName1740,
	TagName1741,
	TagName1742,
	TagName1743,
	TagName1744,
	TagName1745,
	TagName1746,
	TagName1747,
	TagName1748,
	TagName1749,
	TagName1750,
	TagName1751,
	TagName1752,
	TagName1753,
	TagName1754,
	TagName1755,
	TagName1756,
	TagName1757,
	TagName1758,
	TagName1759,
	TagName1760,
	TagName1761,
	TagName1762,
	TagName1763,
	TagName1764,
	TagName1765,
	TagName1766,
	TagName1767,
	TagName1768,
	TagName1769,
	TagName1770,
	TagName1771,
	TagName1772,
	TagName1773,
	TagName1774,
	TagName1775,
	TagName1776,
	TagName1777,
	TagName1778,
	TagName1779,
	TagName1780,
	TagName1781,
	TagName1782,
	TagName1783,
	TagName1784,
	TagName1785,
	TagName1786,
	TagName1787,
	TagName1788,
	TagName1789,
	TagName1790,
	TagName1791,
	TagName1792,
	TagName1793,
	TagName1794,
	TagName1795,
	TagName1796,
	TagName1797,
	TagName1798,
	TagName1799,
	TagName1800,
	TagName1801,
	TagName1802,
	TagName1803,
	TagName1804,
	TagName1805,
	TagName1806,
	TagName1807,
	TagName1808,
	TagName1809,
	TagName1810,
	TagName1811,
	TagName1812,
	TagName1813,
	TagName1814,
	TagName1815,
	TagName1816,
	TagName1817,
	TagName1818,
	TagName1819,
	TagName1820,
	TagName1821,
	TagName1822,
	TagName1823,
	TagName1824,
	TagName1825,
	TagName1826,
	TagName1827,
	TagName1828,
	TagName1829,
	TagName1830,
	TagName1831,
	TagName1832,
	TagName1833,
	TagName1834,
	TagName1835,
	TagName1836,
	TagName1837,
	TagName1838,
	TagName1839,
	TagName1840,
	TagName1841,
	TagName1842,
	TagName1843,
	TagName1844,
	TagName1845,
	TagName1846,
	TagName1847,
	TagName1848,
	TagName1849,
	TagName1850,
	TagName1851,
	TagName1852,
	TagName1853,
	TagName1854,
	TagName1855,
	TagName1856,
	TagName1857,
	TagName1858,
	TagName1859,
	TagName1860,
	TagName1861,
	TagName1862,
	TagName1863,
	TagName1864,
	TagName1865,
	TagName1866,
	TagName1867,
	TagName1868,
	TagName1869,
	TagName1870,
	TagName1871,
	TagName1872,
	TagName1873,
	TagName1874,
	TagName1875,
	TagName1876,
	TagName1877,
	TagName1878,
	TagName1879,
	TagName1880,
	TagName1881,
	TagName1882,
	TagName1883,
	TagName1884,
	TagName1885,
	TagName1886,
	TagName1887,
	TagName1888,
	TagName1889,
	TagName1890,
	TagName1891,
	TagName1892,
	TagName1893,
	TagName1894,
	TagName1895,
	TagName1896,
	TagName1897,
	TagName1898,
	TagName1899,
	TagName1900,
	TagName1901,
	TagName1902,
	TagName1903,
	TagName1904,
	TagName1905,
	TagName1906,
	TagName1907,
	TagName1908,
	TagName1909,
	TagName1910,
	TagName1911,
	TagName1912,
	TagName1913,
	TagName1914,
	TagName1915,
	TagName1916,
	TagName1917,
	TagName1918,
	TagName1919,
	TagName1920,
	TagName1921,
	TagName1922,
	TagName1923,
	TagName1924,
	TagName1925,
	TagName1926,
	TagName1927,
	TagName1928,
	TagName1929,
	TagName1930,
	TagName1931,
	TagName1932,
	TagName1933,
	TagName1934,
	TagName1935,
	TagName1936,
	TagName1937,
	TagName1938,
	TagName1939,
	TagName1940,
	TagName1941,
	TagName1942,
	TagName1943,
	TagName1944,
	TagName1945,
	TagName1946,
	TagName1947,
	TagName1948,
	TagName1949,
	TagName1950,
	TagName1951,
	TagName1952,
	TagName1953,
	TagName1954,
	TagName1955,
	TagName1956,
	TagName1957,
	TagName1958,
	TagName1959,
	TagName1960,
	TagName1961,
	TagName1962,
	TagName1963,
	TagName1964,
	TagName1965,
	TagName1966,
	TagName1967,
	TagName1968,
	TagName1969,
	TagName1970,
	TagName1971,
	TagName1972,
	TagName1973,
	TagName1974,
	TagName1975,
	TagName1976,
	TagName1977,
	TagName1978,
	TagName1979,
	TagName1980,
	TagName1981,
	TagName1982,
	TagName1983,
	TagName1984,
	TagName1985,
	TagName1986,
	TagName1987,
	TagName1988,
	TagName1989,
	TagName1990,
	TagName1991,
	TagName1992,
	TagName1993,
	TagName1994,
	TagName1995,
	TagName1996,
	TagName1997,
	TagName1998,
	TagName1999,
	TagName2000,
	TagName2001,
	TagName2002,
	TagName2003,
	TagName2004,
	TagName2005,
	TagName2006,
	TagName2007,
	TagName2008,
	TagName2009,
	TagName2010,
	TagName2011,
	TagName2012,
	TagName2013,
	TagName2014,
	TagName2015,
	TagName2016,
	TagName2017,
	TagName2018,
	TagName2019,
	TagName2020,
	TagName2021,
	TagName2022,
	TagName2023,
	TagName2024,
	TagName2025,
	TagName2026,
	TagName2027,
	TagName2028,
	TagName2029,
	TagName2030,
	TagName2031,
	TagName2032,
	TagName2033,
	TagName2034,
	TagName2035,
	TagName2036,
	TagName2037,
	TagName2038,
	TagName2039,
	TagName2040,
	TagName2041,
	TagName2042,
	TagName2043,
	TagName2044,
	TagName2045,
	TagName2046,
	TagName2047,
	TagName2048,
	TagName2049,
	TagName2050,
	TagName2051,
	TagName2052,
	TagName2053,
	TagName2054,
	TagName2055,
	TagName2056,
	TagName2057,
	TagName2058,
	TagName2059,
	TagName2060,
	TagName2061,
	TagName2062,
	TagName2063,
	TagName2064,
	TagName2065,
	TagName2066,
	TagName2067,
	TagName2068,
	TagName2069,
	TagName2070,
	TagName2071,
	TagName2072,
	TagName2073,
	TagName2074,
	TagName2075,
	TagName2076,
	TagName2077,
	TagName2078,
	TagName2079,
	TagName2080,
	TagName2081,
	TagName2082,
	TagName2083,
	TagName2084,
	TagName2085,
	TagName2086,
	TagName2087,
	TagName2088,
	TagName2089,
	TagName2090,
	TagName2091,
	TagName2092,
	TagName2093,
	TagName2094,
	TagName2095,
	TagName2096,
	TagName2097,
	TagName2098,
	TagName2099,
	TagName2100,
	TagName2101,
	TagName2102,
	TagName2103,
	TagName2104,
	TagName2105,
	TagName2106,
	TagName2107,
	TagName2108,
	TagName2109,
	TagName2110,
	TagName2111,
	TagName2112,
	TagName2113,
	TagName2114,
	TagName2115,
	TagName2116,
	TagName2117,
	TagName2118,
	TagName2119,
	TagName2120,
	TagName2121,
	TagName2122,
	TagName2123,
	TagName2124,
	TagName2125,
	TagName2126,
	TagName2127,
	TagName2128,
	TagName2129,
	TagName2130,
	TagName2131,
	TagName2132,
	TagName2133,
	TagName2134,
	TagName2135,
	TagName2136,
	TagName2137,
	TagName2138,
	TagName2139,
	TagName2140,
	TagName2141,
	TagName2142,
	TagName2143,
	TagName2144,
	TagName2145,
	TagName2146,
	TagName2147,
	TagName2148,
	TagName2149,
	TagName2150,
	TagName2151,
	TagName2152,
	TagName2153,
	TagName2154,
	TagName2155,
	TagName2156,
	TagName2157,
	TagName2158,
	TagName2159,
	TagName2160,
	TagName2161,
	TagName2162,
	TagName2163,
	TagName2164,
	TagName2165,
	TagName2166,
	TagName2167,
	TagName2168,
	TagName2169,
	TagName2170,
	TagName2171,
	TagName2172,
	TagName2173,
	TagName2174,
	TagName2175,
	TagName2176,
	TagName2177,
	TagName2178,
	TagName2179,
	TagName2180,
	TagName2181,
	TagName2182,
	TagName2183,
	TagName2184,
	TagName2185,
	TagName2186,
	TagName2187,
	TagName2188,
	TagName2189,
	TagName2190,
	TagName2191,
	TagName2192,
	TagName2193,
	TagName2194,
	TagName2195,
	TagName2196,
	TagName2197,
	TagName2198,
	TagName2199,
	TagName2200,
	TagName2201,
	TagName2202,
	TagName2203,
	TagName2204,
	TagName2205,
	TagName2206,
	TagName2207,
	TagName2208,
	TagName2209,
	TagName2210,
	TagName2211,
	TagName2212,
	TagName2213,
	TagName2214,
	TagName2215,
	TagName2216,
	TagName2217,
	TagName2218,
	TagName2219,
	TagName2220,
	TagName2221,
	TagName2222,
	TagName2223,
	TagName2224,
	TagName2225,
	TagName2226,
	TagName2227,
	TagName2228,
	TagName2229,
	TagName2230,
	TagName2231,
	TagName2232,
	TagName2233,
	TagName2234,
	TagName2235,
	TagName2236,
	TagName2237,
	TagName2238,
	TagName2239,
	TagName2240,
	TagName2241,
	TagName2242,
	TagName2243,
	TagName2244,
	TagName2245,
	TagName2246,
	TagName2247,
	TagName2248,
	TagName2249,
	TagName2250,
	TagName2251,
	TagName2252,
	TagName2253,
	TagName2254,
	TagName2255,
	TagName2256,
	TagName2257,
	TagName2258,
	TagName2259,
	TagName2260,
	TagName2261,
	TagName2262,
	TagName2263,
	TagName2264,
	TagName2265,
	TagName2266,
	TagName2267,
	TagName2268,
	TagName2269,
	TagName2270,
	TagName2271,
	TagName2272,
	TagName2273,
	TagName2274,
	TagName2275,
	TagName2276,
	TagName2277,
	TagName2278,
	TagName2279,
	TagName2280,
	TagName2281,
	TagName2282,
	TagName2283,
	TagName2284,
	TagName2285,
	TagName2286,
	TagName2287,
	TagName2288,
	TagName2289,
	TagName2290,
	TagName2291,
	TagName2292,
	TagName2293,
	TagName2294,
	TagName2295,
	TagName2296,
	TagName2297,
	TagName2298,
	TagName2299,
	TagName2300,
	TagName2301,
	TagName2302,
	TagName2303,
	TagName2304,
	TagName2305,
	TagName2306,
	TagName2307,
	TagName2308,
	TagName2309,
	TagName2310,
	TagName2311,
	TagName2312,
	TagName2313,
	TagName2314,
	TagName2315,
	TagName2316,
	TagName2317,
	TagName2318,
	TagName2319,
	TagName2320,
	TagName2321,
	TagName2322,
	TagName2323,
	TagName2324,
	TagName2325,
	TagName2326,
	TagName2327,
	TagName2328,
	TagName2329,
	TagName2330,
	TagName2331,
	TagName2332,
	TagName2333,
	TagName2334,
	TagName2335,
	TagName2336,
	TagName2337,
	TagName2338,
	TagName2339,
	TagName2340,
	TagName2341,
	TagName2342,
	TagName2343,
	TagName2344,
	TagName2345,
	TagName2346,
	TagName2347,
	TagName2348,
	TagName2349,
	TagName2350,
	TagName2351,
	TagName2352,
	TagName2353,
	TagName2354,
	TagName2355,
	TagName2356,
	TagName2357,
	TagName2358,
	TagName2359,
	TagName2360,
	TagName2361,
	TagName2362,
	TagName2363,
	TagName2364,
	TagName2365,
	TagName2366,
	TagName2367,
	TagName2368,
	TagName2369,
	TagName2370,
	TagName2371,
	TagName2372,
	TagName2373,
	TagName2374,
	TagName2375,
	TagName2376,
	TagName2377,
	TagName2378,
	TagName2379,
	TagName2380,
	TagName2381,
	TagName2382,
	TagName2383,
	TagName2384,
	TagName2385,
	TagName2386,
	TagName2387,
	TagName2388,
	TagName2389,
	TagName2390,
	TagName2391,
	TagName2392,
	TagName2393,
	TagName2394,
	TagName2395,
	TagName2396,
	TagName2397,
	TagName2398,
	TagName2399,
	TagName2400,
	TagName2401,
	TagName2402,
	TagName2403,
	TagName2404,
	TagName2405,
	TagName2406,
	TagName2407,
	TagName2408,
	TagName2409,
	TagName2410,
	TagName2411,
	TagName2412,
	TagName2413,
	TagName2414,
	TagName2415,
	TagName2416,
	TagName2417,
	TagName2418,
	TagName2419,
	TagName2420,
	TagName2421,
	TagName2422,
	TagName2423,
	TagName2424,
	TagName2425,
	TagName2426,
	TagName2427,
	TagName2428,
	TagName2429,
	TagName2430,
	TagName2431,
	TagName2432,
	TagName2433,
	TagName2434,
	TagName2435,
	TagName2436,
	TagName2437,
	TagName2438,
	TagName2439,
	TagName2440,
	TagName2441,
	TagName2442,
	TagName2443,
	TagName2444,
	TagName2445,
	TagName2446,
	TagName2447,
	TagName2448,
	TagName2449,
	TagName2450,
	TagName2451,
	TagName2452,
	TagName2453,
	TagName2454,
	TagName2455,
	TagName2456,
	TagName2457,
	TagName2458,
	TagName2459,
	TagName2460,
	TagName2461,
	TagName2462,
	TagName2463,
	TagName2464,
	TagName2465,
	TagName2466,
	TagName2467,
	TagName2468,
	TagName2469,
	TagName2470,
	TagName2471,
	TagName2472,
	TagName2473,
	TagName2474,
	TagName2475,
	TagName2476,
	TagName2477,
	TagName2478,
	TagName2479,
	TagName2480,
	TagName2481,
	TagName2482,
	TagName2483,
	TagName2484,
	TagName2485,
	TagName2486,
	TagName2487,
	TagName2488,
	TagName2489,
	TagName2490,
	TagName2491,
	TagName2492,
	TagName2493,
	TagName2494,
	TagName2495,
	TagName2496,
	TagName2497,
	TagName2498,
	TagName2499,
	TagName2500,
	TagName2501,
	TagName2502,
	TagName2503,
	TagName2504,
	TagName2505,
	TagName2506,
	TagName2507,
	TagName2508,
	TagName2509,
	TagName2510,
	TagName2511,
	TagName2512,
	TagName2513,
	TagName2514,
	TagName2515,
	TagName2516,
	TagName2517,
	TagName2518,
	TagName2519,
	TagName2520,
	TagName2521,
	TagName2522,
	TagName2523,
	TagName2524,
	TagName2525,
	TagName2526,
	TagName2527,
	TagName2528,
	TagName2529,
	TagName2530,
	TagName2531,
	TagName2532,
	TagName2533,
	TagName2534,
	TagName2535,
	TagName2536,
	TagName2537,
	TagName2538,
	TagName2539,
	TagName2540,
	TagName2541,
	TagName2542,
	TagName2543,
	TagName2544,
	TagName2545,
	TagName2546,
	TagName2547,
	TagName2548,
	TagName2549,
	TagName2550,
	TagName2551,
	TagName2552,
	TagName2553,
	TagName2554,
	TagName2555,
	TagName2556,
	TagName2557,
	TagName2558,
	TagName2559,
	TagName2560,
	TagName2561,
	TagName2562,
	TagName2563,
	TagName2564,
	TagName2565,
	TagName2566,
	TagName2567,
	TagName2568,
	TagName2569,
	TagName2570,
	TagName2571,
	TagName2572,
	TagName2573,
	TagName2574,
	TagName2575,
	TagName2576,
	TagName2577,
	TagName2578,
	TagName2579,
	TagName2580,
	TagName2581,
	TagName2582,
	TagName2583,
	TagName2584,
	TagName2585,
	TagName2586,
	TagName2587,
	TagName2588,
	TagName2589,
	TagName2590,
	TagName2591,
	TagName2592,
	TagName2593,
	TagName2594,
	TagName2595,
	TagName2596,
	TagName2597,
	TagName2598,
	TagName2599,
	TagName2600,
	TagName2601,
	TagName2602,
	TagName2603,
	TagName2604,
	TagName2605,
	TagName2606,
	TagName2607,
	TagName2608,
	TagName2609,
	TagName2610,
	TagName2611,
	TagName2612,
	TagName2613,
	TagName2614,
	TagName2615,
	TagName2616,
	TagName2617,
	TagName2618,
	TagName2619,
	TagName2620,
	TagName2621,
	TagName2622,
	TagName2623,
	TagName2624,
	TagName2625,
	TagName2626,
	TagName2627,
	TagName2628,
	TagName2629,
	TagName2630,
	TagName2631,
	TagName2632,
	TagName2633,
	TagName2634,
	TagName2635,
	TagName2636,
	TagName2637,
	TagName2638,
	TagName2639,
	TagName2640,
	TagName2641,
	TagName2642,
	TagName2643,
	TagName2644,
	TagName2645,
	TagName2646,
	TagName2647,
	TagName2648,
	TagName2649,
	TagName2650,
	TagName2651,
	TagName2652,
	TagName2653,
	TagName2654,
	TagName2655,
	TagName2656,
	TagName2657,
	TagName2658,
	TagName2659,
	TagName2660,
	TagName2661,
	TagName2662,
	TagName2663,
	TagName2664,
	TagName2665,
	TagName2666,
	TagName2667,
	TagName2668,
	TagName2669,
	TagName2670,
	TagName2671,
	TagName2672,
	TagName2673,
	TagName2674,
	TagName2675,
	TagName2676,
	TagName2677,
	TagName2678,
	TagName2679,
	TagName2680,
	TagName2681,
	TagName2682,
	TagName2683,
	TagName2684,
	TagName2685,
	TagName2686,
	TagName2687,
	TagName2688,
	TagName2689,
	TagName2690,
	TagName2691,
	TagName2692,
	TagName2693,
	TagName2694,
	TagName2695,
	TagName2696,
	TagName2697,
	TagName2698,
	TagName2699,
	TagName2700,
	TagName2701,
	TagName2702,
	TagName2703,
	TagName2704,
	TagName2705,
	TagName2706,
	TagName2707,
	TagName2708,
	TagName2709,
	TagName2710,
	TagName2711,
	TagName2712,
	TagName2713,
	TagName2714,
	TagName2715,
	TagName2716,
	TagName2717,
	TagName2718,
	TagName2719,
	TagName2720,
	TagName2721,
	TagName2722,
	TagName2723,
	TagName2724,
	TagName2725,
	TagName2726,
	TagName2727,
	TagName2728,
	TagName2729,
	TagName2730,
	TagName2731,
	TagName2732,
	TagName2733,
	TagName2734,
	TagName2735,
	TagName2736,
	TagName2737,
	TagName2738,
	TagName2739,
	TagName2740,
	TagName2741,
	TagName2742,
	TagName2743,
	TagName2744,
	TagName2745,
	TagName2746,
	TagName2747,
	TagName2748,
	TagName2749,
	TagName2750,
	TagName2751,
	TagName2752,
	TagName2753,
	TagName2754,
	TagName2755,
	TagName2756,
	TagName2757,
	TagName2758,
	TagName2759,
	TagName2760,
	TagName2761,
	TagName2762,
	TagName2763,
	TagName2764,
	TagName2765,
	TagName2766,
	TagName2767,
	TagName2768,
	TagName2769,
	TagName2770,
	TagName2771,
	TagName2772,
	TagName2773,
	TagName2774,
	TagName2775,
	TagName2776,
	TagName2777,
	TagName2778,
	TagName2779,
	TagName2780,
	TagName2781,
	TagName2782,
	TagName2783,
	TagName2784,
	TagName2785,
	TagName2786,
	TagName2787,
	TagName2788,
	TagName2789,
	TagName2790,
	TagName2791,
	TagName2792,
	TagName2793,
	TagName2794,
	TagName2795,
	TagName2796,
	TagName2797,
	TagName2798,
	TagName2799,
	TagName2800,
	TagName2801,
	TagName2802,
	TagName2803,
	TagName2804,
	TagName2805,
	TagName2806,
	TagName2807,
	TagName2808,
	TagName2809,
	TagName2810,
	TagName2811,
	TagName2812,
	TagName2813,
	TagName2814,
	TagName2815,
	TagName2816,
	TagName2817,
	TagName2818,
	TagName2819,
	TagName2820,
	TagName2821,
	TagName2822,
	TagName2823,
	TagName2824,
	TagName2825,
	TagName2826,
	TagName2827,
	TagName2828,
	TagName2829,
	TagName2830,
	TagName2831,
	TagName2832,
	TagName2833,
	TagName2834,
	TagName2835,
	TagName2836,
	TagName2837,
	TagName2838,
	TagName2839,
	TagName2840,
	TagName2841,
	TagName2842,
	TagName2843,
	TagName2844,
	TagName2845,
	TagName2846,
	TagName2847,
	TagName2848,
	TagName2849,
	TagName2850,
	TagName2851,
	TagName2852,
	TagName2853,
	TagName2854,
	TagName2855,
	TagName2856,
	TagName2857,
	TagName2858,
	TagName2859,
	TagName2860,
	TagName2861,
	TagName2862,
	TagName2863,
	TagName2864,
	TagName2865,
	TagName2866,
	TagName2867,
	TagName2868,
	TagName2869,
	TagName2870,
	TagName2871,
	TagName2872,
	TagName2873,
	TagName2874,
	TagName2875,
	TagName2876,
	TagName2877,
	TagName2878,
	TagName2879,
	TagName2880,
	TagName2881,
	TagName2882,
	TagName2883,
	TagName2884,
	TagName2885,
	TagName2886,
	TagName2887,
	TagName2888,
	TagName2889,
	TagName2890,
	TagName2891,
	TagName2892,
	TagName2893,
	TagName2894,
	TagName2895,
	TagName2896,
	TagName2897,
	TagName2898,
	TagName2899,
	TagName2900,
	TagName2901,
	TagName2902,
	TagName2903,
	TagName2904,
	TagName2905,
	TagName2906,
	TagName2907,
	TagName2908,
	TagName2909,
	TagName2910,
	TagName2911,
	TagName2912,
	TagName2913,
	TagName2914,
	TagName2915,
	TagName2916,
	TagName2917,
	TagName2918,
	TagName2919,
	TagName2920,
	TagName2921,
	TagName2922,
	TagName2923,
	TagName2924,
	TagName2925,
	TagName2926,
	TagName2927,
	TagName2928,
	TagName2929,
	TagName2930,
	TagName2931,
	TagName2932,
	TagName2933,
	TagName2934,
	TagName2935,
	TagName2936,
	TagName2937,
	TagName2938,
	TagName2939,
	TagName2940,
	TagName2941,
	TagName2942,
	TagName2943,
	TagName2944,
	TagName2945,
	TagName2946,
	TagName2947,
	TagName2948,
	TagName2949,
	TagName2950,
	TagName2951,
	TagName2952,
	TagName2953,
	TagName2954,
	TagName2955,
	TagName2956,
	TagName2957,
	TagName2958,
	TagName2959,
	TagName2960,
	TagName2961,
	TagName2962,
	TagName2963,
	TagName2964,
	TagName2965,
	TagName2966,
	TagName2967,
	TagName2968,
	TagName2969,
	TagName2970,
	TagName2971,
	TagName2972,
	TagName2973,
	TagName2974,
	TagName2975,
	TagName2976,
	TagName2977,
	TagName2978,
	TagName2979,
	TagName2980,
	TagName2981,
	TagName2982,
	TagName2983,
	TagName2984,
	TagName2985,
	TagName2986,
	TagName2987,
	TagName2988,
	TagName2989,
	TagName2990,
	TagName2991,
	TagName2992,
	TagName2993,
	TagName2994,
	TagName2995,
	TagName2996,
	TagName2997,
	TagName2998,
	TagName2999,
	TagName3000,
}
enum Club: int {
	None,
	Engineer,
	CleanNClearing,
	KnightsHospitaller,
	IndeGEHENNA,
	IndeMILLENNIUM,
	IndeHyakkiyako,
	IndeShanhaijing,
	IndeTrinity,
	FoodService,
	Countermeasure,
	BookClub,
	MatsuriOffice,
	GourmetClub,
	HoukagoDessert,
	RedwinterSecretary,
	Schale,
	TheSeminar,
	AriusSqud,
	Justice,
	Fuuki,
	Kohshinjo68,
	Meihuayuan,
	SisterHood,
	GameDev,
	anzenkyoku,
	RemedialClass,
	SPTF,
	TrinityVigilance,
	Veritas,
	TrainingClub,
	Onmyobu,
	Shugyobu,
	Endanbou,
	NinpoKenkyubu,
	Class227,
	EmptyClub,
	Emergentology,
	RabbitPlatoon,
	PandemoniumSociety,
	HotSpringsDepartment,
	TeaParty,
	PublicPeaceBureau,
	Genryumon,
	BlackTortoisePromenade,
	LaborParty,
}
table GroundVector3 {
	X: float;
	Y: float;
	Z: float;
}

table AcademyFavorScheduleExcelTable {
	DataList: [AcademyFavorScheduleExcel];
}

table AcademyFavorScheduleExcel {
	Id: long;
	CharacterId: long;
	ScheduleGroupId: long;
	OrderInGroup: long;
	Location: string;
	LocalizeScenarioId: uint;
	FavorRank: long;
	SecretStoneAmount: long;
	ScenarioSriptGroupId: long;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table AcademyLocationExcelTable {
	DataList: [AcademyLocationExcel];
}

table AcademyLocationExcel {
	Id: long;
	LocalizeEtcId: uint;
	PrefabPath: string;
	IconImagePath: string;
	OpenCondition: [School];
	OpenConditionCount: [long];
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	OpenTeacherRank: long;
}

table AcademyLocationRankExcelTable {
	DataList: [AcademyLocationRankExcel];
}

table AcademyLocationRankExcel {
	Rank: long;
	RankExp: long;
	TotalExp: long;
}

table AcademyMessanger1ExcelTable {
	DataList: [AcademyMessanger1Excel];
}

table AcademyMessanger1Excel {
	MessageGroupId: long;
	Id: long;
	CharacterId: long;
	MessageCondition: AcademyMessageConditions;
	ConditionValue: long;
	PreConditionGroupId: long;
	PreConditionFavorScheduleId: long;
	FavorScheduleId: long;
	NextGroupId: long;
	FeedbackTimeMillisec: long;
	MessageType: AcademyMessageTypes;
	ImagePath: string;
	MessageKR: string;
	MessageJP: string;
	MessageTH: string;
	MessageTW: string;
	MessageEN: string;
}

table AcademyMessanger2ExcelTable {
	DataList: [AcademyMessanger2Excel];
}

table AcademyMessanger2Excel {
	MessageGroupId: long;
	Id: long;
	CharacterId: long;
	MessageCondition: AcademyMessageConditions;
	ConditionValue: long;
	PreConditionGroupId: long;
	PreConditionFavorScheduleId: long;
	FavorScheduleId: long;
	NextGroupId: long;
	FeedbackTimeMillisec: long;
	MessageType: AcademyMessageTypes;
	ImagePath: string;
	MessageKR: string;
	MessageJP: string;
	MessageTH: string;
	MessageTW: string;
	MessageEN: string;
}

table AcademyMessanger3ExcelTable {
	DataList: [AcademyMessanger3Excel];
}

table AcademyMessanger3Excel {
	MessageGroupId: long;
	Id: long;
	CharacterId: long;
	MessageCondition: AcademyMessageConditions;
	ConditionValue: long;
	PreConditionGroupId: long;
	PreConditionFavorScheduleId: long;
	FavorScheduleId: long;
	NextGroupId: long;
	FeedbackTimeMillisec: long;
	MessageType: AcademyMessageTypes;
	ImagePath: string;
	MessageKR: string;
	MessageJP: string;
	MessageTH: string;
	MessageTW: string;
	MessageEN: string;
}

table AcademyMessangerExcelTable {
	DataList: [AcademyMessangerExcel];
}

table AcademyMessangerExcel {
	MessageGroupId: long;
	Id: long;
	CharacterId: long;
	MessageCondition: AcademyMessageConditions;
	ConditionValue: long;
	PreConditionGroupId: long;
	PreConditionFavorScheduleId: long;
	FavorScheduleId: long;
	NextGroupId: long;
	FeedbackTimeMillisec: long;
	MessageType: AcademyMessageTypes;
	ImagePath: string;
	MessageKR: string;
	MessageJP: string;
	MessageTH: string;
	MessageTW: string;
	MessageEN: string;
}

table AcademyRewardExcelTable {
	DataList: [AcademyRewardExcel];
}

table AcademyRewardExcel {
	Location: string;
	ScheduleGroupId: long;
	OrderInGroup: long;
	Id: long;
	ProgressTexture: string;
	LocalizeEtcId: uint;
	LocationRank: long;
	FavorExp: long;
	SecretStoneAmount: long;
	SecretStoneProb: long;
	ExtraFavorExp: long;
	ExtraFavorExpProb: long;
	ExtraRewardParcelType: [ParcelType];
	ExtraRewardParcelId: [long];
	ExtraRewardAmount: [long];
	ExtraRewardProb: [long];
	IsExtraRewardDisplayed: [bool];
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table AcademyTicketExcelTable {
	DataList: [AcademyTicketExcel];
}

table AcademyTicketExcel {
	LocationRankSum: long;
	ScheduleTicktetMax: long;
}

table AcademyZoneExcelTable {
	DataList: [AcademyZoneExcel];
}

table AcademyZoneExcel {
	Id: long;
	LocationId: long;
	LocationRankForUnlock: long;
	LocalizeEtcId: uint;
	StudentVisitProb: [long];
	RewardGroupId: long;
	Tags: [Tag];
}

table AccountLevelExcelTable {
	DataList: [AccountLevelExcel];
}

table AccountLevelExcel {
	Id: long;
	Level: long;
	Exp: long;
	APAutoChargeMax: long;
}

table AddressableBlackListExcelTable {
	DataList: [AddressableBlackListExcel];
}

table AddressableBlackListExcel {
	Id: long;
	FolderPath: [string];
	ResourcePath: [string];
}

table AddressableWhiteListExcelTable {
	DataList: [AddressableWhiteListExcel];
}

table AddressableWhiteListExcel {
	Id: long;
	FolderPath: [string];
	ResourcePath: [string];
}

table AnimationBlendTable {
	DataList: [BlendData];
}

table BlendData {
	Type: int;
	InfoList: [BlendInfo];
}

table BlendInfo {
	From: int;
	To: int;
	Blend: float;
}

table AnimatorDataTable {
	DataList: [AnimatorData];
}

table AnimatorData {
	DefaultStateName: string;
	Name: string;
	DataList: [AniStateData];
}

table AniStateData {
	StateName: string;
	StatePrefix: string;
	StateNameWithPrefix: string;
	Tag: string;
	SpeedParameterName: string;
	SpeedParamter: float;
	StateSpeed: float;
	ClipName: string;
	Length: float;
	FrameRate: float;
	IsLooping: bool;
	Events: [AniEventData];
}

table AniEventData {
	Name: string;
	Time: float;
	IntParam: int;
	FloatParam: float;
	StringParam: string;
}

table ArenaLevelSectionExcelTable {
	DataList: [ArenaLevelSectionExcel];
}

table ArenaLevelSectionExcel {
	ArenaSeasonId: long;
	StartLevel: long;
	LastLevel: long;
	UserCount: long;
}

table ArenaMapExcelTable {
	DataList: [ArenaMapExcel];
}

table ArenaMapExcel {
	UniqueId: long;
	TerrainType: long;
	TerrainTypeLocalizeKey: string;
	ImagePath: string;
	GroundGroupId: long;
	GroundGroupNameLocalizeKey: string;
	StartRank: long;
	EndRank: long;
	GroundId: long;
}

table ArenaNPCExcelTable {
	DataList: [ArenaNPCExcel];
}

table ArenaNPCExcel {
	UniqueId: long;
	Rank: long;
	NPCAccountLevel: long;
	NPCLevel: long;
	NPCLevelDeviation: long;
	NPCStarGrade: long;
	UseTSS: bool;
	ExceptionCharacterRarities: [Rarity];
	ExceptionMainCharacterIds: [long];
	ExceptionSupportCharacterIds: [long];
	ExceptionTSSIds: [long];
}

table ArenaRewardExcelTable {
	DataList: [ArenaRewardExcel];
}

table ArenaRewardExcel {
	UniqueId: long;
	arenarewardtype: ArenaRewardType;
	RankStart: long;
	RankEnd: long;
	RankIconPath: string;
	RewardParcelType: [ParcelType];
	RewardParcelUniqueId: [long];
	RewardParcelUniqueName: [string];
	RewardParcelAmount: [long];
}

table ArenaSeasonCloseRewardExcelTable {
	DataList: [ArenaSeasonCloseRewardExcel];
}

table ArenaSeasonCloseRewardExcel {
	SeasonId: long;
	RankStart: long;
	RankEnd: long;
	RewardParcelType: [ParcelType];
	RewardParcelUniqueId: [long];
	RewardParcelUniqueName: [string];
	RewardParcelAmount: [long];
}

table ArenaSeasonExcelTable {
	DataList: [ArenaSeasonExcel];
}

table ArenaSeasonExcel {
	UniqueId: long;
	SeasonStartDate: string;
	SeasonEndDate: string;
	SeasonGroupLimit: long;
	PrevSeasonId: long;
}

table AttendanceExcelTable {
	DataList: [AttendanceExcel];
}

table AttendanceExcel {
	Id: long;
	Type: AttendanceType;
	CountdownPrefab: string;
	DisplayOrder: long;
	AccountType: AccountState;
	AccountLevelLimit: long;
	Title: string;
	InfomationLocalizeCode: string;
	CountRule: AttendanceCountRule;
	CountReset: AttendanceResetType;
	BookSize: long;
	StartDate: string;
	StartableEndDate: string;
	EndDate: string;
	ExpiryDate: long;
	mailtype: MailType;
	dialogcategory: DialogCategory;
	TitleImagePath: string;
	DecorationImagePath: string;
}

table AttendanceRewardExcelTable {
	DataList: [AttendanceRewardExcel];
}

table AttendanceRewardExcel {
	AttendanceId: long;
	Day: long;
	RewardIcon: string;
	RewardParcelType: [ParcelType];
	RewardId: [long];
	RewardAmount: [long];
}

table AudioAnimatorExcelTable {
	DataList: [AudioAnimatorExcel];
}

table AudioAnimatorExcel {
	ControllerNameHash: uint;
	VoiceNamePrefix: string;
	StateNameHash: uint;
	StateName: string;
	IgnoreInterruptDelay: bool;
	IgnoreInterruptPlay: bool;
	Volume: float;
	Delay: float;
	AudioPriority: int;
	AudioClipPath: [string];
	VoiceHash: [uint];
}

table BattleLevelFactorExcelTable {
	DataList: [BattleLevelFactorExcel];
}

table BattleLevelFactorExcel {
	LevelDiff: int;
	DamageRate: long;
}

table BGMExcelTable {
	DataList: [BGMExcel];
}

table BGMExcel {
	Id: long;
	productionstep: ProductionStep;
	Path: string;
	Volume: float;
	LoopStartTime: float;
	LoopEndTime: float;
	LoopTranstionTime: float;
	LoopOffsetTime: float;
}

table BGMRaidExcelTable {
	DataList: [BGMRaidExcel];
}

table BGMRaidExcel {
	StageId: long;
	PhaseIndex: long;
	BGMId: long;
}

table BGMUIExcelTable {
	DataList: [BGMUIExcel];
}

table BGMUIExcel {
	UIPrefab: uint;
	BGMId: long;
	BGMId2nd: long;
	BGMId3rd: long;
	EventContentId: long;
}

table BGM_GlobalExcelTable {
	DataList: [BGM_GlobalExcel];
}

table BGM_GlobalExcel {
	GroupBGMId: long;
	BGMIdKr: long;
	BGMIdJp: long;
	BGMIdTh: long;
	BGMIdTw: long;
	BGMIdEn: long;
}

table BossExternalBTExcelTable {
	DataList: [BossExternalBTExcel];
}

table BossExternalBTExcel {
	ExternalBTId: long;
	AIPhase: long;
	externalbtnodetype: ExternalBTNodeType;
	externalbttrigger: ExternalBTTrigger;
	TriggerArgument: string;
	BehaviorRate: long;
	externalbehavior: ExternalBehavior;
	BehaviorArgument: string;
}

table BossPhaseExcelTable {
	DataList: [BossPhaseExcel];
}

table BossPhaseExcel {
	Id: long;
	AIPhase: long;
	NormalAttackSkillUniqueName: string;
	UseExSkill: [bool];
}

table BuffParticleExcelTable {
	DataList: [BuffParticleExcel];
}

table BuffParticleExcel {
	UniqueId: long;
	UniqueName: string;
	BuffType: string;
	BuffName: string;
	ResourcePath: string;
}

table BulletArmorDamageFactorExcelTable {
	DataList: [BulletArmorDamageFactorExcel];
}

table BulletArmorDamageFactorExcel {
	DamageFactorGroupId: string;
	bullettype: BulletType;
	armortype: ArmorType;
	DamageRate: long;
	damageattribute: DamageAttribute;
	MinDamageRate: long;
	MaxDamageRate: long;
	ShowHighlightFloater: bool;
}

table CafeInteractionExcelTable {
	DataList: [CafeInteractionExcel];
}

table CafeInteractionExcel {
	CharacterId: long;
	IgnoreIfUnobtained: bool;
	IgnoreIfUnobtainedStartDate: string;
	IgnoreIfUnobtainedEndDate: string;
	BubbleType: [BubbleType];
	BubbleDuration: [long];
	FavorEmoticonRewardParcelType: ParcelType;
	FavorEmoticonRewardId: long;
	FavorEmoticonRewardAmount: long;
	CafeCharacterState: [string];
}

table CafeRankExcelTable {
	DataList: [CafeRankExcel];
}

table CafeRankExcel {
	Rank: long;
	RecipeId: long;
	ComfortMax: long;
	ActionPointProductionCoefficient: long;
	ActionPointProductionCorrectionValue: long;
	ActionPointStorageMax: long;
	GoldProductionCoefficient: long;
	GoldProductionCorrectionValue: long;
	GoldStorageMax: long;
	TagCountMax: long;
	CharacterVisitMin: int;
	CharacterVisitMax: int;
}

table CameraExcelTable {
	DataList: [CameraExcel];
}

table CameraExcel {
	UniqueId: long;
	MinDistance: float;
	MaxDistance: float;
	RotationX: float;
	RotationY: float;
	MoveInstantly: bool;
	MoveInstantlyRotationSave: bool;
	LeftMargin: float;
	BottomMargin: float;
	IgnoreEnemies: bool;
	UseRailPointCompensation: bool;
}

table CampaignChapterExcelTable {
	DataList: [CampaignChapterExcel];
}

table CampaignChapterExcel {
	Id: long;
	Name: string;
	NormalImagePath: string;
	HardImagePath: string;
	Order: long;
	PreChapterId: [long];
	ChapterRewardId: long;
	ChapterHardRewardId: long;
	ChapterVeryHardRewardId: long;
	NormalCampaignStageId: [long];
	NormalExtraStageId: [long];
	HardCampaignStageId: [long];
	VeryHardCampaignStageId: [long];
	IsTacticSkip: bool;
}

table CampaignChapterRewardExcelTable {
	DataList: [CampaignChapterRewardExcel];
}

table CampaignChapterRewardExcel {
	Id: long;
	CampaignChapterStar: long;
	ChapterRewardParcelType: [ParcelType];
	ChapterRewardId: [long];
	ChapterRewardAmount: [int];
}

table CampaignStageExcelTable {
	DataList: [CampaignStageExcel];
}

table CampaignStageExcel {
	Id: long;
	Deprecated: bool;
	Name: string;
	StageNumber: string;
	CleardScenarioId: long;
	BattleDuration: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	StageEnterEchelonCount: int;
	StarConditionTacticRankSCount: long;
	StarConditionTurnCount: long;
	EnterScenarioGroupId: [long];
	ClearScenarioGroupId: [long];
	StrategyMap: string;
	StrategyMapBG: string;
	CampaignStageRewardId: long;
	MaxTurn: int;
	stagetopography: StageTopography;
	RecommandLevel: int;
	BgmId: string;
	strategyenvironment: StrategyEnvironment;
	GroundId: long;
	contenttype: ContentType;
	BGMId: long;
	FirstClearReportEventName: string;
	FirstClearFunnelMessage: string;
	FirstClearEventMessage: string;
	TacticRewardExp: long;
	FixedEchelonId: long;
}

table CampaignStageRewardExcelTable {
	DataList: [CampaignStageRewardExcel];
}

table CampaignStageRewardExcel {
	GroupId: long;
	rewardtag: RewardTag;
	StageRewardProb: int;
	StageRewardParcelType: ParcelType;
	StageRewardId: long;
	StageRewardAmount: int;
	IsDisplayed: bool;
}

table CampaignStrategyObjectExcelTable {
	DataList: [CampaignStrategyObjectExcel];
}

table CampaignStrategyObjectExcel {
	Id: long;
	Key: uint;
	Name: string;
	PrefabName: string;
	strategyobjecttype: StrategyObjectType;
	StrategyRewardParcelType: ParcelType;
	StrategyRewardID: long;
	StrategyRewardName: string;
	StrategyRewardAmount: int;
	StrategySightRange: long;
	PortalId: int;
	HealValue: int;
	SwithId: int;
	BuffId: int;
	Disposable: bool;
}

table CampaignUnitExcelTable {
	DataList: [CampaignUnitExcel];
}

table CampaignUnitExcel {
	Id: long;
	Key: uint;
	Name: string;
	PrefabName: string;
	EnterScenarioGroupId: [long];
	ClearScenarioGroupId: [long];
	GroundId: long;
	IsBoss: bool;
	MoveRange: int;
	AIMoveType: StrategyAIType;
	Grade: HexaUnitGrade;
	EnvironmentType: TacticEnvironment;
	Scale: float;
	IsTacticSkip: bool;
}

table CharacterAcademyTagsExcelTable {
	DataList: [CharacterAcademyTagsExcel];
}

table CharacterAcademyTagsExcel {
	Id: long;
	FavorTags: [Tag];
	FavorItemTags: [Tag];
	FavorItemUniqueTags: [Tag];
	ForbiddenTags: [Tag];
	ZoneWhiteListTags: [Tag];
}

table CharacterAIExcelTable {
	DataList: [CharacterAIExcel];
}

table CharacterAIExcel {
	Id: long;
	engagetype: EngageType;
	Positioning: PositioningType;
	DistanceReduceRatioObstaclePath: long;
	DistanceReduceObstaclePath: long;
	DistanceReduceRatioFormationPath: long;
	DistanceReduceFormationPath: long;
	MinimumPositionGap: long;
	CanUseObstacleOfKneelMotion: bool;
	CanUseObstacleOfStandMotion: bool;
	HasTargetSwitchingMotion: bool;
}

table CharacterCalculationLimitExcelTable {
	DataList: [CharacterCalculationLimitExcel];
}

table CharacterCalculationLimitExcel {
	Id: long;
	tacticentitytype: TacticEntityType;
	CalculationValue: BattleCalculationStat;
	MinValue: long;
	MaxValue: long;
}

table CharacterCombatSkinExcelTable {
	DataList: [CharacterCombatSkinExcel];
}

table CharacterCombatSkinExcel {
	GroupId: string;
	UniqueId: long;
	ResourcePath: string;
}

table CharacterDialogEventExcelTable {
	DataList: [CharacterDialogEventExcel];
}

table CharacterDialogEventExcel {
	CharacterId: long;
	OriginalCharacterId: long;
	DisplayOrder: long;
	EventID: long;
	productionstep: ProductionStep;
	dialogcategory: DialogCategory;
	dialogcondition: DialogCondition;
	dialogconditiondetail: DialogConditionDetail;
	DialogConditionDetailValue: long;
	GroupId: long;
	dialogtype: DialogType;
	ActionName: string;
	Duration: long;
	AnimationName: string;
	LocalizeKR: string;
	LocalizeJP: string;
	LocalizeTH: string;
	LocalizeTW: string;
	LocalizeEN: string;
	VoiceClipsKr: [string];
	VoiceClipsJp: [string];
	VoiceClipsTh: [string];
	VoiceClipsTw: [string];
	VoiceClipsEn: [string];
	CollectionVisible: bool;
	cvcollectiontype: CVCollectionType;
	UnlockEventSeason: long;
	ScenarioGroupId: long;
	LocalizeCVGroup: string;
}

table CharacterDialogExcelTable {
	DataList: [CharacterDialogExcel];
}

table CharacterDialogExcel {
	CharacterId: long;
	DisplayOrder: long;
	productionstep: ProductionStep;
	dialogcategory: DialogCategory;
	dialogcondition: DialogCondition;
	anniversary: Anniversary;
	StartDate: string;
	EndDate: string;
	GroupId: long;
	dialogtype: DialogType;
	ActionName: string;
	Duration: long;
	AnimationName: string;
	LocalizeKR: string;
	LocalizeJP: string;
	LocalizeTH: string;
	LocalizeTW: string;
	LocalizeEN: string;
	VoiceClipsKr: [string];
	VoiceClipsJp: [string];
	VoiceClipsTh: [string];
	VoiceClipsTw: [string];
	VoiceClipsEn: [string];
	ApplyPosition: bool;
	PosX: float;
	PosY: float;
	CollectionVisible: bool;
	cvcollectiontype: CVCollectionType;
	UnlockFavorRank: long;
	LocalizeCVGroup: string;
	TeenMode: bool;
}

table CharacterExcelTable {
	DataList: [CharacterExcel];
}

table CharacterExcel {
	Id: long;
	DevName: string;
	productionstep: ProductionStep;
	CollectionVisible: bool;
	ReleaseDate: string;
	CollectionVisibleStartDate: string;
	CollectionVisibleEndDate: string;
	IsPlayableCharacter: bool;
	LocalizeEtcId: uint;
	rarity: Rarity;
	IsNPC: bool;
	tacticentitytype: TacticEntityType;
	CanSurvive: bool;
	IsDummy: bool;
	SubPartsCount: int;
	tacticrole: TacticRole;
	weapontype: WeaponType;
	tacticrange: TacticRange;
	bullettype: BulletType;
	armortype: ArmorType;
	aimiktype: AimIKType;
	school: School;
	club: Club;
	DefaultStarGrade: int;
	MaxStarGrade: int;
	statleveluptype: StatLevelUpType;
	squadtype: SquadType;
	Jumpable: bool;
	PersonalityId: long;
	CharacterAIId: long;
	ExternalBTId: long;
	ScenarioCharacter: string;
	SpawnTemplateId: uint;
	FavorLevelupType: int;
	EquipmentSlot: [EquipmentCategory];
	SpineResourceName: string;
	SpineResourceNameDiorama: string;
	SpineResourceNameDioramaForFormConversion: string;
	entitymaterialtype: EntityMaterialType;
	ModelPrefabName: string;
	CafeModelPrefabName: string;
	TextureDir: string;
	TextureEchelon: string;
	CollectionTexturePath: string;
	CollectionBGTexturePath: string;
	UseObjectHPBAR: bool;
	TextureBoss: string;
	TextureSkillCard: [string];
	TextureSkillCardForFormConversion: string;
	WeaponImagePath: string;
	WeaponLocalizeId: uint;
	DisplayEnemyInfo: bool;
	BodyRadius: long;
	RandomEffectRadius: long;
	HPBarHide: bool;
	HpBarHeight: float;
	HighlightFloaterHeight: float;
	EmojiOffsetX: float;
	EmojiOffsetY: float;
	MoveStartFrame: int;
	MoveEndFrame: int;
	JumpMotionFrame: int;
	AppearFrame: int;
	CanMove: bool;
	CanFix: bool;
	CanCrowdControl: bool;
	CanBattleItemMove: bool;
	IsAirUnit: bool;
	AirUnitHeight: long;
	Tags: [Tag];
	SecretStoneItemId: long;
	SecretStoneItemAmount: int;
	CharacterPieceItemId: long;
	CharacterPieceItemAmount: int;
	CombineRecipeId: long;
	InformationPacel: string;
	AnimationSSR: string;
	EnterStrategyAnimationName: string;
}

table CharacterGearExcelTable {
	DataList: [CharacterGearExcel];
}

table CharacterGearExcel {
	Id: long;
	CharacterId: long;
	statleveluptype: StatLevelUpType;
	Tier: long;
	NextTierEquipment: long;
	RecipeId: long;
	OpenFavorLevel: long;
	MaxLevel: long;
	PreviousSkillGroupId: string;
	AfterSkillGroupId: string;
	StatType: [EquipmentOptionType];
	MinStatValue: [long];
	MaxStatValue: [long];
	Icon: string;
	LocalizeEtcId: uint;
	Tags: [Tag];
}

table CharacterGearLevelExcelTable {
	DataList: [CharacterGearLevelExcel];
}

table CharacterGearLevelExcel {
	Level: int;
	TierLevelExp: [long];
	TotalExp: [long];
}

table CharacterIllustCoordinateExcelTable {
	DataList: [CharacterIllustCoordinateExcel];
}

table CharacterIllustCoordinateExcel {
	Id: long;
	CharacterBodyCenterX: float;
	CharacterBodyCenterY: float;
	DefaultScale: float;
	MinScale: float;
	MaxScale: float;
}

table CharacterLevelExcelTable {
	DataList: [CharacterLevelExcel];
}

table CharacterLevelExcel {
	Level: int;
	Exp: long;
	TotalExp: long;
}

table CharacterLevelStatFactorExcelTable {
	DataList: [CharacterLevelStatFactorExcel];
}

table CharacterLevelStatFactorExcel {
	Level: long;
	CriticalFactor: long;
	StabilityFactor: long;
	DefenceFactor: long;
	AccuracyFactor: long;
}

table CharacterSkillListExcelTable {
	DataList: [CharacterSkillListExcel];
}

table CharacterSkillListExcel {
	CharacterId: long;
	MinimumGradeCharacterWeapon: int;
	MinimumTierCharacterGear: int;
	IsFormConversion: bool;
	IsRootMotion: bool;
	IsMoveLeftRight: bool;
	UseRandomAnimation: bool;
	NormalSkillGroupId: [string];
	NormalSkillTimeLineIndex: [int];
	ExSkillGroupId: [string];
	ExSkillTimeLineIndex: [int];
	PublicSkillGroupId: [string];
	PublicSkillTimeLineIndex: [int];
	PassiveSkillGroupId: [string];
	LeaderSkillGroupId: [string];
	ExtraPassiveSkillGroupId: [string];
}

table CharacterStatExcelTable {
	DataList: [CharacterStatExcel];
}

table CharacterStatExcel {
	CharacterId: long;
	StabilityRate: long;
	StabilityPoint: long;
	AttackPower1: long;
	AttackPower100: long;
	MaxHP1: long;
	MaxHP100: long;
	DefensePower1: long;
	DefensePower100: long;
	HealPower1: long;
	HealPower100: long;
	DodgePoint: long;
	AccuracyPoint: long;
	CriticalPoint: long;
	CriticalResistPoint: long;
	CriticalDamageRate: long;
	CriticalDamageResistRate: long;
	BlockRate: long;
	HealEffectivenessRate: long;
	OppressionPower: long;
	OppressionResist: long;
	DefensePenetration1: long;
	DefensePenetration100: long;
	DefensePenetrationResist1: long;
	DefensePenetrationResist100: long;
	EnhanceExplosionRate: long;
	EnhancePierceRate: long;
	EnhanceMysticRate: long;
	EnhanceSonicRate: long;
	EnhanceSiegeRate: long;
	EnhanceNormalRate: long;
	EnhanceLightArmorRate: long;
	EnhanceHeavyArmorRate: long;
	EnhanceUnarmedRate: long;
	EnhanceElasticArmorRate: long;
	EnhanceStructureRate: long;
	EnhanceNormalArmorRate: long;
	ExtendBuffDuration: long;
	ExtendDebuffDuration: long;
	ExtendCrowdControlDuration: long;
	AmmoCount: long;
	AmmoCost: long;
	IgnoreDelayCount: long;
	NormalAttackSpeed: long;
	Range: long;
	InitialRangeRate: long;
	MoveSpeed: long;
	SightPoint: long;
	ActiveGauge: long;
	GroggyGauge: int;
	GroggyTime: int;
	StrategyMobility: long;
	ActionCount: long;
	StrategySightRange: long;
	DamageRatio: long;
	DamagedRatio: long;
	DamageRatio2Increase: long;
	DamageRatio2Decrease: long;
	DamagedRatio2Increase: long;
	DamagedRatio2Decrease: long;
	StreetBattleAdaptation: TerrainAdaptationStat;
	OutdoorBattleAdaptation: TerrainAdaptationStat;
	IndoorBattleAdaptation: TerrainAdaptationStat;
	RegenCost: long;
}

table CharacterStatLimitExcelTable {
	DataList: [CharacterStatLimitExcel];
}

table CharacterStatLimitExcel {
	Id: long;
	tacticentitytype: TacticEntityType;
	stattype: StatType;
	StatMinValue: long;
	StatMaxValue: long;
	StatRatioMinValue: long;
	StatRatioMaxValue: long;
}

table CharacterStatsDetailExcelTable {
	DataList: [CharacterStatsDetailExcel];
}

table CharacterStatsDetailExcel {
	Id: long;
	DetailShowStats: [StatType];
	IsStatsPercent: [bool];
}

table CharacterStatsTransExcelTable {
	DataList: [CharacterStatsTransExcel];
}

table CharacterStatsTransExcel {
	TransSupportStats: StatType;
	TransSupportStatsFactor: int;
}

table CharacterTranscendenceExcelTable {
	DataList: [CharacterTranscendenceExcel];
}

table CharacterTranscendenceExcel {
	CharacterId: long;
	MaxFavorLevel: [int];
	StatBonusRateAttack: [long];
	StatBonusRateHP: [long];
	StatBonusRateHeal: [long];
	RecipeId: [long];
	SkillGroupIdA: [string];
	SkillGroupIdB: [string];
	MaxlevelStar: [int];
}

table CharacterWeaponExcelTable {
	DataList: [CharacterWeaponExcel];
}

table CharacterWeaponExcel {
	Id: long;
	ImagePath: string;
	SetRecipe: long;
	statleveluptype: StatLevelUpType;
	AttackPower: long;
	AttackPower100: long;
	MaxHP: long;
	MaxHP100: long;
	HealPower: long;
	HealPower100: long;
	Tags: [Tag];
	Unlock: [bool];
	RecipeId: [long];
	MaxLevel: [int];
	PreviousSkillGroupId: [string];
	AfterSkillGroupId: [string];
	StatType: [EquipmentOptionType];
	StatValue: [long];
}

table CharacterWeaponExpBonusExcelTable {
	DataList: [CharacterWeaponExpBonusExcel];
}

table CharacterWeaponExpBonusExcel {
	weapontype: WeaponType;
	WeaponExpGrowthA: int;
	WeaponExpGrowthB: int;
	WeaponExpGrowthC: int;
	WeaponExpGrowthZ: int;
}

table CharacterWeaponLevelExcelTable {
	DataList: [CharacterWeaponLevelExcel];
}

table CharacterWeaponLevelExcel {
	Level: int;
	Exp: long;
	TotalExp: long;
}

table CheatCodeListExcelTable {
	DataList: [CheatCodeListExcel];
}

table CheatCodeListExcel {
	CheatCode: [string];
	InputTitle: [string];
	Desc: string;
}

table ClanAssistSlotExcelTable {
	DataList: [ClanAssistSlotExcel];
}

table ClanAssistSlotExcel {
	SlotId: long;
	echelontype: EchelonType;
	SlotNumber: long;
	AssistTermRewardPeriodFromSec: long;
	AssistRewardLimit: long;
	AssistRentRewardDailyMaxCount: long;
	AssistRentalFeeAmount: long;
}

table ClanChattingEmojiExcelTable {
	DataList: [ClanChattingEmojiExcel];
}

table ClanChattingEmojiExcel {
	Id: long;
	ImagePathKr: string;
	ImagePathJp: string;
	ImagePathTh: string;
	ImagePathTw: string;
	ImagePathEn: string;
}

table ClanRewardExcelTable {
	DataList: [ClanRewardExcel];
}

table ClanRewardExcel {
	clanrewardtype: ClanRewardType;
	echelontype: EchelonType;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
}

table CombatEmojiExcelTable {
	DataList: [CombatEmojiExcel];
}

table CombatEmojiExcel {
	UniqueId: long;
	emojievent: EmojiEvent;
	OrderOfPriority: int;
	EmojiDuration: bool;
	EmojiReversal: bool;
	EmojiTurnOn: bool;
	ShowEmojiDelay: int;
}

table ConquestCalculateExcelTable {
	DataList: [ConquestCalculateExcel];
}

table ConquestCalculateExcel {
	EventContentId: long;
	CalculateConditionParcelType: ParcelType;
	CalculateConditionParcelUniqueId: long;
	CalculateConditionParcelAmount: long;
}

table ConquestCameraSettingExcelTable {
	DataList: [ConquestCameraSettingExcel];
}

table ConquestCameraSettingExcel {
	Id: long;
	ConquestMapBoundaryOffsetLeft: float;
	ConquestMapBoundaryOffsetRight: float;
	ConquestMapBoundaryOffsetTop: float;
	ConquestMapBoundaryOffsetBottom: float;
	ConquestMapCenterOffsetX: float;
	ConquestMapCenterOffsetY: float;
	CameraAngle: float;
	CameraZoomMax: float;
	CameraZoomMin: float;
	CameraZoomDefault: float;
}

table ConquestErosionExcelTable {
	DataList: [ConquestErosionExcel];
}

table ConquestErosionExcel {
	EventContentId: long;
	Id: long;
	ErosionType: ConquestErosionType;
	Phase: int;
	PhaseAlarm: bool;
	StepIndex: int;
	PhaseStartConditionType: [ConquestConditionType];
	PhaseStartConditionParameter: [string];
	PhaseBeforeExposeConditionType: [ConquestConditionType];
	PhaseBeforeExposeConditionParameter: [string];
	ErosionBattleConditionParcelType: ParcelType;
	ErosionBattleConditionParcelUniqueId: long;
	ErosionBattleConditionParcelAmount: long;
	ConquestRewardId: long;
}

table ConquestErosionUnitExcelTable {
	DataList: [ConquestErosionUnitExcel];
}

table ConquestErosionUnitExcel {
	TilePrefabId: long;
	MassErosionUnitId: long;
	MassErosionUnitRotationY: float;
	IndividualErosionUnitId: long;
	IndividualErosionUnitRotationY: float;
}

table ConquestEventExcelTable {
	DataList: [ConquestEventExcel];
}

table ConquestEventExcel {
	EventContentId: long;
	MainStoryEventContentId: long;
	conquesteventtype: ConquestEventType;
	UseErosion: bool;
	UseUnexpectedEvent: bool;
	UseCalculate: bool;
	UseConquestObject: bool;
	EvnetMapGoalLocalize: string;
	EvnetMapNameLocalize: string;
	MapEnterScenarioGroupId: long;
	EvnetScenarioBG: string;
	ManageUnitChange: int;
	AssistCount: int;
	PlayTimeLimitInSeconds: int;
	AnimationUnitAmountMin: int;
	AnimationUnitAmountMax: int;
	AnimationUnitDelay: float;
	LocalizeUnexpected: string;
	LocalizeErosions: string;
	LocalizeStep: string;
	LocalizeTile: string;
	LocalizeMapInfo: string;
	LocalizeManage: string;
	LocalizeUpgrade: string;
	LocalizeTreasureBox: string;
	IndividualErosionDailyCount: long;
}

table ConquestGroupBonusExcelTable {
	DataList: [ConquestGroupBonusExcel];
}

table ConquestGroupBonusExcel {
	ConquestBonusId: long;
	School: [School];
	RecommandLocalizeEtcId: uint;
	BonusParcelType: [ParcelType];
	BonusId: [long];
	BonusCharacterCount1: [int];
	BonusPercentage1: [long];
	BonusCharacterCount2: [int];
	BonusPercentage2: [long];
	BonusCharacterCount3: [int];
	BonusPercentage3: [long];
}

table ConquestGroupBuffExcelTable {
	DataList: [ConquestGroupBuffExcel];
}

table ConquestGroupBuffExcel {
	ConquestBuffId: long;
	School: [School];
	RecommandLocalizeEtcId: uint;
	SkillGroupId: string;
}

table ConquestMapExcelTable {
	DataList: [ConquestMapExcel];
}

table ConquestMapExcel {
	EventContentId: long;
	DevName: string;
	MapDifficulty: StageDifficulty;
	StepIndex: int;
	ConquestMap: string;
	StepEnterScenarioGroupId: long;
	StepOpenConditionType: [ConquestConditionType];
	StepOpenConditionParameter: [string];
	MapGoalLocalize: string;
	StepGoalLocalize: string;
	StepNameLocalize: string;
	ConquestMapBG: string;
	CameraSettingId: long;
}

table ConquestObjectExcelTable {
	DataList: [ConquestObjectExcel];
}

table ConquestObjectExcel {
	Id: long;
	EventContentId: long;
	conquestobjecttype: ConquestObjectType;
	Key: uint;
	Name: string;
	PrefabName: string;
	ConquestRewardParcelType: ParcelType;
	ConquestRewardID: long;
	ConquestRewardAmount: int;
	Disposable: bool;
	StepIndex: int;
	StepObjectCount: int;
}

table ConquestPlayGuideExcelTable {
	DataList: [ConquestPlayGuideExcel];
}

table ConquestPlayGuideExcel {
	Id: long;
	EventContentId: long;
	DisplayOrder: int;
	GuideTitle: string;
	GuideImagePath: string;
	GuideText: string;
}

table ConquestProgressResourceExcelTable {
	DataList: [ConquestProgressResourceExcel];
}

table ConquestProgressResourceExcel {
	Id: long;
	EventContentId: long;
	Group: ConquestProgressType;
	ProgressResource: string;
	VoiceKr: [string];
	VoiceJp: [string];
	VoiceEn: [string];
	VoiceTw: [string];
	VoiceTh: [string];
	ProgressLocalizeCode: string;
}

table ConquestRewardExcelTable {
	DataList: [ConquestRewardExcel];
}

table ConquestRewardExcel {
	GroupId: long;
	rewardtag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	IsDisplayed: bool;
}

table ConquestStepExcelTable {
	DataList: [ConquestStepExcel];
}

table ConquestStepExcel {
	EventContentId: long;
	MapDifficulty: StageDifficulty;
	Step: int;
	StepGoalLocalize: string;
	StepEnterScenarioGroupId: long;
	StepEnterItemType: ParcelType;
	StepEnterItemUniqueId: long;
	StepEnterItemAmount: long;
	UnexpectedEventUnitId: [long];
	UnexpectedEventPrefab: string;
	TreasureBoxObjectId: long;
	TreasureBoxCountPerStepOpen: int;
}

table ConquestTileExcelTable {
	DataList: [ConquestTileExcel];
}

table ConquestTileExcel {
	Id: long;
	Name: string;
	EventId: long;
	Step: int;
	PrefabName: string;
	TileNameLocalize: string;
	TileImageName: string;
	Playable: bool;
	TileType: ConquestTileType;
	NotMapFog: bool;
	GroupBonusId: long;
	ConquestCostType: ParcelType;
	ConquestCostId: long;
	ConquestCostAmount: int;
	ManageCostType: ParcelType;
	ManageCostId: long;
	ManageCostAmount: int;
	ConquestRewardId: long;
	MassErosionId: long;
	Upgrade2CostType: ParcelType;
	Upgrade2CostId: long;
	Upgrade2CostAmount: int;
	Upgrade3CostType: ParcelType;
	Upgrade3CostId: long;
	Upgrade3CostAmount: int;
}

table ConquestUnexpectedEventExcelTable {
	DataList: [ConquestUnexpectedEventExcel];
}

table ConquestUnexpectedEventExcel {
	EventContentId: long;
	UnexpectedEventConditionType: ParcelType;
	UnexpectedEventConditionUniqueId: long;
	UnexpectedEventConditionAmount: long;
	UnexpectedEventOccurDailyLimitCount: int;
	UnitCountPerStep: int;
	UnexpectedEventPrefab: [string];
	UnexpectedEventUnitId: [long];
}

table ConquestUnitExcelTable {
	DataList: [ConquestUnitExcel];
}

table ConquestUnitExcel {
	Id: long;
	Key: uint;
	Name: string;
	PrefabName: string;
	Scale: float;
	ShieldEffectScale: float;
	UnitFxPrefabName: string;
	PointAnimation: string;
	EnemyType: ConquestEnemyType;
	Team: ConquestTeamType;
	UnitGroup: long;
	PrevUnitGroup: long;
	BattleDuration: long;
	GroundId: long;
	StarGoal: [StarGoalType];
	StarGoalAmount: [int];
	GroupBuffId: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	ManageEchelonStageEnterCostType: ParcelType;
	ManageEchelonStageEnterCostId: long;
	ManageEchelonStageEnterCostAmount: int;
	EnterScenarioGroupId: long;
	ClearScenarioGroupId: long;
	ConquestRewardId: long;
	stagetopography: StageTopography;
	RecommandLevel: int;
	TacticRewardExp: long;
	FixedEchelonId: long;
}

table ConstArenaExcelTable {
	DataList: [ConstArenaExcel];
}

table ConstArenaExcel {
	AttackCoolTime: long;
	BattleDuration: long;
	DefenseCoolTime: long;
	TSSStartCoolTime: long;
	EndAlarm: long;
	TimeRewardMaxAmount: long;
	EnterCostType: ParcelType;
	EnterCostId: long;
	TicketCost: long;
	DailyRewardResetTime: string;
	OpenScenarioId: string;
	CharacterSlotHideRank: [long];
	MapSlotHideRank: long;
	RelativeOpponentRankStart: [long];
	RelativeOpponentRankEnd: [long];
	ModifiedStatType: [StatType];
	StatMulFactor: [long];
	StatSumFactor: [long];
	NPCName: [string];
	NPCMainCharacterCount: long;
	NPCSupportCharacterCount: long;
	NPCCharacterSkillLevel: long;
	TimeSpanInDaysForBattleHistory: long;
	HiddenCharacterImagePath: string;
	DefenseVictoryRewardMaxCount: long;
	TopRankerCountLimit: long;
	AutoRefreshIntervalMilliSeconds: long;
	EchelonSettingIntervalMilliSeconds: long;
	SkipAllowedTimeMilliSeconds: long;
	ShowSeasonChangeInfoStartTime: string;
	ShowSeasonChangeInfoEndTime: string;
	ShowSeasonId: long;
}

table ConstAudioExcelTable {
	DataList: [ConstAudioExcel];
}

table ConstAudioExcel {
	DefaultSnapShotName: string;
	BattleSnapShotName: string;
	RaidSnapShotName: string;
	ExSkillCutInSnapShotName: string;
}

table ConstCombatExcelTable {
	DataList: [ConstCombatExcel];
}

table ConstCombatExcel {
	SkillHandCount: int;
	DyingTime: int;
	BuffIconBlinkTime: int;
	ShowBufficonEXSkill: bool;
	ShowBufficonPassiveSkill: bool;
	ShowBufficonExtraPassiveSkill: bool;
	ShowBufficonLeaderSkill: bool;
	ShowBufficonGroundPassiveSkill: bool;
	SuppliesConditionStringId: string;
	PublicSpeechBubbleOffsetX: float;
	PublicSpeechBubbleOffsetY: float;
	PublicSpeechBubbleOffsetZ: float;
	PublicSpeechDuration: float;
	ShowRaidListCount: int;
	MaxRaidTicketCount: long;
	MaxRaidBossSkillSlot: long;
	EngageTimelinePath: string;
	EngageWithSupporterTimelinePath: string;
	VictoryTimelinePath: string;
	TimeLimitAlarm: long;
	EchelonMaxCommonCost: int;
	EchelonInitCommonCost: int;
	SkillSlotCoolTime: long;
	EnemyRegenCost: long;
	ChampionRegenCost: long;
	PlayerRegenCostDelay: long;
	CrowdControlFactor: long;
	RaidOpenScenarioId: string;
	EliminateRaidOpenScenarioId: string;
	DefenceConstA: long;
	DefenceConstB: long;
	DefenceConstC: long;
	DefenceConstD: long;
	AccuracyConstA: long;
	AccuracyConstB: long;
	AccuracyConstC: long;
	AccuracyConstD: long;
	CriticalConstA: long;
	CriticalConstB: long;
	CriticalConstC: long;
	CriticalConstD: long;
	MaxGroupBuffLevel: int;
	EmojiDefaultTime: int;
	TimeLineActionRotateSpeed: long;
	BodyRotateSpeed: long;
	NormalTimeScale: long;
	FastTimeScale: long;
	BulletTimeScale: long;
	UIDisplayDelayAfterSkillCutIn: long;
	UseInitialRangeForCoverMove: bool;
	SlowTimeScale: long;
	AimIKMinDegree: float;
	AimIKMaxDegree: float;
	MinimumClearTime: int;
	MinimumClearLevelGap: int;
	CheckCheaterMaxUseCostNonArena: int;
	CheckCheaterMaxUseCostArena: int;
	AllowedMaxTimeScale: long;
	RandomAnimationOutput: long;
	SummonedTeleportDistance: long;
	ArenaMinimumClearTime: int;
	WORLDBOSSBATTLELITTLE: long;
	WORLDBOSSBATTLELITTLETw: long;
	WORLDBOSSBATTLELITTLEAsia: long;
	WORLDBOSSBATTLELITTLENa: long;
	WORLDBOSSBATTLELITTLEGlobal: long;
	WORLDBOSSBATTLEMIDDLE: long;
	WORLDBOSSBATTLEMIDDLETw: long;
	WORLDBOSSBATTLEMIDDLEAsia: long;
	WORLDBOSSBATTLEMIDDLENa: long;
	WORLDBOSSBATTLEMIDDLEGlobal: long;
	WORLDBOSSBATTLEHIGH: long;
	WORLDBOSSBATTLEHIGHTw: long;
	WORLDBOSSBATTLEHIGHAsia: long;
	WORLDBOSSBATTLEHIGHNa: long;
	WORLDBOSSBATTLEHIGHGlobal: long;
	WORLDBOSSBATTLEVERYHIGH: long;
	WORLDBOSSBATTLEVERYHIGHTw: long;
	WORLDBOSSBATTLEVERYHIGHAsia: long;
	WORLDBOSSBATTLEVERYHIGHNa: long;
	WORLDBOSSBATTLEVERYHIGHGlobal: long;
	WorldRaidAutoSyncTermSecond: long;
	WorldRaidBossHpDecreaseTerm: long;
	WorldRaidBossParcelReactionDelay: long;
	RaidRankingJumpMinimumWaitingTime: long;
	EffectTeleportDistance: float;
	AuraExitThresholdMargin: long;
}

table ConstCommonExcelTable {
	DataList: [ConstCommonExcel];
}

table ConstCommonExcel {
	CampaignMainStageMaxRank: int;
	CampaignMainStageBestRecord: int;
	HardAdventurePlayCountRecoverDailyNumber: int;
	HardStageCount: int;
	TacticRankClearTime: int;
	BaseTimeScale: long;
	GachaPercentage: int;
	AcademyFavorZoneId: long;
	CafePresetSlotCount: int;
	CafeMonologueIntervalMillisec: long;
	CafeMonologueDefaultDuration: long;
	CafeBubbleIdleDurationMilliSec: long;
	FindGiftTimeLimit: int;
	CafeVisitProbabilityBase: int;
	CafeVisitProbabilityTagBonus: int;
	CafeAutoChargePeriodInMsc: int;
	CafeProductionDecimalPosition: int;
	CafeSetGroupApplyCount: int;
	WeekDungeonFindGiftRewardLimitCount: int;
	StageFailedCurrencyRefundRate: int;
	EnterDeposit: int;
	AccountMaxLevel: int;
	MainSquadExpBonus: int;
	SupportSquadExpBonus: int;
	AccountExpRatio: int;
	MissionToastLifeTime: int;
	ExpItemInsertLimit: int;
	ExpItemInsertAccelTime: int;
	CharacterLvUpCoefficient: int;
	EquipmentLvUpCoefficient: int;
	ExpEquipInsertLimit: int;
	EquipLvUpCoefficient: int;
	NicknameLength: int;
	CraftDuration: [int];
	CraftLimitTime: int;
	ShiftingCraftDuration: [int];
	ShiftingCraftTicketConsumeAmount: int;
	ShiftingCraftSlotMaxCapacity: int;
	CraftTicketItemUniqueId: int;
	CraftTicketConsumeAmount: int;
	AcademyEnterCostType: ParcelType;
	AcademyEnterCostId: long;
	AcademyTicketCost: int;
	MassangerMessageExpireDay: int;
	CraftLeafNodeGenerateLv1Count: int;
	CraftLeafNodeGenerateLv2Count: int;
	TutorialGachaShopId: int;
	TutorialGachaGoodsId: int;
	EquipmentSlotOpenLevel: [int];
	ScenarioAutoDelayMillisec: float;
	JoinOrCreateClanCoolTimeFromHour: long;
	ClanMaxMember: long;
	ClanSearchResultCount: long;
	ClanMaxApplicant: long;
	ClanRejoinCoolTimeFromSecond: long;
	ClanWordBalloonMaxCharacter: int;
	CallNameRenameCoolTimeFromHour: long;
	CallNameMinimumLength: long;
	CallNameMaximumLength: long;
	LobbyToScreenModeWaitTime: long;
	ScreenshotToLobbyButtonHideDelay: long;
	PrologueScenarioID01: long;
	PrologueScenarioID02: long;
	TutorialHardStage11: long;
	TutorialSpeedButtonStage: long;
	TutorialCharacterDefaultCount: long;
	TutorialShopCategoryType: ShopCategoryType;
	AdventureStrategyPlayTimeLimitInSeconds: long;
	WeekDungoenTacticPlayTimeLimitInSeconds: long;
	RaidTacticPlayTimeLimitInSeconds: long;
	RaidOpponentListAmount: long;
	CraftBaseGoldRequired: [long];
	PostExpiredDayAttendance: int;
	PostExpiredDayInventoryOverflow: int;
	PostExpiredDayGameManager: int;
	UILabelCharacterWrap: string;
	RequestTimeOut: float;
	MailStorageSoftCap: int;
	MailStorageHardCap: int;
	ClearDeckStorageSize: int;
	ClearDeckNoStarViewCount: int;
	ClearDeck1StarViewCount: int;
	ClearDeck2StarViewCount: int;
	ClearDeck3StarViewCount: int;
	ExSkillLevelMax: int;
	PublicSkillLevelMax: int;
	PassiveSkillLevelMax: int;
	ExtraPassiveSkillLevelMax: int;
	AccountCommentMaxLength: int;
	FormationCollider01OffsetX: long;
	FormationCollider01OffsetY: long;
	FormationCollider01OffsetZ: long;
	FormationCollider01SizeX: long;
	FormationCollider01SizeY: long;
	FormationCollider01SizeZ: long;
	FormationCollider02OffsetX: long;
	FormationCollider02OffsetY: long;
	FormationCollider02OffsetZ: long;
	FormationCollider02SizeX: long;
	FormationCollider02SizeY: long;
	FormationCollider02SizeZ: long;
	FormationCollider03OffsetX: long;
	FormationCollider03OffsetY: long;
	FormationCollider03OffsetZ: long;
	FormationCollider03SizeX: long;
	FormationCollider03SizeY: long;
	FormationCollider03SizeZ: long;
	ShowFurnitureTag: bool;
	CafeSummonCoolTimeFromHour: int;
	LimitedStageDailyClearCount: long;
	LimitedStageEntryTimeLimit: long;
	LimitedStageEntryTimeBuffer: long;
	LimitedStagePointAmount: long;
	LimitedStagePointPerApMin: long;
	LimitedStagePointPerApMax: long;
	AccountLinkReward: int;
	MonthlyProductCheckDays: int;
	WeaponLvUpCoefficient: int;
	ShowRaidMyListCount: int;
	MaxLevelExpMasterCoinRatio: int;
	RaidEnterCostType: ParcelType;
	RaidEnterCostId: long;
	RaidTicketCost: long;
	TimeAttackDungeonScenarioId: string;
	TimeAttackDungoenPlayCountPerTicket: int;
	TimeAttackDungeonEnterCostType: ParcelType;
	TimeAttackDungeonEnterCostId: long;
	TimeAttackDungeonEnterCost: long;
	ClanLeaderTransferLastLoginLimit: long;
	MonthlyProductRepurchasePopupLimit: int;
	CommonFavorItemTags: [Tag];
	MaxApMasterCoinPerWeek: long;
	CraftOpenExpTier1: long;
	CraftOpenExpTier2: long;
	CraftOpenExpTier3: long;
	CharacterEquipmentGearSlot: long;
	BirthDayDDay: int;
	RecommendedFriendsLvDifferenceLimit: int;
	DDosDetectCount: int;
	DDosCheckIntervalInSeconds: int;
	MaxFriendsCount: int;
	MaxFriendsRequest: int;
	FriendsSearchRequestCount: int;
	FriendsMaxApplicant: int;
	IdCardDefaultCharacterId: long;
	IdCardDefaultBgId: long;
	WorldRaidGemEnterCost: long;
	WorldRaidGemEnterAmout: long;
	FriendIdCardCommentMaxLength: long;
	FormationPresetNumberOfEchelonTab: int;
	FormationPresetNumberOfEchelon: int;
	FormationPresetRecentNumberOfEchelon: int;
	FormationPresetEchelonTabTextLength: int;
	FormationPresetEchelonSlotTextLength: int;
	CallnameLengthEn: int;
	CallnameLengthKr: int;
	NicknameLengthKr: int;
	ClanNameLength: int;
	CafePresetEditNameLength: int;
	FormationPresetEchelonTabTextLengthKr: int;
	FormationPresetEchelonSlotTextLengthKr: int;
	CharProfileRowIntervalKr: int;
	CharProfileRowIntervalJp: int;
	CharProfilePopupRowIntervalKr: int;
	CharProfilePopupRowIntervalJp: int;
	LowMemorySizeGL: long;
	BeforehandGachaCount1: int;
	BeforehandGachaGroup1: int;
}

table ConstConquestExcelTable {
	DataList: [ConstConquestExcel];
}

table ConstConquestExcel {
	ManageUnitChange: int;
	AssistCount: int;
	PlayTimeLimitInSeconds: int;
	AnimationUnitAmountMin: int;
	AnimationUnitAmountMax: int;
	AnimationUnitDelay: float;
}

table ConstEventCommonExcelTable {
	DataList: [ConstEventCommonExcel];
}

table ConstEventCommonExcel {
	EventContentHardStageCount: int;
	EventStrategyPlayTimeLimitInSeconds: long;
	SubEventChangeLimitSeconds: long;
	SubEventInstantClear: bool;
	CardShopProbWeightCount: long;
	CardShopProbWeightRarity: Rarity;
}

table ConstMiniGameShootingExcelTable {
	DataList: [ConstMiniGameShootingExcel];
}

table ConstMiniGameShootingExcel {
	NormalStageId: long;
	NormalSectionCount: int;
	HardStageId: long;
	HardSectionCount: int;
	LeftPlayerCharacterId: long;
	RightPlayerCharacterId: long;
	HiddenPlayerCharacterId: long;
	CameraSmoothTime: float;
	SpawnEffectPath: string;
	WaitTimeAfterSpawn: float;
}

table ConstMinigameTBGExcelTable {
	DataList: [ConstMinigameTBGExcel];
}

table ConstMinigameTBGExcel {
	ConquestMapBoundaryOffsetLeft: float;
	ConquestMapBoundaryOffsetRight: float;
	ConquestMapBoundaryOffsetTop: float;
	ConquestMapBoundaryOffsetBottom: float;
	ConquestMapCenterOffsetX: float;
	ConquestMapCenterOffsetY: float;
	CameraAngle: float;
	CameraZoomMax: float;
	CameraZoomMin: float;
	CameraZoomDefault: float;
}

table ConstNewbieContentExcelTable {
	DataList: [ConstNewbieContentExcel];
}

table ConstNewbieContentExcel {
	NewbieGachaReleaseDate: string;
	NewbieGachaCheckDays: int;
	NewbieGachaTokenGraceTime: int;
	NewbieAttendanceReleaseDate: string;
	NewbieAttendanceStartableEndDay: int;
	NewbieAttendanceEndDay: int;
}

table ConstStrategyExcelTable {
	DataList: [ConstStrategyExcel];
}

table ConstStrategyExcel {
	HexaMapBoundaryOffset: float;
	HexaMapStartCameraOffset: float;
	CameraZoomMax: float;
	CameraZoomMin: float;
	CameraZoomDefault: float;
	HealCostType: CurrencyTypes;
	HealCostAmount: [long];
	CanHealHpRate: int;
	PlayTimeLimitInSeconds: long;
	AdventureEchelonCount: int;
	RaidEchelonCount: int;
	DefaultEchelonCount: int;
	EventContentEchelonCount: int;
	TimeAttackDungeonEchelonCount: int;
	WorldRaidEchelonCount: int;
	TacticSkipClearTimeSeconds: int;
	TacticSkipFramePerSecond: int;
	ConquestEchelonCount: int;
	StoryEchelonCount: int;
	MultiSweepPresetCount: int;
	MultiSweepPresetNameMaxLength: int;
}

table ContentEnterCostReduceExcelTable {
	DataList: [ContentEnterCostReduceExcel];
}

table ContentEnterCostReduceExcel {
	EnterCostReduceGroupId: long;
	contenttype: ContentType;
	StageId: long;
	ReduceEnterCostType: ParcelType;
	ReduceEnterCostId: long;
	ReduceAmount: long;
}

table ContentsFeverExcelTable {
	DataList: [ContentsFeverExcel];
}

table ContentsFeverExcel {
	ConditionContent: FeverBattleType;
	SkillFeverCheckCondition: SkillPriorityCheckTarget;
	SkillCostFever: long;
	FeverStartTime: long;
	FeverDurationTime: long;
}

table ContentsScenarioExcelTable {
	DataList: [ContentsScenarioExcel];
}

table ContentsScenarioExcel {
	Id: uint;
	LocalizeId: uint;
	scenariocontenttype: ScenarioContentType;
	ScenarioGroupId: [long];
}

table ContentsShortcutExcelTable {
	DataList: [ContentsShortcutExcel];
}

table ContentsShortcutExcel {
	UniqueId: long;
	contenttype: ContentType;
	EventContentId: long;
	ScenarioModeVolume: long;
	ScenarioModeChapter: long;
	ShortcutOpenTime: string;
	ShortcutCloseTime: string;
	ConditionContentId: long;
	ConquestMapDifficulty: StageDifficulty;
	ConquestStepIndex: int;
	ShortcutContentId: long;
	ShortcutUIName: [string];
	Localize: string;
}

table CouponStuffExcelTable {
	DataList: [CouponStuffExcel];
}

table CouponStuffExcel {
	StuffId: long;
	parceltype: ParcelType;
	ParcelId: long;
	LimitAmount: int;
	CouponStuffNameLocalizeKey: string;
}

table CumulativeTimeRewardExcelTable {
	DataList: [CumulativeTimeRewardExcel];
}

table CumulativeTimeRewardExcel {
	Id: long;
	Description: string;
	StartDate: string;
	EndDate: string;
	TimeCondition: [long];
	RewardParcelType: [ParcelType];
	RewardId: [long];
	RewardAmount: [int];
}

table CurrencyExcelTable {
	DataList: [CurrencyExcel];
}

table CurrencyExcel {
	ID: long;
	LocalizeEtcId: uint;
	CurrencyType: CurrencyTypes;
	CurrencyName: string;
	Icon: string;
	rarity: Rarity;
	AutoChargeMsc: int;
	AutoChargeAmount: int;
	currencyoverchargetype: CurrencyOverChargeType;
	currencyadditionalchargetype: CurrencyAdditionalChargeType;
	ChargeLimit: long;
	OverChargeLimit: long;
	SpriteName: string;
	dailyrefilltype: DailyRefillType;
	DailyRefillAmount: long;
	DailyRefillTime: [long];
}

table DefaultCharacterExcelTable {
	DataList: [DefaultCharacterExcel];
}

table DefaultCharacterExcel {
	CharacterId: long;
	FavoriteCharacter: bool;
	Level: int;
	Exp: int;
	FavorExp: int;
	FavorRank: int;
	StarGrade: int;
	ExSkillLevel: int;
	PassiveSkillLevel: int;
	ExtraPassiveSkillLevel: int;
	CommonSkillLevel: int;
	LeaderSkillLevel: int;
}

table DefaultEchelonExcelTable {
	DataList: [DefaultEchelonExcel];
}

table DefaultEchelonExcel {
	EchlonId: int;
	LeaderId: long;
	MainId: [long];
	SupportId: [long];
	TssId: long;
}

table DefaultFurnitureExcelTable {
	DataList: [DefaultFurnitureExcel];
}

table DefaultFurnitureExcel {
	Id: long;
	Location: FurnitureLocation;
	PositionX: float;
	PositionY: float;
	Rotation: float;
}

table DefaultMailExcelTable {
	DataList: [DefaultMailExcel];
}

table DefaultMailExcel {
	Id: long;
	LocalizeCodeId: uint;
	mailtype: MailType;
	MailSendPeriodFrom: string;
	MailSendPeriodTo: string;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table DefaultParcelExcelTable {
	DataList: [DefaultParcelExcel];
}

table DefaultParcelExcel {
	parceltype: ParcelType;
	ParcelId: long;
	ParcelAmount: long;
}

table EchelonConstraintExcelTable {
	DataList: [EchelonConstraintExcel];
}

table EchelonConstraintExcel {
	GroupId: long;
	IsWhiteList: bool;
	CharacterId: [long];
	PersonalityId: [long];
	weapontype: WeaponType;
	school: School;
	club: Club;
	Role: TacticRole;
}

table EliminateRaidRankingRewardExcelTable {
	DataList: [EliminateRaidRankingRewardExcel];
}

table EliminateRaidRankingRewardExcel {
	RankingRewardGroupId: long;
	Id: long;
	RankStart: long;
	RankEnd: long;
	RankStartTw: long;
	RankEndTw: long;
	RankStartAsia: long;
	RankEndAsia: long;
	RankStartNa: long;
	RankEndNa: long;
	RankStartGlobal: long;
	RankEndGlobal: long;
	PercentRankStart: long;
	PercentRankEnd: long;
	Tier: int;
	RewardParcelType: [ParcelType];
	RewardParcelUniqueId: [long];
	RewardParcelUniqueName: [string];
	RewardParcelAmount: [long];
}

table EliminateRaidSeasonManageExcelTable {
	DataList: [EliminateRaidSeasonManageExcel];
}

table EliminateRaidSeasonManageExcel {
	SeasonId: long;
	SeasonDisplay: long;
	SeasonStartData: string;
	SeasonEndData: string;
	SettlementEndDate: string;
	LobbyTableBGPath: string;
	LobbyScreenBGPath: string;
	OpenRaidBossGroup01: string;
	OpenRaidBossGroup02: string;
	OpenRaidBossGroup03: string;
	RankingRewardGroupId: long;
	MaxSeasonRewardGauage: int;
	StackedSeasonRewardGauge: [long];
	SeasonRewardId: [long];
}

table EliminateRaidStageExcelTable {
	DataList: [EliminateRaidStageExcel];
}

table EliminateRaidStageExcel {
	Id: long;
	UseBossIndex: bool;
	UseBossAIPhaseSync: bool;
	RaidBossGroup: string;
	RaidEnterCostType: ParcelType;
	RaidEnterCostId: long;
	RaidEnterCostAmount: int;
	BossSpinePath: string;
	PortraitPath: string;
	BGPath: string;
	RaidCharacterId: long;
	BossCharacterId: [long];
	difficulty: Difficulty;
	DifficultyOpenCondition: bool;
	IsOpen: bool;
	MaxPlayerCount: long;
	RaidRoomLifeTime: int;
	BattleDuration: long;
	GroundId: long;
	GroundDevName: string;
	EnterTimeLine: string;
	tacticenvironment: TacticEnvironment;
	SeasonDamageRatio: int;
	DefaultClearScore: long;
	MaximumScore: long;
	PerSecondMinusScore: long;
	HPPercentScore: long;
	MinimumAcquisitionScore: long;
	MaximumAcquisitionScore: long;
	RaidRewardGroupId: long;
	RaidRewardDevName: string;
	BattleReadyTimelinePath: [string];
	BattleReadyTimelinePhaseStart: [int];
	BattleReadyTimelinePhaseEnd: [int];
	VictoryTimelinePath: string;
	PhaseChangeTimelinePath: string;
	TimeLinePhase: long;
	EnterScenarioKey: uint;
	ClearScenarioKey: uint;
	InitSupplyCount: int;
	ShowSkillCard: bool;
	BossBGInfoKey: uint;
}

table EliminateRaidStageRewardExcelTable {
	DataList: [EliminateRaidStageRewardExcel];
}

table EliminateRaidStageRewardExcel {
	GroupId: long;
	IsClearStageRewardHideInfo: bool;
	ClearStageRewardProb: long;
	ClearStageRewardParcelType: ParcelType;
	ClearStageRewardParcelUniqueID: long;
	ClearStageRewardParcelUniqueName: string;
	ClearStageRewardAmount: long;
}

table EliminateRaidStageSeasonRewardExcelTable {
	DataList: [EliminateRaidStageSeasonRewardExcel];
}

table EliminateRaidStageSeasonRewardExcel {
	SeasonRewardId: long;
	SeasonRewardParcelType: [ParcelType];
	SeasonRewardParcelUniqueId: [long];
	SeasonRewardParcelUniqueName: [string];
	SeasonRewardAmount: [long];
}

table EmblemExcelTable {
	DataList: [EmblemExcel];
}

table EmblemExcel {
	Id: long;
	LoczlizeEtcId: uint;
	Category: EmblemCategory;
	rarity: Rarity;
	IconPath: string;
	EmblemPath: string;
	EmblemTextLocalizeId: uint;
	EmblemTextOffsetX: float;
	EmblemTextOffsetY: float;
	DisplayType: EmblemDisplayType;
	DisplayStartDate: string;
	DisplayEndDate: string;
	DislpayFavorLevel: int;
	CheckPassType: EmblemCheckPassType;
	CheckPassParameter: long;
	CheckPassCount: long;
}

table EmoticonSpecialExcelTable {
	DataList: [EmoticonSpecialExcel];
}

table EmoticonSpecialExcel {
	UniqueId: long;
	CharacterUniqueId: long;
	Random: string;
}

table EquipmentExcelTable {
	DataList: [EquipmentExcel];
}

table EquipmentExcel {
	Id: long;
	equipmentcategory: EquipmentCategory;
	rarity: Rarity;
	LocalizeEtcId: uint;
	Wear: bool;
	MaxLevel: int;
	RecipeId: int;
	TierInit: long;
	NextTierEquipment: long;
	StackableMax: int;
	Icon: string;
	ImageName: string;
	Tags: [Tag];
	CraftQuality: long;
	ShiftingCraftQuality: long;
	ShopCategory: [ShopCategoryType];
	ShortcutTypeId: long;
}

table EquipmentLevelExcelTable {
	DataList: [EquipmentLevelExcel];
}

table EquipmentLevelExcel {
	Level: int;
	TierLevelExp: [long];
	TotalExp: [long];
}

table EquipmentStatExcelTable {
	DataList: [EquipmentStatExcel];
}

table EquipmentStatExcel {
	EquipmentId: long;
	statleveluptype: StatLevelUpType;
	StatType: [EquipmentOptionType];
	MinStat: [long];
	MaxStat: [long];
	LevelUpInsertLimit: int;
	LevelUpFeedExp: long;
	LevelUpFeedCostCurrency: CurrencyTypes;
	LevelUpFeedCostAmount: long;
	equipmentcategory: EquipmentCategory;
	LevelUpFeedAddExp: long;
	DefaultMaxLevel: int;
	TranscendenceMax: int;
	DamageFactorGroupId: string;
}

table EventContentArchiveBannerOffsetExcelTable {
	DataList: [EventContentArchiveBannerOffsetExcel];
}

table EventContentArchiveBannerOffsetExcel {
	EventContentId: long;
	OffsetX: float;
	OffsetY: float;
	ScaleX: float;
	ScaleY: float;
}

table EventContentBoxGachaElementExcelTable {
	DataList: [EventContentBoxGachaElementExcel];
}

table EventContentBoxGachaElementExcel {
	EventContentId: long;
	Id: long;
	Round: long;
	GroupId: long;
}

table EventContentBoxGachaManageExcelTable {
	DataList: [EventContentBoxGachaManageExcel];
}

table EventContentBoxGachaManageExcel {
	EventContentId: long;
	Round: long;
	GoodsId: long;
	IsLoop: bool;
}

table EventContentBoxGachaShopExcelTable {
	DataList: [EventContentBoxGachaShopExcel];
}

table EventContentBoxGachaShopExcel {
	EventContentId: long;
	GroupId: long;
	GroupElementAmount: long;
	Round: long;
	IsLegacy: bool;
	IsPrize: bool;
	GoodsId: [long];
	DisplayOrder: long;
}

table EventContentBuffExcelTable {
	DataList: [EventContentBuffExcel];
}

table EventContentBuffExcel {
	EventContentBuffId: long;
	IsBuff: bool;
	CharacterTag: Tag;
	EnumType: EventContentBuffFindRule;
	EnumTypeValue: [string];
	SkillGroupId: string;
	IconPath: string;
	SpriteName: string;
	BuffDescriptionLocalizeCodeId: string;
}

table EventContentBuffGroupExcelTable {
	DataList: [EventContentBuffGroupExcel];
}

table EventContentBuffGroupExcel {
	EventContentId: long;
	BuffContentId: long;
	BuffGroupId: long;
	BuffGroupNameLocalizeCodeId: string;
	EventContentBuffId1: long;
	BuffNameLocalizeCodeId1: string;
	BuffDescriptionIconPath1: string;
	EventContentBuffId2: long;
	BuffNameLocalizeCodeId2: string;
	BuffDescriptionIconPath2: string;
	EventContentDebuffId: long;
	DebuffNameLocalizeCodeId: string;
	DeBuffDescriptionIconPath: string;
	BuffGroupProb: long;
}

table EventContentCardExcelTable {
	DataList: [EventContentCardExcel];
}

table EventContentCardExcel {
	CardGroupId: int;
	EventContentId: long;
	LocalizeEtcId: uint;
	IconPath: string;
	BackIconPath: string;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
}

table EventContentCardShopExcelTable {
	DataList: [EventContentCardShopExcel];
}

table EventContentCardShopExcel {
	EventContentId: long;
	Id: long;
	rarity: Rarity;
	CostGoodsId: long;
	CardGroupId: int;
	IsLegacy: bool;
	RefreshGroup: int;
	Prob: int;
	ProbWeight1: int;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentChangeExcelTable {
	DataList: [EventContentChangeExcel];
}

table EventContentChangeExcel {
	EventContentId: long;
	ChangeCount: long;
	IsLast: bool;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	ChangeCostType: ParcelType;
	ChangeCostId: long;
	ChangeCostAmount: int;
}

table EventContentChangeScenarioExcelTable {
	DataList: [EventContentChangeScenarioExcel];
}

table EventContentChangeScenarioExcel {
	EventContentId: long;
	ChangeType: EventChangeType;
	ChangeCount: long;
	ScenarioGroupId: long;
}

table EventContentCharacterBonusExcelTable {
	DataList: [EventContentCharacterBonusExcel];
}

table EventContentCharacterBonusExcel {
	EventContentId: long;
	CharacterId: long;
	EventContentItemType: [EventContentItemType];
	BonusPercentage: [long];
}

table EventContentCollectionExcelTable {
	DataList: [EventContentCollectionExcel];
}

table EventContentCollectionExcel {
	Id: long;
	EventContentId: long;
	GroupId: long;
	UnlockConditionType: EventCollectionUnlockType;
	UnlockConditionParameter: long;
	UnlockConditionCount: long;
	IsObject: bool;
	IsHorizon: bool;
	EmblemResource: string;
	ThumbResource: string;
	FullResource: string;
	LocalizeEtcId: uint;
	SubNameLocalizeCodeId: string;
}

table EventContentCurrencyItemExcelTable {
	DataList: [EventContentCurrencyItemExcel];
}

table EventContentCurrencyItemExcel {
	EventContentId: long;
	eventcontentitemtype: EventContentItemType;
	ItemUniqueId: long;
}

table EventContentDebuffRewardExcelTable {
	DataList: [EventContentDebuffRewardExcel];
}

table EventContentDebuffRewardExcel {
	EventContentId: long;
	EventStageId: long;
	eventcontentitemtype: EventContentItemType;
	RewardPercentage: long;
}

table EventContentDiceRaceEffectExcelTable {
	DataList: [EventContentDiceRaceEffectExcel];
}

table EventContentDiceRaceEffectExcel {
	EventContentId: long;
	eventcontentdiceraceresulttype: EventContentDiceRaceResultType;
	IsDiceResult: bool;
	AniClip: string;
	VoiceClips: [string];
}

table EventContentDiceRaceExcelTable {
	DataList: [EventContentDiceRaceExcel];
}

table EventContentDiceRaceExcel {
	EventContentId: long;
	DiceCostGoodsId: long;
	SkipableLap: int;
	DiceRacePawnPrefab: string;
	IsUsingFixedDice: bool;
	DiceRaceEventType: [string];
}

table EventContentDiceRaceNodeExcelTable {
	DataList: [EventContentDiceRaceNodeExcel];
}

table EventContentDiceRaceNodeExcel {
	EventContentId: long;
	NodeId: long;
	eventcontentdiceracenodetype: EventContentDiceRaceNodeType;
	MoveForwardTypeArg: int;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table EventContentDiceRaceProbExcelTable {
	DataList: [EventContentDiceRaceProbExcel];
}

table EventContentDiceRaceProbExcel {
	EventContentId: long;
	eventcontentdiceraceresulttype: EventContentDiceRaceResultType;
	CostItemId: long;
	CostItemAmount: int;
	DiceResult: int;
	Prob: int;
}

table EventContentDiceRaceTotalRewardExcelTable {
	DataList: [EventContentDiceRaceTotalRewardExcel];
}

table EventContentDiceRaceTotalRewardExcel {
	EventContentId: long;
	RewardID: long;
	RequiredLapFinishCount: int;
	DisplayLapFinishCount: int;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentExcelTable {
	DataList: [EventContentExcel];
}

table EventContentExcel {
	Id: long;
	DevName: string;
	EventContentId: long;
	BgImagePath: string;
}

table EventContentFortuneGachaExcelTable {
	DataList: [EventContentFortuneGachaExcel];
}

table EventContentFortuneGachaExcel {
	FortuneGachaGroupId: int;
	LocalizeEtcId: uint;
	IconPath: string;
}

table EventContentFortuneGachaModifyExcelTable {
	DataList: [EventContentFortuneGachaModifyExcel];
}

table EventContentFortuneGachaModifyExcel {
	EventContentId: int;
	TargetGrade: int;
	ProbModifyStartCount: int;
	UsePrefabName: string;
	BucketImagePath: string;
	ShopBgImagePath: string;
}

table EventContentFortuneGachaShopExcelTable {
	DataList: [EventContentFortuneGachaShopExcel];
}

table EventContentFortuneGachaShopExcel {
	EventContentId: long;
	Id: long;
	Grade: int;
	CostGoodsId: long;
	IsLegacy: bool;
	FortuneGachaGroupId: int;
	Prob: int;
	ProbModifyValue: int;
	ProbModifyLimit: int;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentLobbyMenuExcelTable {
	DataList: [EventContentLobbyMenuExcel];
}

table EventContentLobbyMenuExcel {
	EventContentId: long;
	eventcontenttype: EventContentType;
	IconSpriteName: string;
	ButtonText: string;
	DisplayOrder: int;
	IconOffsetX: float;
	IconOffsetY: float;
	ReddotSpriteName: string;
}

table EventContentLocationExcelTable {
	DataList: [EventContentLocationExcel];
}

table EventContentLocationExcel {
	EventContentId: long;
	Id: long;
	LocalizeEtcId: uint;
	PrefabPath: string;
	LocationResetScheduleCount: int;
	ScheduleEventPointCostParcelType: ParcelType;
	ScheduleEventPointCostParcelId: long;
	ScheduleEventPointCostParcelAmount: long;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	InformationGroupId: long;
}

table EventContentLocationRewardExcelTable {
	DataList: [EventContentLocationRewardExcel];
}

table EventContentLocationRewardExcel {
	Location: string;
	ScheduleGroupId: long;
	OrderInGroup: long;
	Id: long;
	ProgressTexture: string;
	VoiceClipsKr: [string];
	VoiceClipsJp: [string];
	VoiceClipsEn: [string];
	VoiceClipsTw: [string];
	VoiceClipsTh: [string];
	LocalizeEtcId: uint;
	LocationRank: long;
	FavorExp: long;
	SecretStoneAmount: long;
	SecretStoneProb: long;
	ExtraFavorExp: long;
	ExtraFavorExpProb: long;
	ExtraRewardParcelType: [ParcelType];
	ExtraRewardParcelId: [long];
	ExtraRewardAmount: [long];
	ExtraRewardProb: [long];
	IsExtraRewardDisplayed: [bool];
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table EventContentMeetupExcelTable {
	DataList: [EventContentMeetupExcel];
}

table EventContentMeetupExcel {
	Id: long;
	EventContentId: long;
	CharacterId: long;
	ConditionScenarioGroupId: long;
	ActiveConditionEventContentStageId: [long];
}

table EventContentMiniEventShortCutExcelTable {
	DataList: [EventContentMiniEventShortCutExcel];
}

table EventContentMiniEventShortCutExcel {
	Id: int;
	LocalizeEtcId: uint;
	ShorcutContentType: EventTargetType;
}

table EventContentMiniEventTokenExcelTable {
	DataList: [EventContentMiniEventTokenExcel];
}

table EventContentMiniEventTokenExcel {
	EventContentId: long;
	ItemUniqueId: long;
	MaximumAmount: long;
}

table EventContentMissionExcelTable {
	DataList: [EventContentMissionExcel];
}

table EventContentMissionExcel {
	Id: long;
	EventContentId: long;
	GroupId: long;
	GroupName: string;
	Category: MissionCategory;
	Description: string;
	ResetType: MissionResetType;
	ToastDisplayType: MissionToastDisplayConditionType;
	ToastImagePath: string;
	ViewFlag: bool;
	DisplayOrder: long;
	PreMissionId: [long];
	AccountType: AccountState;
	AccountLevel: long;
	ShortcutUI: [string];
	ChallengeStageShortcut: long;
	CompleteConditionType: MissionCompleteConditionType;
	IsCompleteExtensionTime: bool;
	CompleteConditionCount: long;
	CompleteConditionParameter: [long];
	CompleteConditionParameterName: [string];
	RewardIcon: string;
	CompleteConditionMissionId: [long];
	CompleteConditionMissionCount: long;
	MissionRewardParcelType: [ParcelType];
	MissionRewardParcelId: [long];
	MissionRewardAmount: [int];
	ConditionRewardParcelType: [ParcelType];
	ConditionRewardParcelId: [long];
	ConditionRewardAmount: [int];
}

table EventContentNotifyExcelTable {
	DataList: [EventContentNotifyExcel];
}

table EventContentNotifyExcel {
	Id: int;
	LocalizeEtcId: uint;
	IconPath: string;
	eventnotifytype: EventNotifyType;
	eventtargettype: EventTargetType;
	ShortcutEventTargetType: EventTargetType;
	IsShortcutEnable: bool;
}

table EventContentPlayGuideExcelTable {
	DataList: [EventContentPlayGuideExcel];
}

table EventContentPlayGuideExcel {
	Id: long;
	EventContentId: long;
	DisplayOrder: int;
	GuideTitle: string;
	GuideImagePath: string;
	GuideText: string;
}

table EventContentScenarioExcelTable {
	DataList: [EventContentScenarioExcel];
}

table EventContentScenarioExcel {
	Id: long;
	EventContentId: long;
	Order: long;
	RecollectionNumber: long;
	IsRecollection: bool;
	IsMeetup: bool;
	IsOmnibus: bool;
	ScenarioGroupId: [long];
	ScenarioConditionType: EventContentScenarioConditionType;
	ConditionAmount: long;
	ConditionEventContentId: long;
	ClearedScenarioGroupId: long;
	RecollectionSummaryLocalizeScenarioId: uint;
	RecollectionResource: string;
	IsRecollectionHorizon: bool;
	CostParcelType: ParcelType;
	CostId: long;
	CostAmount: int;
	RewardParcelType: [ParcelType];
	RewardId: [long];
	RewardAmount: [int];
}

table EventContentSeasonExcelTable {
	DataList: [EventContentSeasonExcel];
}

table EventContentSeasonExcel {
	EventContentId: long;
	OriginalEventContentId: long;
	IsReturn: bool;
	Name: string;
	eventcontenttype: EventContentType;
	openconditioncontent: OpenConditionContent;
	contentlocktype: ContentLockType;
	EventDisplay: bool;
	IconOrder: int;
	SubEvent: bool;
	EventItemId: long;
	MainEventId: long;
	EventChangeOpenCondition: long;
	BeforehandExposedTime: string;
	EventContentOpenTime: string;
	EventContentCloseTime: string;
	ExtensionTime: string;
	MainIconParcelPath: string;
	SubIconParcelPath: string;
	BeforehandBgImagePath: string;
	MinigamePrologScenarioGroupId: long;
	BeforehandScenarioGroupId: [long];
	MainBannerImagePath: string;
	MainBgImagePath: string;
	ShiftTriggerStageId: long;
	ShiftMainBgImagePath: string;
	MinigameLobbyPrefabName: string;
	MinigameVictoryPrefabName: string;
	MinigameMissionBgPrefabName: string;
	CardBgImagePath: string;
	EventAssist: bool;
	eventcontentreleasetype: EventContentReleaseType;
	EventContentStageRewardIdPermanent: long;
	RewardTagPermanent: RewardTag;
	MiniEventShortCutScenarioModeId: long;
}

table EventContentShopExcelTable {
	DataList: [EventContentShopExcel];
}

table EventContentShopExcel {
	EventContentId: long;
	Id: long;
	LocalizeEtcId: uint;
	CategoryType: ShopCategoryType;
	IsLegacy: bool;
	GoodsId: [long];
	DisplayOrder: long;
	SalePeriodFrom: string;
	SalePeriodTo: string;
	PurchaseCooltimeMin: long;
	PurchaseCountLimit: long;
	purchasecountresettype: PurchaseCountResetType;
	BuyReportEventName: string;
	RestrictBuyWhenInventoryFull: bool;
}

table EventContentShopInfoExcelTable {
	DataList: [EventContentShopInfoExcel];
}

table EventContentShopInfoExcel {
	EventContentId: long;
	CategoryType: ShopCategoryType;
	LocalizeCode: uint;
	CostParcelType: [ParcelType];
	CostParcelId: [long];
	IsRefresh: bool;
	IsSoldOutDimmed: bool;
	AutoRefreshCoolTime: long;
	RefreshAbleCount: long;
	GoodsId: [long];
	OpenPeriodFrom: string;
	OpenPeriodTo: string;
	ShopProductUpdateDate: string;
}

table EventContentShopRefreshExcelTable {
	DataList: [EventContentShopRefreshExcel];
}

table EventContentShopRefreshExcel {
	EventContentId: long;
	Id: long;
	LocalizeEtcId: uint;
	IsLegacy: bool;
	GoodsId: long;
	DisplayOrder: long;
	CategoryType: ShopCategoryType;
	RefreshGroup: int;
	Prob: int;
	BuyReportEventName: string;
}

table EventContentSpecialOperationsExcelTable {
	DataList: [EventContentSpecialOperationsExcel];
}

table EventContentSpecialOperationsExcel {
	EventContentId: long;
	PointItemId: long;
}

table EventContentSpineDialogOffsetExcelTable {
	DataList: [EventContentSpineDialogOffsetExcel];
}

table EventContentSpineDialogOffsetExcel {
	EventContentId: long;
	eventcontenttype: EventContentType;
	CharacterId: long;
	SpineOffsetX: float;
	SpineOffsetY: float;
	DialogOffsetX: float;
	DialogOffsetY: float;
}

table EventContentSpoilerPopupExcelTable {
	DataList: [EventContentSpoilerPopupExcel];
}

table EventContentSpoilerPopupExcel {
	EventContentId: long;
	SpoilerPopupTitle: string;
	SpoilerPopupDescription: string;
	IsWarningPopUp: bool;
	ConditionScenarioModeId: long;
}

table EventContentStageExcelTable {
	DataList: [EventContentStageExcel];
}

table EventContentStageExcel {
	Id: long;
	Name: string;
	EventContentId: long;
	stagedifficulty: StageDifficulty;
	StageNumber: string;
	StageDisplay: int;
	PrevStageId: long;
	OpenDate: long;
	OpenEventPoint: long;
	OpenConditionScenarioId: long;
	BattleDuration: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	StageEnterEchelonCount: int;
	StarConditionTacticRankSCount: long;
	StarConditionTurnCount: long;
	EnterScenarioGroupId: [long];
	ClearScenarioGroupId: [long];
	StrategyMap: string;
	StrategyMapBG: string;
	EventContentStageRewardId: long;
	MaxTurn: int;
	stagetopography: StageTopography;
	RecommandLevel: int;
	BgmId: string;
	strategyenvironment: StrategyEnvironment;
	GroundID: long;
	contenttype: ContentType;
	BGMId: long;
	InstantClear: bool;
	BuffContentId: long;
	FixedEchelonId: long;
	ChallengeDisplay: bool;
	StarGoal: [StarGoalType];
	StarGoalAmount: [int];
	IsDefeatBattle: bool;
}

table EventContentStageRewardExcelTable {
	DataList: [EventContentStageRewardExcel];
}

table EventContentStageRewardExcel {
	GroupId: long;
	rewardtag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	IsDisplayed: bool;
}

table EventContentStageTotalRewardExcelTable {
	DataList: [EventContentStageTotalRewardExcel];
}

table EventContentStageTotalRewardExcel {
	Id: long;
	EventContentId: long;
	RequiredEventItemAmount: long;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentZoneExcelTable {
	DataList: [EventContentZoneExcel];
}

table EventContentZoneExcel {
	Id: long;
	LocationId: long;
	LocationRank: long;
	EventPointForLocationRank: long;
	LocalizeEtcId: uint;
	StudentVisitProb: [long];
	RewardGroupId: long;
	Tags: [Tag];
	WhiteListTags: [Tag];
}

table EventContentZoneVisitRewardExcelTable {
	DataList: [EventContentZoneVisitRewardExcel];
}

table EventContentZoneVisitRewardExcel {
	EventContentId: long;
	EventContentLocationId: long;
	DevName: string;
	CharacterId: long;
	CharacterDevName: string;
	VisitRewardParcelType: [ParcelType];
	VisitRewardParcelId: [long];
	VisitRewardAmount: [long];
	VisitRewardProb: [long];
}

table FarmingDungeonLocationManageExcelTable {
	DataList: [FarmingDungeonLocationManageExcel];
}

table FarmingDungeonLocationManageExcel {
	FarmingDungeonLocationId: long;
	contenttype: ContentType;
	weekdungeontype: WeekDungeonType;
	schooldungeontype: SchoolDungeonType;
	Order: long;
	OpenStartDateTime: string;
	OpenEndDateTime: string;
	LocationButtonImagePath: string;
	LocalizeCodeTitle: uint;
	LocalizeCodeInfo: uint;
}

table FavorLevelExcelTable {
	DataList: [FavorLevelExcel];
}

table FavorLevelExcel {
	Level: long;
	ExpType: [long];
}

table FavorLevelRewardExcelTable {
	DataList: [FavorLevelRewardExcel];
}

table FavorLevelRewardExcel {
	CharacterId: long;
	FavorLevel: long;
	StatType: [EquipmentOptionType];
	StatValue: [long];
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table FixedEchelonSettingExcelTable {
	DataList: [FixedEchelonSettingExcel];
}

table FixedEchelonSettingExcel {
	FixedEchelonID: long;
	EchelonSceneSkip: bool;
	MainLeaderSlot: int;
	MainCharacterID: [long];
	MainLevel: [int];
	MainGrade: [int];
	MainExSkillLevel: [int];
	MainNoneExSkillLevel: [int];
	MainEquipment1ID: [long];
	MainEquipment1Level: [int];
	MainEquipment2ID: [long];
	MainEquipment2Level: [int];
	MainEquipment3ID: [long];
	MainEquipment3Level: [int];
	SupportCharacterID: [long];
	SupportLevel: [int];
	SupportGrade: [int];
	SupportExSkillLevel: [int];
	SupportNoneExSkillLevel: [int];
	SupportEquipment1ID: [long];
	SupportEquipment1Level: [int];
	SupportEquipment2ID: [long];
	SupportEquipment2Level: [int];
	SupportEquipment3ID: [long];
	SupportEquipment3Level: [int];
}

table FixedStrategyExcelTable {
	DataList: [FixedStrategyExcel];
}

table FixedStrategyExcel {
	Id: long;
	StageEnterEchelon01FixedEchelonId: long;
	StageEnterEchelon01Starttile: long;
	StageEnterEchelon02FixedEchelonId: long;
	StageEnterEchelon02Starttile: long;
	StageEnterEchelon03FixedEchelonId: long;
	StageEnterEchelon03Starttile: long;
	StageEnterEchelon04FixedEchelonId: long;
	StageEnterEchelon04Starttile: long;
}

table FloaterCommonExcelTable {
	DataList: [FloaterCommonExcel];
}

table FloaterCommonExcel {
	Id: long;
	tacticentitytype: TacticEntityType;
	FloaterOffsetPosX: int;
	FloaterOffsetPosY: int;
	FloaterRandomPosRangeX: int;
	FloaterRandomPosRangeY: int;
}

table FormationLocationExcelTable {
	DataList: [FormationLocationExcel];
}

table FormationLocationExcel {
	Id: long;
	GroupID: long;
	SlotZ: [float];
	SlotX: [float];
}

table FurnitureExcelTable {
	DataList: [FurnitureExcel];
}

table FurnitureExcel {
	Id: long;
	productionstep: ProductionStep;
	rarity: Rarity;
	Category: FurnitureCategory;
	SubCategory: FurnitureSubCategory;
	LocalizeEtcId: uint;
	StarGradeInit: int;
	Tier: long;
	Icon: string;
	SizeWidth: int;
	SizeHeight: int;
	OtherSize: int;
	ExpandWidth: int;
	Enable: bool;
	ReverseRotation: bool;
	Prefab: string;
	PrefabExpand: string;
	SubPrefab: string;
	SubExpandPrefab: string;
	CornerPrefab: string;
	StackableMax: long;
	RecipeCraftId: long;
	SetGroudpId: long;
	ComfortBonus: long;
	VisitOperationType: long;
	VisitBonusOperationType: long;
	Tags: [Tag];
	CraftQuality: long;
	ShiftingCraftQuality: long;
	furniturefunctiontype: FurnitureFunctionType;
	FunctionParameter: [string];
	EventCollectionId: long;
	FurnitureBubbleOffsetX: long;
	FurnitureBubbleOffsetY: long;
	CafeCharacterStateReq: [string];
	CafeCharacterStateAdd: [string];
	CafeCharacterStateMake: [string];
	CafeCharacterStateOnly: [string];
}

table FurnitureGroupExcelTable {
	DataList: [FurnitureGroupExcel];
}

table FurnitureGroupExcel {
	Id: long;
	GroupNameLocalize: uint;
	LocalizeEtcId: uint;
	RequiredFurnitureCount: [int];
	ComfortBonus: [long];
}

table FurnitureTemplateElementExcelTable {
	DataList: [FurnitureTemplateElementExcel];
}

table FurnitureTemplateElementExcel {
	FurnitureTemplateId: long;
	FurnitureId: long;
	Location: FurnitureLocation;
	PositionX: float;
	PositionY: float;
	Rotation: float;
	Order: long;
}

table FurnitureTemplateExcelTable {
	DataList: [FurnitureTemplateExcel];
}

table FurnitureTemplateExcel {
	FurnitureTemplateId: long;
	FunitureTemplateTitle: uint;
	ThumbnailImagePath: string;
	ImagePath: string;
}

table GachaCraftNodeExcelTable {
	DataList: [GachaCraftNodeExcel];
}

table GachaCraftNodeExcel {
	ID: long;
	Tier: long;
	Tag: [Tag];
	NodeQuality: long;
	Icon: string;
	LocalizeKey: uint;
	Property: long;
}

table GachaCraftNodeGroupExcelTable {
	DataList: [GachaCraftNodeGroupExcel];
}

table GachaCraftNodeGroupExcel {
	NodeId: long;
	GachaGroupId: long;
	ProbWeight: long;
}

table GachaElementExcelTable {
	DataList: [GachaElementExcel];
}

table GachaElementExcel {
	ID: long;
	GachaGroupID: long;
	parceltype: ParcelType;
	ParcelID: long;
	rarity: Rarity;
	ParcelAmountMin: int;
	ParcelAmountMax: int;
	Prob: int;
	State: int;
}

table GachaElementRecursiveExcelTable {
	DataList: [GachaElementRecursiveExcel];
}

table GachaElementRecursiveExcel {
	ID: long;
	GachaGroupID: long;
	parceltype: ParcelType;
	ParcelID: long;
	ParcelAmountMin: int;
	ParcelAmountMax: int;
	Prob: int;
	State: int;
}

table GachaGroupExcelTable {
	DataList: [GachaGroupExcel];
}

table GachaGroupExcel {
	ID: long;
	NameKr: string;
	IsRecursive: bool;
	GroupType: GachaGroupType;
}

table GoodsExcelTable {
	DataList: [GoodsExcel];
}

table GoodsExcel {
	Id: long;
	Type: int;
	rarity: Rarity;
	IconPath: string;
	ConsumeParcelType: [ParcelType];
	ConsumeParcelId: [long];
	ConsumeParcelAmount: [long];
	ConsumeCondition: [ConsumeCondition];
	ConsumeGachaTicketType: GachaTicketType;
	ConsumeGachaTicketTypeAmount: long;
	ProductIdAOS: long;
	ProductIdiOS: long;
	ProductIdONE: long;
	ConsumeExtraStep: [long];
	ConsumeExtraAmount: [long];
	State: int;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelAmount: [long];
}

table GroundExcelTable {
	DataList: [GroundExcel];
}

table GroundExcel {
	Id: long;
	StageFileName: [string];
	GroundSceneName: string;
	FormationGroupId: long;
	stagetopography: StageTopography;
	EnemyBulletType: BulletType;
	EnemyArmorType: ArmorType;
	LevelNPC: long;
	LevelMinion: long;
	LevelElite: long;
	LevelChampion: long;
	LevelBoss: long;
	ObstacleLevel: long;
	GradeNPC: long;
	GradeMinion: long;
	GradeElite: long;
	GradeChampion: long;
	GradeBoss: long;
	PlayerSightPointAdd: long;
	PlayerSightPointRate: long;
	PlayerAttackRangeAdd: long;
	PlayerAttackRangeRate: long;
	EnemySightPointAdd: long;
	EnemySightPointRate: long;
	EnemyAttackRangeAdd: long;
	EnemyAttackRangeRate: long;
	PlayerSkillRangeAdd: long;
	PlayerSkillRangeRate: long;
	EnemySkillRangeAdd: long;
	EnemySkillRangeRate: long;
	PlayerSightRangeMax: bool;
	EnemySightRangeMax: bool;
	TSSAirUnitHeight: long;
	IsPhaseBGM: bool;
	BGMId: long;
	WarningUI: bool;
	TSSHatchOpen: bool;
	ForcedTacticSpeed: TacticSpeed;
	ForcedSkillUse: TacticSkillUse;
	ShowNPCSkillCutIn: ShowSkillCutIn;
	ImmuneHitBeforeTimeOutEnd: bool;
	UIBattleHideFromScratch: bool;
	BattleReadyTimelinePath: string;
}

table GroundGridFlat {
	X: int;
	Y: int;
	StartX: float;
	StartY: float;
	Gap: float;
	Nodes: [GroundNodeFlat];
	Version: string;
}

table GroundNodeFlat {
	X: int;
	Y: int;
	IsCanNotUseSkill: bool;
	Position: GroundVector3;
	NodeType: GroundNodeType;
	OriginalNodeType: GroundNodeType;
}

table GroundModuleRewardExcelTable {
	DataList: [GroundModuleRewardExcel];
}

table GroundModuleRewardExcel {
	GroupId: uint;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
	RewardParcelProbability: long;
	IsDisplayed: bool;
	DropItemModelPrefabPath: string;
}

table GroundNodeLayerFlat {
	Layers: [byte];
}

table GuideMissionExcelTable {
	DataList: [GuideMissionExcel];
}

table GuideMissionExcel {
	SeasonId: long;
	Id: long;
	Category: MissionCategory;
	IsLegacy: bool;
	TabNumber: long;
	PreMissionId: [long];
	Description: string;
	ToastDisplayType: MissionToastDisplayConditionType;
	ToastImagePath: string;
	ShortcutUI: [string];
	CompleteConditionType: MissionCompleteConditionType;
	CompleteConditionCount: long;
	CompleteConditionParameter: [long];
	CompleteConditionParameterName: string;
	IsAutoClearForScenario: bool;
	MissionRewardParcelType: [ParcelType];
	MissionRewardParcelId: [long];
	MissionRewardAmount: [int];
}

table GuideMissionOpenStageConditionExcelTable {
	DataList: [GuideMissionOpenStageConditionExcel];
}

table GuideMissionOpenStageConditionExcel {
	SeasonId: long;
	OrderNumber: long;
	TabLocalizeCode: string;
	ClearScenarioModeId: long;
	LockScenarioTextLocailzeCode: string;
	ShortcutScenarioUI: string;
	ClearStageId: long;
	LockStageTextLocailzeCode: string;
	ShortcutStageUI: string;
}

table GuideMissionSeasonExcelTable {
	DataList: [GuideMissionSeasonExcel];
}

table GuideMissionSeasonExcel {
	Id: long;
	TitleLocalizeCode: string;
	PermanentInfomationLocalizeCode: string;
	InfomationLocalizeCode: string;
	AccountType: AccountState;
	Enabled: bool;
	BannerOpenDate: string;
	StartDate: string;
	StartableEndDate: string;
	EndDate: string;
	CloseBannerAfterCompletion: bool;
	MaximumLoginCount: long;
	ExpiryDate: long;
	SpineCharacterId: long;
	RequirementParcelImage: string;
	RewardImage: string;
	LobbyBannerImage: string;
	BackgroundImage: string;
	TitleImage: string;
	RequirementParcelType: ParcelType;
	RequirementParcelId: long;
	RequirementParcelAmount: int;
	TabType: GuideMissionTabType;
	IsPermanent: bool;
	PreSeasonId: long;
}

table HpBarAbbreviationExcelTable {
	DataList: [HpBarAbbreviationExcel];
}

table HpBarAbbreviationExcel {
	MonsterLv: int;
	StandardHpBar: int;
	RaidBossHpBar: int;
}

table IdCardBackgroundExcelTable {
	DataList: [IdCardBackgroundExcel];
}

table IdCardBackgroundExcel {
	Id: long;
	rarity: Rarity;
	DisplayOrder: long;
	CollectionVisible: bool;
	IsDefault: bool;
	BgPath: string;
	LocalizeEtcId: uint;
	Icon: string;
}

table InformationExcelTable {
	DataList: [InformationExcel];
}

table InformationExcel {
	GroupID: long;
	PageName: string;
	LocalizeCodeId: string;
	TutorialParentName: [string];
	UIName: [string];
}

table InformationStrategyObjectExcelTable {
	DataList: [InformationStrategyObjectExcel];
}

table InformationStrategyObjectExcel {
	Id: long;
	StageId: long;
	PageName: string;
	LocalizeCodeId: string;
}

table ItemExcelTable {
	DataList: [ItemExcel];
}

table ItemExcel {
	Id: long;
	GroupId: long;
	rarity: Rarity;
	productionstep: ProductionStep;
	LocalizeEtcId: uint;
	itemcategory: ItemCategory;
	Quality: long;
	Icon: string;
	SpriteName: string;
	StackableMax: int;
	StackableFunction: int;
	ImmediateUse: bool;
	UsingResultParcelType: ParcelType;
	UsingResultId: long;
	UsingResultAmount: long;
	mailtype: MailType;
	ExpiryChangeParcelType: ParcelType;
	ExpiryChangeId: long;
	ExpiryChangeAmount: long;
	CanTierUpgrade: bool;
	TierUpgradeRecipeCraftId: long;
	Tags: [Tag];
	CraftQuality: long;
	ShiftingCraftQuality: long;
	MaxGiftTags: int;
	ShopCategory: [ShopCategoryType];
	ExpirationDateTime: string;
	ExpirationNotifyDateIn: int;
	ShortcutTypeId: long;
	GachaTicket: GachaTicketType;
}

table KatakanaConvertExcelTable {
	DataList: [KatakanaConvertExcel];
}

table KatakanaConvertExcel {
	Kr: string;
	Jp: string;
}

table KnockBackExcelTable {
	DataList: [KnockBackExcel];
}

table KnockBackExcel {
	Index: long;
	Dist: float;
	Speed: float;
}

table LimitedStageExcelTable {
	DataList: [LimitedStageExcel];
}

table LimitedStageExcel {
	Id: long;
	Name: string;
	SeasonId: long;
	stagedifficulty: StageDifficulty;
	StageNumber: string;
	StageDisplay: int;
	PrevStageId: long;
	OpenDate: long;
	OpenEventPoint: long;
	BattleDuration: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	StageEnterEchelonCount: int;
	StarConditionTacticRankSCount: long;
	StarConditionTurnCount: long;
	EnterScenarioGroupId: [long];
	ClearScenarioGroupId: [long];
	StrategyMap: string;
	StrategyMapBG: string;
	StageRewardId: long;
	MaxTurn: int;
	stagetopography: StageTopography;
	RecommandLevel: int;
	BgmId: string;
	strategyenvironment: StrategyEnvironment;
	GroundID: long;
	contenttype: ContentType;
	BGMId: long;
	InstantClear: bool;
	BuffContentId: long;
	ChallengeDisplay: bool;
}

table LimitedStageRewardExcelTable {
	DataList: [LimitedStageRewardExcel];
}

table LimitedStageRewardExcel {
	GroupId: long;
	rewardtag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	IsDisplayed: bool;
}

table LimitedStageSeasonExcelTable {
	DataList: [LimitedStageSeasonExcel];
}

table LimitedStageSeasonExcel {
	Id: long;
	StartDate: string;
	EndDate: string;
	TypeACount: long;
	TypeBCount: long;
	TypeCCount: long;
}

table LoadingImageExcelTable {
	DataList: [LoadingImageExcel];
}

table LoadingImageExcel {
	ID: long;
	ImagePathKr: string;
	ImagePathJp: string;
	DisplayWeight: int;
	ImagePathTh: string;
	ImagePathTw: string;
	ImagePathEn: string;
}

table LocalizeCharProfileExcelTable {
	DataList: [LocalizeCharProfileExcel];
}

table LocalizeCharProfileExcel {
	CharacterId: long;
	StatusMessageKr: string;
	StatusMessageJp: string;
	StatusMessageTh: string;
	StatusMessageTw: string;
	StatusMessageEn: string;
	FullNameKr: string;
	FullNameJp: string;
	FullNameTh: string;
	FullNameTw: string;
	FullNameEn: string;
	FamilyNameKr: string;
	FamilyNameRubyKr: string;
	PersonalNameKr: string;
	PersonalNameRubyKr: string;
	FamilyNameJp: string;
	FamilyNameRubyJp: string;
	PersonalNameJp: string;
	PersonalNameRubyJp: string;
	FamilyNameTh: string;
	FamilyNameRubyTh: string;
	PersonalNameTh: string;
	PersonalNameRubyTh: string;
	FamilyNameTw: string;
	FamilyNameRubyTw: string;
	PersonalNameTw: string;
	PersonalNameRubyTw: string;
	FamilyNameEn: string;
	FamilyNameRubyEn: string;
	PersonalNameEn: string;
	PersonalNameRubyEn: string;
	SchoolYearKr: string;
	SchoolYearJp: string;
	SchoolYearTh: string;
	SchoolYearTw: string;
	SchoolYearEn: string;
	CharacterAgeKr: string;
	CharacterAgeJp: string;
	CharacterAgeTh: string;
	CharacterAgeTw: string;
	CharacterAgeEn: string;
	BirthDay: string;
	BirthdayKr: string;
	BirthdayJp: string;
	BirthdayTh: string;
	BirthdayTw: string;
	BirthdayEn: string;
	CharHeightKr: string;
	CharHeightJp: string;
	CharHeightTh: string;
	CharHeightTw: string;
	CharHeightEn: string;
	DesignerNameKr: string;
	DesignerNameJp: string;
	DesignerNameTh: string;
	DesignerNameTw: string;
	DesignerNameEn: string;
	IllustratorNameKr: string;
	IllustratorNameJp: string;
	IllustratorNameTh: string;
	IllustratorNameTw: string;
	IllustratorNameEn: string;
	CharacterVoiceKr: string;
	CharacterVoiceJp: string;
	CharacterVoiceTh: string;
	CharacterVoiceTw: string;
	CharacterVoiceEn: string;
	HobbyKr: string;
	HobbyJp: string;
	HobbyTh: string;
	HobbyTw: string;
	HobbyEn: string;
	WeaponNameKr: string;
	WeaponDescKr: string;
	WeaponNameJp: string;
	WeaponDescJp: string;
	WeaponNameTh: string;
	WeaponDescTh: string;
	WeaponNameTw: string;
	WeaponDescTw: string;
	WeaponNameEn: string;
	WeaponDescEn: string;
	ProfileIntroductionKr: string;
	ProfileIntroductionJp: string;
	ProfileIntroductionTh: string;
	ProfileIntroductionTw: string;
	ProfileIntroductionEn: string;
	CharacterSSRNewKr: string;
	CharacterSSRNewJp: string;
	CharacterSSRNewTh: string;
	CharacterSSRNewTw: string;
	CharacterSSRNewEn: string;
}

table LocalizeCodeExcelTable {
	DataList: [LocalizeCodeExcel];
}

table LocalizeCodeExcel {
	Key: uint;
	Kr: string;
	Jp: string;
	Th: string;
	Tw: string;
	En: string;
}

table LocalizeCodeInBuildExcelTable {
	DataList: [LocalizeCodeInBuildExcel];
}

table LocalizeCodeInBuildExcel {
	Key: uint;
	Kr: string;
	Jp: string;
	Th: string;
	Tw: string;
	En: string;
}

table LocalizeErrorExcelTable {
	DataList: [LocalizeErrorExcel];
}

table LocalizeErrorExcel {
	Key: uint;
	ErrorLevel: WebAPIErrorLevel;
	Kr: string;
	Jp: string;
	Th: string;
	Tw: string;
	En: string;
}

table LocalizeEtcExcelTable {
	DataList: [LocalizeEtcExcel];
}

table LocalizeEtcExcel {
	Key: uint;
	NameKr: string;
	DescriptionKr: string;
	NameJp: string;
	DescriptionJp: string;
	NameTh: string;
	DescriptionTh: string;
	NameTw: string;
	DescriptionTw: string;
	NameEn: string;
	DescriptionEn: string;
}

table LocalizeGachaShopExcelTable {
	DataList: [LocalizeGachaShopExcel];
}

table LocalizeGachaShopExcel {
	GachaShopId: long;
	TabNameKr: string;
	TabNameJp: string;
	TabNameTh: string;
	TabNameTw: string;
	TabNameEn: string;
	TitleNameKr: string;
	TitleNameJp: string;
	TitleNameTh: string;
	TitleNameTw: string;
	TitleNameEn: string;
	SubTitleKr: string;
	SubTitleJp: string;
	SubTitleTh: string;
	SubTitleTw: string;
	SubTitleEn: string;
	GachaDescriptionKr: string;
	GachaDescriptionJp: string;
	GachaDescriptionTh: string;
	GachaDescriptionTw: string;
	GachaDescriptionEn: string;
}

table LocalizeInformationExcelTable {
	DataList: [LocalizeInformationExcel];
}

table LocalizeInformationExcel {
	Key: uint;
	Kr: string;
	Jp: string;
	Th: string;
	Tw: string;
	En: string;
}

table LocalizeOperatorExcelTable {
	DataList: [LocalizeOperatorExcel];
}

table LocalizeOperatorExcel {
	Key: uint;
	Kr: string;
	Jp: string;
	Th: string;
	Tw: string;
	En: string;
}

table LocalizePrefabExcelTable {
	DataList: [LocalizePrefabExcel];
}

table LocalizePrefabExcel {
	Key: uint;
	Kr: string;
	Jp: string;
	Th: string;
	Tw: string;
	En: string;
}

table LocalizeScenarioExcelTable {
	DataList: [LocalizeScenarioExcel];
}

table LocalizeScenarioExcel {
	Key: uint;
	Kr: string;
	Jp: string;
	Th: string;
	Tw: string;
	En: string;
}

table LocalizeSkillExcelTable {
	DataList: [LocalizeSkillExcel];
}

table LocalizeSkillExcel {
	Key: uint;
	NameKr: string;
	DescriptionKr: string;
	SkillInvokeLocalizeKr: string;
	NameJp: string;
	DescriptionJp: string;
	SkillInvokeLocalizeJp: string;
	NameTh: string;
	DescriptionTh: string;
	SkillInvokeLocalizeTh: string;
	NameTw: string;
	DescriptionTw: string;
	SkillInvokeLocalizeTw: string;
	NameEn: string;
	DescriptionEn: string;
	SkillInvokeLocalizeEn: string;
}

table LogicEffectCommonVisualExcelTable {
	DataList: [LogicEffectCommonVisualExcel];
}

table LogicEffectCommonVisualExcel {
	StringID: uint;
	IconSpriteName: string;
	IconDispelColor: [float];
	ParticleEnterPath: string;
	ParticleEnterSocket: EffectBone;
	ParticleLoopPath: string;
	ParticleLoopSocket: EffectBone;
	ParticleEndPath: string;
	ParticleEndSocket: EffectBone;
	ParticleApplyPath: string;
	ParticleApplySocket: EffectBone;
	ParticleRemovedPath: string;
	ParticleRemovedSocket: EffectBone;
}

table MemoryLobbyExcelTable {
	DataList: [MemoryLobbyExcel];
}

table MemoryLobbyExcel {
	Id: long;
	productionstep: ProductionStep;
	LocalizeEtcId: uint;
	CharacterId: long;
	PrefabName: string;
	SlotTextureName: string;
	RewardTextureName: string;
	BGMId: long;
	AudioClipJp: string;
	AudioClipKr: string;
	AudioClipTh: string;
	AudioClipTw: string;
	AudioClipEn: string;
}

table MemoryLobby_GlobalExcelTable {
	DataList: [MemoryLobby_GlobalExcel];
}

table MemoryLobby_GlobalExcel {
	Id: long;
	CharacterId: long;
	PrefabNameKr: string;
	PrefabNameTw: string;
	PrefabNameAsia: string;
	PrefabNameNa: string;
	PrefabNameGlobal: string;
	PrefabNameTeen: string;
}

table MessagePopupExcelTable {
	DataList: [MessagePopupExcel];
}

table MessagePopupExcel {
	StringId: uint;
	messagepopuplayout: MessagePopupLayout;
	OrderType: MessagePopupImagePositionType;
	Image: string;
	TitleText: uint;
	MessageText: uint;
	DisplayXButton: bool;
	Button: [MessagePopupButtonType];
	ButtonText: [uint];
	ButtonCommand: [string];
	ButtonParameter: [string];
}

table MiniGameAudioAnimatorExcelTable {
	DataList: [MiniGameAudioAnimatorExcel];
}

table MiniGameAudioAnimatorExcel {
	ControllerNameHash: uint;
	VoiceNamePrefix: string;
	StateNameHash: uint;
	StateName: string;
	IgnoreInterruptDelay: bool;
	IgnoreInterruptPlay: bool;
	Volume: float;
	Delay: float;
	AudioPriority: int;
	AudioClipPath: [string];
	VoiceHash: [uint];
}

table MiniGameMissionExcelTable {
	DataList: [MiniGameMissionExcel];
}

table MiniGameMissionExcel {
	Id: long;
	EventContentId: long;
	GroupId: long;
	GroupName: string;
	Category: MissionCategory;
	Description: string;
	ResetType: MissionResetType;
	ToastDisplayType: MissionToastDisplayConditionType;
	ToastImagePath: string;
	ViewFlag: bool;
	DisplayOrder: long;
	PreMissionId: [long];
	AccountType: AccountState;
	AccountLevel: long;
	ShortcutUI: [string];
	CompleteConditionType: MissionCompleteConditionType;
	IsCompleteExtensionTime: bool;
	CompleteConditionCount: long;
	CompleteConditionParameter: [long];
	CompleteConditionParameterName: [string];
	RewardIcon: string;
	MissionRewardParcelType: [ParcelType];
	MissionRewardParcelId: [long];
	MissionRewardAmount: [int];
}

table MiniGamePlayGuideExcelTable {
	DataList: [MiniGamePlayGuideExcel];
}

table MiniGamePlayGuideExcel {
	Id: long;
	EventContentId: long;
	DisplayOrder: int;
	GuideTitle: string;
	GuideImagePath: string;
	GuideText: string;
}

table MiniGameRhythmBgmExcelTable {
	DataList: [MiniGameRhythmBgmExcel];
}

table MiniGameRhythmBgmExcel {
	RhythmBgmId: long;
	EventContentId: long;
	StageSelectImagePath: string;
	Bpm: long;
	Bgm: long;
	BgmNameText: string;
	BgmArtistText: string;
	HasLyricist: bool;
	BgmComposerText: string;
	BgmLength: int;
}

table MiniGameRhythmExcelTable {
	DataList: [MiniGameRhythmExcel];
}

table MiniGameRhythmExcel {
	UniqueId: long;
	RhythmBgmId: long;
	PresetName: string;
	StageDifficulty: Difficulty;
	IsSpecial: bool;
	OpenStageScoreAmount: long;
	MaxHp: long;
	MissDamage: long;
	CriticalHPRestoreValue: long;
	MaxScore: long;
	FeverScoreRate: long;
	NoteScoreRate: long;
	ComboScoreRate: long;
	AttackScoreRate: long;
	FeverCriticalRate: float;
	FeverAttackRate: float;
	MaxHpScore: long;
	RhythmFileName: string;
	ArtLevelSceneName: string;
	ComboImagePath: string;
}

table MiniGameShootingCharacterExcelTable {
	DataList: [MiniGameShootingCharacterExcel];
}

table MiniGameShootingCharacterExcel {
	UniqueId: long;
	SpineResourceName: string;
	BodyRadius: float;
	ModelPrefabName: string;
	NormalAttackSkillData: string;
	PublicSkillData: [string];
	MaxHP: long;
	AttackPower: long;
	DefensePower: long;
	CriticalRate: long;
	CriticalDamageRate: long;
	AttackRange: long;
	MoveSpeed: long;
	ShotTime: long;
	IsBoss: bool;
	Scale: float;
	IgnoreObstacleCheck: bool;
}

table MiniGameShootingGeasExcelTable {
	DataList: [MiniGameShootingGeasExcel];
}

table MiniGameShootingGeasExcel {
	UniqueId: long;
	GeasType: Geas;
	Icon: string;
	Probability: long;
	MaxOverlapCount: int;
	GeasData: string;
	NeedGeasId: long;
	HideInPausePopup: bool;
}

table MiniGameShootingStageExcelTable {
	DataList: [MiniGameShootingStageExcel];
}

table MiniGameShootingStageExcel {
	UniqueId: long;
	BgmId: long;
	CostGoodsId: long;
	difficulty: Difficulty;
	DesignLevel: string;
	ArtLevel: string;
	StartBattleDuration: long;
	DefaultBattleDuration: long;
	DefaultLogicEffect: string;
	CameraSizeRate: float;
	EventContentStageRewardId: long;
}

table MiniGameShootingStageRewardExcelTable {
	DataList: [MiniGameShootingStageRewardExcel];
}

table MiniGameShootingStageRewardExcel {
	GroupId: long;
	RewardId: long;
	ClearSection: long;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [int];
}

table MinigameTBGDiceExcelTable {
	DataList: [MinigameTBGDiceExcel];
}

table MinigameTBGDiceExcel {
	EventContentId: long;
	UniqueId: long;
	DiceGroup: int;
	DiceResult: int;
	Prob: int;
	ProbModifyCondition: [TBGProbModifyCondition];
	ProbModifyValue: [int];
	ProbModifyLimit: [int];
}

table MinigameTBGEncounterExcelTable {
	DataList: [MinigameTBGEncounterExcel];
}

table MinigameTBGEncounterExcel {
	EventContentId: long;
	UniqueId: long;
	AllThema: bool;
	ThemaIndex: [int];
	ObjectType: TBGObjectType;
	EnemyImagePath: string;
	EnemyNameLocalize: string;
	OptionGroupId: long;
	EncounterTitleLocalize: string;
	StoryImagePath: string;
	BeforeStoryLocalize: string;
	BeforeStoryOption1Localize: string;
	BeforeStoryOption2Localize: string;
	BeforeStoryOption3Localize: string;
	ClearStoryLocalize: string;
	DefeatStoryLocalize: string;
	RunawayStoryLocalize: string;
}

table MinigameTBGEncounterOptionExcelTable {
	DataList: [MinigameTBGEncounterOptionExcel];
}

table MinigameTBGEncounterOptionExcel {
	OptionGroupId: long;
	UniqueId: long;
	SlotIndex: int;
	OptionTitleLocalize: string;
	OptionSuccessLocalize: string;
	OptionSuccessType: TBGOptionSuccessType;
	OptionSuccessParameter: long;
	OptionSuccessOrHigherDiceCount: int;
	OptionGreatSuccessOrHigherDiceCount: int;
	OptionFailLocalize: string;
	OptionFailLessDiceCount: int;
	RunawayOrHigherDiceCount: int;
	RewardId: long;
	RewardHide: bool;
}

table MinigameTBGItemExcelTable {
	DataList: [MinigameTBGItemExcel];
}

table MinigameTBGItemExcel {
	UniqueId: long;
	ItemType: TBGItemType;
	tbgitemeffecttype: TBGItemEffectType;
	ItemParameter: string;
	LocalizeETCId: string;
	Icon: string;
	EncounterCount: int;
	DiceEffectAniClip: string;
}

table MinigameTBGObjectExcelTable {
	DataList: [MinigameTBGObjectExcel];
}

table MinigameTBGObjectExcel {
	UniqueId: long;
	Key: string;
	PrefabName: string;
	ObjectType: TBGObjectType;
	ObjectCostType: ParcelType;
	ObjectCostId: long;
	ObjectCostAmount: int;
	Disposable: bool;
	ReEncounterCost: bool;
}

table MiniGameTBGRewardExcelTable {
	DataList: [MiniGameTBGRewardExcel];
}

table MiniGameTBGRewardExcel {
	GroupId: long;
	RewardId: long;
	ClearSection: long;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [int];
}

table MinigameTBGSeasonExcelTable {
	DataList: [MinigameTBGSeasonExcel];
}

table MinigameTBGSeasonExcel {
	EventContentId: long;
	ItemSlot: int;
	DefaultEchelonHp: int;
	DefaultItemDiceId: long;
	EchelonSlot1CharacterId: long;
	EchelonSlot2CharacterId: long;
	EchelonSlot3CharacterId: long;
	EchelonSlot4CharacterId: long;
	EchelonRevivalCostType: ParcelType;
	EchelonRevivalCostId: long;
	EchelonRevivalCostAmount: int;
	EnemyBossHP: int;
	EnemyMinionHP: int;
	AttackDamage: int;
	CriticalAttackDamage: int;
	RoundItemSelectLimit: int;
	InstantClearRound: int;
	MapImagePath: string;
	MapNameLocalize: string;
}

table MinigameTBGThemaExcelTable {
	DataList: [MinigameTBGThemaExcel];
}

table MinigameTBGThemaExcel {
	EventContentId: long;
	UniqueId: long;
	ThemaIndex: int;
	ThemaType: TBGThemaType;
	ThemaMap: string;
	ThemaMapBG: string;
	PortalCondition: [TBGPortalCondition];
	PortalConditionParameter: [string];
	ThemaNameLocalize: string;
	ThemaLoadingImage: string;
	ThemaLeaderId: long;
	ThemaGoalLocalize: string;
}

table MiniGameTBGThemaRewardExcelTable {
	DataList: [MiniGameTBGThemaRewardExcel];
}

table MiniGameTBGThemaRewardExcel {
	EventContentId: long;
	ThemaRound: int;
	ThemaUniqueId: int;
	IsLoop: bool;
	minigametbgthemarewardtype: MiniGameTBGThemaRewardType;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [int];
}

table MinigameTBGVoiceExcelTable {
	DataList: [MinigameTBGVoiceExcel];
}

table MinigameTBGVoiceExcel {
	EventContentId: long;
	UniqueId: long;
	VoiceCondition: TBGVoiceCondition;
	VoiceClip: string;
}

table MissionExcelTable {
	DataList: [MissionExcel];
}

table MissionExcel {
	Id: long;
	Category: MissionCategory;
	Description: string;
	ResetType: MissionResetType;
	ToastDisplayType: MissionToastDisplayConditionType;
	ToastImagePath: string;
	ViewFlag: bool;
	StartDate: string;
	EndDate: string;
	EndDay: long;
	StartableEndDate: string;
	DisplayOrder: long;
	PreMissionId: [long];
	AccountType: AccountState;
	AccountLevel: long;
	ContentTags: [SuddenMissionContentType];
	ShortcutUI: [string];
	ChallengeStageShortcut: long;
	CompleteConditionType: MissionCompleteConditionType;
	CompleteConditionCount: long;
	CompleteConditionParameter: [long];
	CompleteConditionParameterName: [string];
	RewardIcon: string;
	MissionRewardParcelType: [ParcelType];
	MissionRewardParcelId: [long];
	MissionRewardAmount: [int];
}

table NormalSkillTemplateExcelTable {
	DataList: [NormalSkillTemplateExcel];
}

table NormalSkillTemplateExcel {
	Index: long;
	FirstCoolTime: float;
	CoolTime: float;
	MultiAni: bool;
}

table ObstacleExcelTable {
	DataList: [ObstacleExcel];
}

table ObstacleExcel {
	Index: long;
	PrefabName: string;
	JumpAble: bool;
	SubOffset: [float];
	X: float;
	Z: float;
	Hp: long;
	MaxHp: long;
	BlockRate: int;
	EvasionRate: int;
	DestroyType: ObstacleDestroyType;
	Point1Offeset: [float];
	EnemyPoint1Osset: [float];
	Point2Offeset: [float];
	EnemyPoint2Osset: [float];
	SubObstacleID: [long];
}

table ObstacleFireLineCheckExcelTable {
	DataList: [ObstacleFireLineCheckExcel];
}

table ObstacleFireLineCheckExcel {
	MyObstacleFireLineCheck: bool;
	AllyObstacleFireLineCheck: bool;
	EnemyObstacleFireLineCheck: bool;
	EmptyObstacleFireLineCheck: bool;
}

table ObstacleStatExcelTable {
	DataList: [ObstacleStatExcel];
}

table ObstacleStatExcel {
	StringID: uint;
	Name: string;
	MaxHP1: long;
	MaxHP100: long;
	BlockRate: long;
	Dodge: long;
	HighlightFloaterHeight: float;
}

table OpenConditionExcelTable {
	DataList: [OpenConditionExcel];
}

table OpenConditionExcel {
	OpenConditionContentType: OpenConditionContent;
	LockUI: [string];
	ShortcutPopupPriority: long;
	ShortcutUIName: [string];
	ShortcutParam: int;
	Scene: string;
	HideWhenLocked: bool;
	AccountLevel: long;
	ScenarioModeId: long;
	CampaignStageId: long;
	multipleconditionchecktype: MultipleConditionCheckType;
	OpenDayOfWeek: WeekDay;
	OpenHour: long;
	CloseDayOfWeek: WeekDay;
	CloseHour: long;
	CafeRank: long;
	ContentsOpenShow: bool;
	ContentsOpenShortcutUI: string;
}

table OperatorExcelTable {
	DataList: [OperatorExcel];
}

table OperatorExcel {
	UniqueId: long;
	GroupId: string;
	operatorcondition: OperatorCondition;
	OutputSequence: int;
	RandomWeight: int;
	OutputDelay: int;
	Duration: int;
	OperatorOutputPriority: int;
	PortraitPath: string;
	TextLocalizeKey: string;
	VoiceClipsKr: [string];
	VoiceClipsJp: [string];
	VoiceClipsTh: [string];
	VoiceClipsTw: [string];
	VoiceClipsEn: [string];
	OperatorWaitQueue: bool;
}

table ParcelAutoSynthExcelTable {
	DataList: [ParcelAutoSynthExcel];
}

table ParcelAutoSynthExcel {
	RequireParcelType: ParcelType;
	RequireParcelId: long;
	RequireParcelAmount: long;
	SynthStartAmount: long;
	SynthEndAmount: long;
	SynthMaxItem: bool;
	ResultParcelType: ParcelType;
	ResultParcelId: long;
	ResultParcelAmount: long;
}

table PersonalityExcelTable {
	DataList: [PersonalityExcel];
}

table PersonalityExcel {
	Id: long;
	Name: string;
}

table PickupDuplicateBonusExcelTable {
	DataList: [PickupDuplicateBonusExcel];
}

table PickupDuplicateBonusExcel {
	Id: long;
	shopcategorytype: ShopCategoryType;
	ShopId: long;
	PickupCharacterId: long;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
}

table PresetCharacterGroupExcelTable {
	DataList: [PresetCharacterGroupExcel];
}

table PresetCharacterGroupExcel {
	PresetCharacterGroupId: long;
	GetPresetType: string;
	ArenaSimulatorFixed: bool;
	Level: int;
	Exp: int;
	FavorExp: int;
	FavorRank: int;
	StarGrade: int;
	ExSkillLevel: int;
	PassiveSkillLevel: int;
	ExtraPassiveSkillLevel: int;
	CommonSkillLevel: int;
	LeaderSkillLevel: int;
	EquipSlot01: bool;
	EquipSlotTier01: int;
	EquipSlotLevel01: int;
	EquipSlot02: bool;
	EquipSlotTier02: int;
	EquipSlotLevel02: int;
	EquipSlot03: bool;
	EquipSlotTier03: int;
	EquipSlotLevel03: int;
	EquipCharacterWeapon: bool;
	EquipCharacterWeaponTier: int;
	EquipCharacterWeaponLevel: int;
	EquipCharacterGear: bool;
	EquipCharacterGearTier: int;
	EquipCharacterGearLevel: int;
}

table PresetCharacterGroupSettingExcelTable {
	DataList: [PresetCharacterGroupSettingExcel];
}

table PresetCharacterGroupSettingExcel {
	CharacterId: long;
	PresetType: [string];
}

table PresetCharactersExcelTable {
	DataList: [PresetCharactersExcel];
}

table PresetCharactersExcel {
	CharacterId: long;
	PresetGroupId: long;
	ArenaSimulatorFixed: bool;
	Level: int;
	Exp: int;
	FavorExp: int;
	FavorRank: int;
	StarGrade: int;
	ExSkillLevel: int;
	PassiveSkillLevel: int;
	ExtraPassiveSkillLevel: int;
	CommonSkillLevel: int;
	LeaderSkillLevel: int;
	EquipSlot01: bool;
	EquipSlotTier01: int;
	EquipSlotLevel01: int;
	EquipSlot02: bool;
	EquipSlotTier02: int;
	EquipSlotLevel02: int;
	EquipSlot03: bool;
	EquipSlotTier03: int;
	EquipSlotLevel03: int;
	EquipCharacterWeapon: bool;
	EquipCharacterWeaponTier: int;
	EquipCharacterWeaponLevel: int;
	EquipCharacterGear: bool;
	EquipCharacterGearTier: int;
	EquipCharacterGearLevel: int;
}

table PresetParcelsExcelTable {
	DataList: [PresetParcelsExcel];
}

table PresetParcelsExcel {
	parceltype: ParcelType;
	ParcelId: long;
	PresetGroupId: long;
	ParcelAmount: long;
}

table ProductExcelTable {
	DataList: [ProductExcel];
}

table ProductExcel {
	Id: long;
	ProductId: string;
	TeenProductId: string;
	storetype: StoreType;
	Price: long;
	PriceReference: string;
	purchaseperiodtype: PurchasePeriodType;
	PurchasePeriodLimit: long;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelAmount: [long];
}

table ProductMonthlyExcelTable {
	DataList: [ProductMonthlyExcel];
}

table ProductMonthlyExcel {
	Id: long;
	ProductId: string;
	TeenProductId: string;
	storetype: StoreType;
	Price: long;
	PriceReference: string;
	producttagtype: ProductTagType;
	MonthlyDays: long;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelAmount: [long];
	EnterCostReduceGroupId: long;
	DailyParcelType: [ParcelType];
	DailyParcelId: [long];
	DailyParcelAmount: [long];
}

table ProtocolSettingExcelTable {
	DataList: [ProtocolSettingExcel];
}

table ProtocolSettingExcel {
	Protocol: string;
	contentlocktype: ContentLockType;
	openconditioncontent: OpenConditionContent;
	Currency: bool;
	Inventory: bool;
	Mail: bool;
}

table RaidRankingRewardExcelTable {
	DataList: [RaidRankingRewardExcel];
}

table RaidRankingRewardExcel {
	RankingRewardGroupId: long;
	Id: long;
	RankStart: long;
	RankEnd: long;
	RankStartTw: long;
	RankEndTw: long;
	RankStartAsia: long;
	RankEndAsia: long;
	RankStartNa: long;
	RankEndNa: long;
	RankStartGlobal: long;
	RankEndGlobal: long;
	PercentRankStart: long;
	PercentRankEnd: long;
	Tier: int;
	RewardParcelType: [ParcelType];
	RewardParcelUniqueId: [long];
	RewardParcelUniqueName: [string];
	RewardParcelAmount: [long];
}

table RaidSeasonManageExcelTable {
	DataList: [RaidSeasonManageExcel];
}

table RaidSeasonManageExcel {
	SeasonId: long;
	SeasonDisplay: long;
	SeasonStartData: string;
	SeasonEndData: string;
	SettlementEndDate: string;
	OpenRaidBossGroup: [string];
	RankingRewardGroupId: long;
	MaxSeasonRewardGauage: int;
	StackedSeasonRewardGauge: [long];
	SeasonRewardId: [long];
}

table RaidStageExcelTable {
	DataList: [RaidStageExcel];
}

table RaidStageExcel {
	Id: long;
	UseBossIndex: bool;
	UseBossAIPhaseSync: bool;
	RaidBossGroup: string;
	PortraitPath: string;
	BGPath: string;
	RaidCharacterId: long;
	BossCharacterId: [long];
	difficulty: Difficulty;
	DifficultyOpenCondition: bool;
	MaxPlayerCount: long;
	RaidRoomLifeTime: int;
	BattleDuration: long;
	GroundId: long;
	GroundDevName: string;
	EnterTimeLine: string;
	tacticenvironment: TacticEnvironment;
	SeasonDamageRatio: int;
	DefaultClearScore: long;
	MaximumScore: long;
	PerSecondMinusScore: long;
	HPPercentScore: long;
	MinimumAcquisitionScore: long;
	MaximumAcquisitionScore: long;
	RaidRewardGroupId: long;
	RaidRewardDevName: string;
	BattleReadyTimelinePath: [string];
	BattleReadyTimelinePhaseStart: [int];
	BattleReadyTimelinePhaseEnd: [int];
	VictoryTimelinePath: string;
	PhaseChangeTimelinePath: string;
	TimeLinePhase: long;
	EnterScenarioKey: uint;
	ClearScenarioKey: uint;
	InitSupplyCount: int;
	ShowSkillCard: bool;
	BossBGInfoKey: uint;
}

table RaidStageRewardExcelTable {
	DataList: [RaidStageRewardExcel];
}

table RaidStageRewardExcel {
	GroupId: long;
	IsClearStageRewardHideInfo: bool;
	ClearStageRewardProb: long;
	ClearStageRewardParcelType: ParcelType;
	ClearStageRewardParcelUniqueID: long;
	ClearStageRewardParcelUniqueName: string;
	ClearStageRewardAmount: long;
}

table RaidStageSeasonRewardExcelTable {
	DataList: [RaidStageSeasonRewardExcel];
}

table RaidStageSeasonRewardExcel {
	SeasonRewardId: long;
	SeasonRewardParcelType: [ParcelType];
	SeasonRewardParcelUniqueId: [long];
	SeasonRewardParcelUniqueName: [string];
	SeasonRewardAmount: [long];
}

table RecipeCraftExcelTable {
	DataList: [RecipeCraftExcel];
}

table RecipeCraftExcel {
	Id: long;
	DevName: string;
	recipetype: RecipeType;
	RecipeIngredientId: long;
	RecipeIngredientDevName: string;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelDevName: [string];
	ResultAmountMin: [long];
	ResultAmountMax: [long];
}

table RecipeExcelTable {
	DataList: [RecipeExcel];
}

table RecipeExcel {
	Id: long;
	recipetype: RecipeType;
	RecipeIngredientId: long;
	RecipeSelectionGroupId: long;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ResultAmountMin: [long];
	ResultAmountMax: [long];
}

table RecipeIngredientExcelTable {
	DataList: [RecipeIngredientExcel];
}

table RecipeIngredientExcel {
	Id: long;
	recipetype: RecipeType;
	CostParcelType: [ParcelType];
	CostId: [long];
	CostAmount: [long];
	IngredientParcelType: [ParcelType];
	IngredientId: [long];
	IngredientAmount: [long];
	CostTimeInSecond: long;
}

table RecipeSelectionGroupExcelTable {
	DataList: [RecipeSelectionGroupExcel];
}

table RecipeSelectionGroupExcel {
	RecipeSelectionGroupId: long;
	RecipeSelectionGroupComponentId: long;
	parceltype: ParcelType;
	ParcelId: long;
	ResultAmountMin: long;
	ResultAmountMax: long;
}

table Position {
	X: float;
	Z: float;
}

table Motion {
	Name: string;
	Positions: [Position];
}

table MoveEnd {
	Normal: Motion;
	Stand: Motion;
	Kneel: Motion;
}

table Form {
	moveend: MoveEnd;
	PublicSkill: Motion;
}

table RootMotionFlat {
	Forms: [Form];
	ExSkills: [Motion];
	MoveLeft: Motion;
	MoveRight: Motion;
}

table ScenarioBGEffectExcelTable {
	DataList: [ScenarioBGEffectExcel];
}

table ScenarioBGEffectExcel {
	Name: uint;
	Effect: string;
	Scroll: ScenarioBGScroll;
	ScrollTime: long;
	ScrollFrom: long;
	ScrollTo: long;
}

table ScenarioBGNameExcelTable {
	DataList: [ScenarioBGNameExcel];
}

table ScenarioBGNameExcel {
	Name: uint;
	productionstep: ProductionStep;
	BGFileName: string;
	BGType: ScenarioBGType;
	AnimationRoot: string;
	AnimationName: string;
	SpineScale: float;
	SpineLocalPosX: int;
	SpineLocalPosY: int;
}

table ScenarioBGName_GlobalExcelTable {
	DataList: [ScenarioBGName_GlobalExcel];
}

table ScenarioBGName_GlobalExcel {
	GroupName: uint;
	NameKr: uint;
	NameTw: uint;
	NameAsia: uint;
	NameNa: uint;
	NameGlobal: uint;
	NameTeen: uint;
}

table ScenarioCharacterEmotionExcelTable {
	DataList: [ScenarioCharacterEmotionExcel];
}

table ScenarioCharacterEmotionExcel {
	EmoticonName: string;
	Name: uint;
}

table ScenarioCharacterNameExcelTable {
	DataList: [ScenarioCharacterNameExcel];
}

table ScenarioCharacterNameExcel {
	CharacterName: uint;
	productionstep: ProductionStep;
	NameKR: string;
	NicknameKR: string;
	NameJP: string;
	NicknameJP: string;
	NameTH: string;
	NicknameTH: string;
	NameTW: string;
	NicknameTW: string;
	NameEN: string;
	NicknameEN: string;
	Shape: ScenarioCharacterShapes;
	SpinePrefabName: string;
	SmallPortrait: string;
}

table ScenarioCharacterSituationSetExcelTable {
	DataList: [ScenarioCharacterSituationSetExcel];
}

table ScenarioCharacterSituationSetExcel {
	Name: uint;
	Face: string;
	Behavior: string;
	Action: string;
	Shape: string;
	Effect: uint;
	Emotion: uint;
}

table ScenarioEffectExcelTable {
	DataList: [ScenarioEffectExcel];
}

table ScenarioEffectExcel {
	EffectName: string;
	Name: uint;
}

table ScenarioModeExcelTable {
	DataList: [ScenarioModeExcel];
}

table ScenarioModeExcel {
	ModeId: long;
	ModeType: ScenarioModeTypes;
	SubType: ScenarioModeSubTypes;
	VolumeId: long;
	ChapterId: long;
	EpisodeId: long;
	Hide: bool;
	Open: bool;
	ScenarioOpenDate: string;
	ScenarioCloseDate: string;
	FrontScenarioGroupId: [long];
	StrategyId: long;
	GroundId: long;
	IsDefeatBattle: bool;
	BattleDuration: long;
	BackScenarioGroupId: [long];
	ClearedModeId: [long];
	ScenarioModeRewardId: long;
	IsScenarioSpecialReward: bool;
	AccountLevelLimit: long;
	ClearedStageId: long;
	NeedClub: Club;
	NeedClubStudentCount: int;
	NeedTSS: long;
	EventContentId: long;
	eventcontenttype: EventContentType;
	EventContentCondition: long;
	EventContentConditionGroup: long;
	MapDifficulty: StageDifficulty;
	StepIndex: int;
	EventIconParcelPath: string;
	Lof: bool;
	stagetopography: StageTopography;
	FixedEchelonId: long;
	CompleteReportEventName: string;
}

table ScenarioModeRewardExcelTable {
	DataList: [ScenarioModeRewardExcel];
}

table ScenarioModeRewardExcel {
	ScenarioModeRewardId: long;
	rewardtag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: int;
	IsDisplayed: bool;
}

table ScenarioReplayExcelTable {
	DataList: [ScenarioReplayExcel];
}

table ScenarioReplayExcel {
	ModeId: long;
	VolumeId: long;
	ReplayType: ScenarioModeReplayTypes;
	ChapterId: long;
	EpisodeId: long;
	FrontScenarioGroupId: [long];
	GroundId: long;
	BattleDuration: long;
	BackScenarioGroupId: [long];
}

table ScenarioResourceInfoExcelTable {
	DataList: [ScenarioResourceInfoExcel];
}

table ScenarioResourceInfoExcel {
	Id: long;
	ScenarioModeId: long;
	VideoName: string;
	BgmId: string;
	AudioName: string;
	SpinePath: string;
	Ratio: int;
	LobbyAniPath: string;
}

table ScenarioScriptContentExcelTable {
	DataList: [ScenarioScriptContentExcel];
}

table ScenarioScriptContentExcel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptEvent1ExcelTable {
	DataList: [ScenarioScriptEvent1Excel];
}

table ScenarioScriptEvent1Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptEvent2ExcelTable {
	DataList: [ScenarioScriptEvent2Excel];
}

table ScenarioScriptEvent2Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptEvent3ExcelTable {
	DataList: [ScenarioScriptEvent3Excel];
}

table ScenarioScriptEvent3Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptEvent4ExcelTable {
	DataList: [ScenarioScriptEvent4Excel];
}

table ScenarioScriptEvent4Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptEvent5ExcelTable {
	DataList: [ScenarioScriptEvent5Excel];
}

table ScenarioScriptEvent5Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptFavor1ExcelTable {
	DataList: [ScenarioScriptFavor1Excel];
}

table ScenarioScriptFavor1Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptFavor2ExcelTable {
	DataList: [ScenarioScriptFavor2Excel];
}

table ScenarioScriptFavor2Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptFavor3ExcelTable {
	DataList: [ScenarioScriptFavor3Excel];
}

table ScenarioScriptFavor3Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptFavor4ExcelTable {
	DataList: [ScenarioScriptFavor4Excel];
}

table ScenarioScriptFavor4Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptFavor5ExcelTable {
	DataList: [ScenarioScriptFavor5Excel];
}

table ScenarioScriptFavor5Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptGroup1ExcelTable {
	DataList: [ScenarioScriptGroup1Excel];
}

table ScenarioScriptGroup1Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptGroup2ExcelTable {
	DataList: [ScenarioScriptGroup2Excel];
}

table ScenarioScriptGroup2Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptGroup3ExcelTable {
	DataList: [ScenarioScriptGroup3Excel];
}

table ScenarioScriptGroup3Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptGroup4ExcelTable {
	DataList: [ScenarioScriptGroup4Excel];
}

table ScenarioScriptGroup4Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptGroup5ExcelTable {
	DataList: [ScenarioScriptGroup5Excel];
}

table ScenarioScriptGroup5Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptMain1ExcelTable {
	DataList: [ScenarioScriptMain1Excel];
}

table ScenarioScriptMain1Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptMain2ExcelTable {
	DataList: [ScenarioScriptMain2Excel];
}

table ScenarioScriptMain2Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptMain3ExcelTable {
	DataList: [ScenarioScriptMain3Excel];
}

table ScenarioScriptMain3Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptMain4ExcelTable {
	DataList: [ScenarioScriptMain4Excel];
}

table ScenarioScriptMain4Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptMain5ExcelTable {
	DataList: [ScenarioScriptMain5Excel];
}

table ScenarioScriptMain5Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	VoiceJp: string;
	TeenMode: bool;
}

table ScenarioScriptTestExcelTable {
	DataList: [ScenarioScriptTestExcel];
}

table ScenarioScriptTestExcel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	VoiceJp: string;
	TextTh: string;
	TextTw: string;
	TextEn: string;
	TeenMode: bool;
}

table ScenarioTransitionExcelTable {
	DataList: [ScenarioTransitionExcel];
}

table ScenarioTransitionExcel {
	Name: uint;
	TransitionOut: string;
	TransitionOutDuration: long;
	TransitionOutResource: string;
	TransitionIn: string;
	TransitionInDuration: long;
	TransitionInResource: string;
}

table SchoolDungeonRewardExcelTable {
	DataList: [SchoolDungeonRewardExcel];
}

table SchoolDungeonRewardExcel {
	GroupId: long;
	DungeonType: SchoolDungeonType;
	rewardtag: RewardTag;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
	RewardParcelProbability: long;
	IsDisplayed: bool;
}

table SchoolDungeonStageExcelTable {
	DataList: [SchoolDungeonStageExcel];
}

table SchoolDungeonStageExcel {
	StageId: long;
	DungeonType: SchoolDungeonType;
	Difficulty: int;
	BattleDuration: long;
	PrevStageId: long;
	StageEnterCostType: [ParcelType];
	StageEnterCostId: [long];
	StageEnterCostAmount: [long];
	StageEnterCostMinimumAmount: [long];
	GroundId: int;
	StarGoal: [StarGoalType];
	StarGoalAmount: [int];
	stagetopography: StageTopography;
	RecommandLevel: long;
	StageRewardId: long;
	PlayTimeLimitInSeconds: long;
}

table ServiceActionExcelTable {
	DataList: [ServiceActionExcel];
}

table ServiceActionExcel {
	serviceactiontype: ServiceActionType;
	IsLegacy: bool;
	GoodsId: long;
}

table ShiftingCraftRecipeExcelTable {
	DataList: [ShiftingCraftRecipeExcel];
}

table ShiftingCraftRecipeExcel {
	Id: long;
	DisplayOrder: long;
	NotificationId: int;
	ResultParcel: ParcelType;
	ResultId: long;
	ResultAmount: long;
	RequireItemId: long;
	RequireItemAmount: long;
	RequireGold: long;
	IngredientTag: [Tag];
	IngredientExp: long;
}

table ShopCashExcelTable {
	DataList: [ShopCashExcel];
}

table ShopCashExcel {
	Id: long;
	CashProductId: long;
	PackageType: PurchaseSourceType;
	LocalizeEtcId: uint;
	IconPath: string;
	DisplayOrder: long;
	CategoryType: ProductCategory;
	DisplayTag: ProductDisplayTag;
	SalePeriodFrom: string;
	SalePeriodTo: string;
	PeriodTag: bool;
	AccountLevelLimit: long;
	AccountLevelHide: bool;
	ClearMissionLimit: long;
	ClearMissionHide: bool;
	PurchaseReportEventName: string;
	PackageClientType: PurchaseSourceType;
	IsStartDash: bool;
	ViewFlag: bool;
}

table ShopCashScenarioResourceInfoExcelTable {
	DataList: [ShopCashScenarioResourceInfoExcel];
}

table ShopCashScenarioResourceInfoExcel {
	ScenarioResrouceInfoId: long;
	ShopCashId: long;
	IconPath: string;
}

table ShopExcelTable {
	DataList: [ShopExcel];
}

table ShopExcel {
	Id: long;
	LocalizeEtcId: uint;
	CategoryType: ShopCategoryType;
	IsLegacy: bool;
	GoodsId: [long];
	DisplayOrder: long;
	SalePeriodFrom: string;
	SalePeriodTo: string;
	PurchaseCooltimeMin: long;
	PurchaseCountLimit: long;
	purchasecountresettype: PurchaseCountResetType;
	BuyReportEventName: string;
	RestrictBuyWhenInventoryFull: bool;
	DisplayTag: ProductDisplayTag;
	ShopUpdateGroupId: int;
}

table ShopFreeRecruitExcelTable {
	DataList: [ShopFreeRecruitExcel];
}

table ShopFreeRecruitExcel {
	Id: long;
	FreeRecruitPeriodFrom: string;
	FreeRecruitPeriodTo: string;
	FreeRecruitType: ShopFreeRecruitType;
	FreeRecruitDecorationImagePath: string;
	ShopRecruitId: [long];
}

table ShopFreeRecruitPeriodExcelTable {
	DataList: [ShopFreeRecruitPeriodExcel];
}

table ShopFreeRecruitPeriodExcel {
	ShopFreeRecruitId: long;
	ShopFreeRecruitIntervalId: long;
	IntervalDate: string;
	FreeRecruitCount: int;
}

table ShopInfoExcelTable {
	DataList: [ShopInfoExcel];
}

table ShopInfoExcel {
	CategoryType: ShopCategoryType;
	IsRefresh: bool;
	IsSoldOutDimmed: bool;
	CostParcelType: [ParcelType];
	CostParcelId: [long];
	AutoRefreshCoolTime: long;
	RefreshAbleCount: long;
	GoodsId: [long];
	OpenPeriodFrom: string;
	OpenPeriodTo: string;
	ShopProductUpdateTime: string;
	DisplayParcelType: ParcelType;
	DisplayParcelId: long;
	IsShopVisible: bool;
	DisplayOrder: int;
	ShopUpdateDate: int;
	ShopUpdateGroupId1: int;
	ShopUpdateGroupId2: int;
	ShopUpdateGroupId3: int;
	ShopUpdateGroupId4: int;
	ShopUpdateGroupId5: int;
	ShopUpdateGroupId6: int;
	ShopUpdateGroupId7: int;
	ShopUpdateGroupId8: int;
	ShopUpdateGroupId9: int;
	ShopUpdateGroupId10: int;
	ShopUpdateGroupId11: int;
	ShopUpdateGroupId12: int;
}

table ShopRecruitExcelTable {
	DataList: [ShopRecruitExcel];
}

table ShopRecruitExcel {
	Id: long;
	CategoryType: ShopCategoryType;
	IsLegacy: bool;
	OneGachaGoodsId: long;
	TenGachaGoodsId: long;
	GoodsDevName: string;
	DisplayTag: GachaDisplayTag;
	DisplayOrder: long;
	GachaBannerPath: string;
	MovieBannerPath: [string];
	MovieBannerPathTeen: [string];
	LinkedRobbyBannerId: long;
	InfoCharacterId: [long];
	SalePeriodFrom: string;
	SalePeriodTo: string;
	RecruitCoinId: long;
	RecruitSellectionShopId: long;
	PurchaseCooltimeMin: long;
	PurchaseCountLimit: long;
	purchasecountresettype: PurchaseCountResetType;
	IsNewbie: bool;
	IsSelectRecruit: bool;
	DirectPayInvisibleTokenId: long;
	DirectPayAndroidShopCashId: long;
	DirectPayAppleShopCashId: long;
	DirectPayOneStoreShopCashId: long;
	ProbabilityUrlDev: string;
	ProbabilityUrlLive: string;
}

table ShopRefreshExcelTable {
	DataList: [ShopRefreshExcel];
}

table ShopRefreshExcel {
	Id: long;
	LocalizeEtcId: uint;
	IsLegacy: bool;
	GoodsId: long;
	DisplayOrder: long;
	CategoryType: ShopCategoryType;
	RefreshGroup: int;
	Prob: int;
	BuyReportEventName: string;
	DisplayTag: ProductDisplayTag;
}

table ShortcutTypeExcelTable {
	DataList: [ShortcutTypeExcel];
}

table ShortcutTypeExcel {
	Id: long;
	IsAscending: bool;
	ContentType: [ShortcutContentType];
}

table SkillExcelTable {
	DataList: [SkillExcel];
}

table SkillExcel {
	Id: long;
	LocalizeSkillId: uint;
	GroupId: string;
	Level: int;
	SkillCost: int;
	ExtraSkillCost: int;
	EnemySkillCost: int;
	ExtraEnemySkillCost: int;
	NPCSkillCost: int;
	ExtraNPCSkillCost: int;
	bullettype: BulletType;
	StartCoolTime: int;
	CoolTime: int;
	EnemyStartCoolTime: int;
	EnemyCoolTime: int;
	NPCStartCoolTime: int;
	NPCCoolTime: int;
	UseAtg: int;
	RequireCharacterLevel: int;
	RequireLevelUpMaterial: long;
	IconName: string;
	IsShowInfo: bool;
	IsShowSpeechbubble: bool;
}

table SoundUIExcelTable {
	DataList: [SoundUIExcel];
}

table SoundUIExcel {
	ID: long;
	SoundUniqueId: string;
	Path: string;
}

table SpecialLobbyIllustExcelTable {
	DataList: [SpecialLobbyIllustExcel];
}

table SpecialLobbyIllustExcel {
	UniqueId: long;
	DevName: string;
	CharacterCostumeUniqueId: long;
	PrefabName: string;
	SlotTextureName: string;
	RewardTextureName: string;
}

table SpineLipsyncExcelTable {
	DataList: [SpineLipsyncExcel];
}

table SpineLipsyncExcel {
	ClipNameKey: uint;
	AnimJson: string;
}

table StatLevelInterpolationExcelTable {
	DataList: [StatLevelInterpolationExcel];
}

table StatLevelInterpolationExcel {
	Level: long;
	StatTypeIndex: [long];
}

table StoryStrategyExcelTable {
	DataList: [StoryStrategyExcel];
}

table StoryStrategyExcel {
	Id: long;
	Name: string;
	Localize: string;
	StageEnterEchelonCount: int;
	BattleDuration: long;
	WhiteListId: long;
	StrategyMap: string;
	StrategyMapBG: string;
	MaxTurn: int;
	stagetopography: StageTopography;
	RecommandLevel: int;
	strategyenvironment: StrategyEnvironment;
	contenttype: ContentType;
	BGMId: long;
	FirstClearReportEventName: string;
}

table StrategyObjectBuffDefineExcelTable {
	DataList: [StrategyObjectBuffDefineExcel];
}

table StrategyObjectBuffDefineExcel {
	StrategyObjectBuffID: long;
	StrategyObjectTurn: int;
	SkillGroupId: string;
	LocalizeCodeId: uint;
	IconPath: string;
}

table StringTestExcelTable {
	DataList: [StringTestExcel];
}

table StringTestExcel {
	String: [string];
	Sentence1: string;
	Script: string;
}

table SystemMailExcelTable {
	DataList: [SystemMailExcel];
}

table SystemMailExcel {
	mailtype: MailType;
	ExpiredDay: long;
	Sender: string;
	Comment: string;
}

table TacticalSupportSystemExcelTable {
	DataList: [TacticalSupportSystemExcel];
}

table TacticalSupportSystemExcel {
	Id: long;
	SummonedTime: long;
	DefaultPersonalityId: long;
	CanTargeting: bool;
	CanCover: bool;
	ObstacleUniqueName: string;
	ObstacleCoverRange: long;
	SummonSkilllGroupId: string;
	CrashObstacleOBBWidth: long;
	CrashObstacleOBBHeight: long;
	IsTSSBlockedNodeCheck: bool;
	NumberOfUses: int;
	InventoryOffsetX: float;
	InventoryOffsetY: float;
	InventoryOffsetZ: float;
	InteractionChar: [long];
	CharacterInteractionStartDelay: long;
	GetOnStartEffectPath: string;
	GetOnEndEffectPath: string;
}

table TacticArenaSimulatorSettingExcelTable {
	DataList: [TacticArenaSimulatorSettingExcel];
}

table TacticArenaSimulatorSettingExcel {
	Order: long;
	Repeat: long;
	AttackerFrom: ArenaSimulatorServer;
	AttackerUserArenaGroup: long;
	AttackerUserArenaRank: long;
	AttackerPresetGroupId: long;
	AttackerStrikerNum: long;
	AttackerSpecialNum: long;
	DefenderFrom: ArenaSimulatorServer;
	DefenderUserArenaGroup: long;
	DefenderUserArenaRank: long;
	DefenderPresetGroupId: long;
	DefenderStrikerNum: long;
	DefenderSpecialNum: long;
	GroundId: long;
}

table TacticDamageSimulatorSettingExcelTable {
	DataList: [TacticDamageSimulatorSettingExcel];
}

table TacticDamageSimulatorSettingExcel {
	Order: int;
	Repeat: int;
	TestPreset: long;
	TestBattleTime: long;
	StrikerSquard: long;
	SpecialSquard: long;
	ReplaceCharacterCostRegen: bool;
	ReplaceCostRegenValue: int;
	UseAutoSkill: bool;
	GroundId: long;
	FixedCharacter: [long];
}

table TacticEntityEffectFilterExcelTable {
	DataList: [TacticEntityEffectFilterExcel];
}

table TacticEntityEffectFilterExcel {
	TargetEffectName: string;
	ShowEffectToVehicle: bool;
	ShowEffectToBoss: bool;
}

table TacticSimulatorSettingExcelTable {
	DataList: [TacticSimulatorSettingExcel];
}

table TacticSimulatorSettingExcel {
	GroundId: long;
	GetExp: long;
	GetStarGrade: long;
	Equipment: long;
}

table TacticSkipExcelTable {
	DataList: [TacticSkipExcel];
}

table TacticSkipExcel {
	LevelDiff: int;
	HPResult: long;
}

table TacticTimeAttackSimulatorConfigExcelTable {
	DataList: [TacticTimeAttackSimulatorConfigExcel];
}

table TacticTimeAttackSimulatorConfigExcel {
	Order: long;
	Repeat: long;
	PresetGroupId: long;
	AttackStrikerNum: long;
	AttackSpecialNum: long;
	GeasId: long;
}

table TagSettingExcelTable {
	DataList: [TagSettingExcel];
}

table TagSettingExcel {
	Id: Tag;
	IsOpen: bool;
	LocalizeEtcId: uint;
}

table TerrainAdaptationFactorExcelTable {
	DataList: [TerrainAdaptationFactorExcel];
}

table TerrainAdaptationFactorExcel {
	TerrainAdaptation: StageTopography;
	terrainadaptationstat: TerrainAdaptationStat;
	ShotFactor: long;
	BlockFactor: long;
	AccuracyFactor: long;
	DodgeFactor: long;
	AttackPowerFactor: long;
}

table TimeAttackDungeonExcelTable {
	DataList: [TimeAttackDungeonExcel];
}

table TimeAttackDungeonExcel {
	Id: long;
	timeattackdungeontype: TimeAttackDungeonType;
	LocalizeEtcKey: uint;
	IconPath: string;
}

table TimeAttackDungeonGeasExcelTable {
	DataList: [TimeAttackDungeonGeasExcel];
}

table TimeAttackDungeonGeasExcel {
	Id: long;
	timeattackdungeontype: TimeAttackDungeonType;
	LocalizeEtcKey: uint;
	BattleDuration: long;
	ClearDefaultPoint: long;
	ClearTimeWeightPoint: long;
	TimeWeightConst: long;
	Difficulty: int;
	RecommandLevel: int;
	GroundId: long;
	AllyPassiveSkillId: [string];
	AllyPassiveSkillLevel: [int];
	EnemyPassiveSkillId: [string];
	EnemyPassiveSkillLevel: [int];
	GeasIconPath: [string];
	GeasLocalizeEtcKey: [uint];
}

table TimeAttackDungeonRewardExcelTable {
	DataList: [TimeAttackDungeonRewardExcel];
}

table TimeAttackDungeonRewardExcel {
	Id: long;
	RewardMaxPoint: long;
	RewardType: [TimeAttackDungeonRewardType];
	RewardMinPoint: [long];
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelDefaultAmount: [long];
	RewardParcelMaxAmount: [long];
}

table TimeAttackDungeonSeasonManageExcelTable {
	DataList: [TimeAttackDungeonSeasonManageExcel];
}

table TimeAttackDungeonSeasonManageExcel {
	Id: long;
	StartDate: string;
	EndDate: string;
	DungeonId: long;
	DifficultyGeas: [long];
	TimeAttackDungeonRewardId: long;
	RoomLifeTimeInSeconds: long;
}

table ToastExcelTable {
	DataList: [ToastExcel];
}

table ToastExcel {
	Id: uint;
	toasttype: ToastType;
	MissionId: uint;
	TextId: uint;
	LifeTime: long;
}

table TranscendenceRecipeExcelTable {
	DataList: [TranscendenceRecipeExcel];
}

table TranscendenceRecipeExcel {
	Id: long;
	DevName: string;
	CostCurrencyType: CurrencyTypes;
	CostCurrencyAmount: long;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelAmount: [int];
}

table TrophyCollectionExcelTable {
	DataList: [TrophyCollectionExcel];
}

table TrophyCollectionExcel {
	GroupId: long;
	LocalizeCodeId: uint;
	FurnitureId: [long];
}

table TutorialCharacterDialogExcelTable {
	DataList: [TutorialCharacterDialogExcel];
}

table TutorialCharacterDialogExcel {
	TalkId: long;
	AnimationName: string;
	LocalizeKR: string;
	LocalizeJP: string;
	LocalizeTH: string;
	LocalizeTW: string;
	LocalizeEN: string;
	SoundPathKR: string;
	SoundPathJP: string;
	SoundPathTH: string;
	SoundPathTW: string;
	SoundPathEN: string;
}

table TutorialExcelTable {
	DataList: [TutorialExcel];
}

table TutorialExcel {
	ID: long;
	CompletionReportEventName: string;
	CompulsoryTutorial: bool;
	DescriptionTutorial: bool;
	TutorialStageId: long;
	UIName: [string];
	TutorialParentName: [string];
}

table TutorialFailureImageExcelTable {
	DataList: [TutorialFailureImageExcel];
}

table TutorialFailureImageExcel {
	Id: long;
	Contents: TutorialFailureContentType;
	Type: string;
	ImagePathKr: string;
	ImagePathJp: string;
	ImagePathTh: string;
	ImagePathTw: string;
	ImagePathEn: string;
}

table VoiceCommonExcelTable {
	DataList: [VoiceCommonExcel];
}

table VoiceCommonExcel {
	voiceevent: VoiceEvent;
	Rate: long;
	VoiceHash: [uint];
}

table VoiceExcelTable {
	DataList: [VoiceExcel];
}

table VoiceExcel {
	NameHash: uint;
	OnlyOne: bool;
	VolumeJp: float;
	DelayJp: float;
	Priority: int;
	AudioClipJp: string;
	VolumeKr: float;
	DelayKr: float;
	AudioClipKr: string;
	VolumeTh: float;
	DelayTh: float;
	AudioClipTh: string;
	VolumeTw: float;
	DelayTw: float;
	AudioClipTw: string;
	VolumeEn: float;
	DelayEn: float;
	AudioClipEn: string;
}

table VoiceLogicEffectExcelTable {
	DataList: [VoiceLogicEffectExcel];
}

table VoiceLogicEffectExcel {
	LogicEffectNameHash: uint;
	Self: bool;
	Priority: int;
	VoiceHash: [uint];
	VoiceId: uint;
}

table VoiceRoomExcelTable {
	DataList: [VoiceRoomExcel];
}

table VoiceRoomExcel {
	NameHash: uint;
	VoiceCategory: string;
	DisplayOrder: long;
	CollectionVisible: bool;
	cvcollectiontype: CVCollectionType;
	UnlockFavorRank: long;
	LocalizeCVGroup: string;
	AudioClipJp: string;
	AudioClipKr: string;
	AudioClipEn: string;
	AudioClipTw: string;
	AudioClipTh: string;
}

table VoiceRoomExceptionExcelTable {
	DataList: [VoiceRoomExceptionExcel];
}

table VoiceRoomExceptionExcel {
	ExceptionTarget: CVExceptionTarget;
	squadtype: SquadType;
	CharacterId: long;
	LinkedCharacterVoicePrintType: CVPrintType;
	LinkedCharacterName: string;
	BlackListNameHash: [uint];
}

table VoiceSkillUseExcelTable {
	DataList: [VoiceSkillUseExcel];
}

table VoiceSkillUseExcel {
	Name: string;
	VoiceHash: [uint];
}

table WebEventSeasonExcelTable {
	DataList: [WebEventSeasonExcel];
}

table WebEventSeasonExcel {
	Id: long;
	Enabled: bool;
	StartDate: string;
	EndDate: string;
	LobbyBannerImage: string;
	PopupTitleLocalizeKey: string;
	EventUrl: string;
}

table WeekDungeonExcelTable {
	DataList: [WeekDungeonExcel];
}

table WeekDungeonExcel {
	StageId: long;
	weekdungeontype: WeekDungeonType;
	Difficulty: int;
	BattleDuration: long;
	PrevStageId: long;
	StageEnterCostType: [ParcelType];
	StageEnterCostId: [long];
	StageEnterCostAmount: [int];
	GroundId: int;
	StarGoal: [StarGoalType];
	StarGoalAmount: [int];
	stagetopography: StageTopography;
	RecommandLevel: long;
	StageRewardId: long;
	PlayTimeLimitInSeconds: long;
	BattleRewardExp: long;
	BattleRewardPlayerExp: long;
	GroupBuffID: [long];
}

table WeekDungeonFindGiftRewardExcelTable {
	DataList: [WeekDungeonFindGiftRewardExcel];
}

table WeekDungeonFindGiftRewardExcel {
	StageRewardId: long;
	DevName: string;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
	RewardParcelProbability: [long];
	DropItemModelPrefabPath: [string];
}

table WeekDungeonGroupBuffExcelTable {
	DataList: [WeekDungeonGroupBuffExcel];
}

table WeekDungeonGroupBuffExcel {
	WeekDungeonBuffId: long;
	school: School;
	RecommandLocalizeEtcId: uint;
	FormationLocalizeEtcId: uint;
	SkillGroupId: string;
}

table WeekDungeonOpenScheduleExcelTable {
	DataList: [WeekDungeonOpenScheduleExcel];
}

table WeekDungeonOpenScheduleExcel {
	weekday: WeekDay;
	Open: [WeekDungeonType];
}

table WeekDungeonRewardExcelTable {
	DataList: [WeekDungeonRewardExcel];
}

table WeekDungeonRewardExcel {
	GroupId: long;
	DungeonType: WeekDungeonType;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
	RewardParcelProbability: long;
	IsDisplayed: bool;
	DropItemModelPrefabPath: string;
}

table WorldRaidBossGroupExcelTable {
	DataList: [WorldRaidBossGroupExcel];
}

table WorldRaidBossGroupExcel {
	Id: long;
	WorldRaidBossGroupId: long;
	WorldBossName: string;
	WorldBossPopupPortrait: string;
	WorldBossPopupBG: string;
	WorldBossParcelPortrait: string;
	WorldBossListParcel: string;
	WorldBossHP: long;
	WorldBossHPTw: long;
	WorldBossHPAsia: long;
	WorldBossHPNa: long;
	WorldBossHPGlobal: long;
	UIHideBeforeSpawn: bool;
	HideAnotherBossKilled: bool;
	WorldBossClearRewardGroupId: long;
	AnotherBossKilled: [long];
	EchelonConstraintGroupId: long;
	ExclusiveOperatorBossSpawn: string;
	ExclusiveOperatorBossKill: string;
	ExclusiveOperatorScenarioBattle: string;
	ExclusiveOperatorBossDamaged: string;
	BossGroupOpenCondition: long;
}

table WorldRaidConditionExcelTable {
	DataList: [WorldRaidConditionExcel];
}

table WorldRaidConditionExcel {
	Id: long;
	LockUI: [string];
	HideWhenLocked: bool;
	AccountLevel: long;
	ScenarioModeId: [long];
	CampaignStageID: [long];
	multipleconditionchecktype: MultipleConditionCheckType;
	AfterWhenDate: string;
	WorldRaidBossKill: [long];
}

table WorldRaidFavorBuffExcelTable {
	DataList: [WorldRaidFavorBuffExcel];
}

table WorldRaidFavorBuffExcel {
	WorldRaidFavorRank: long;
	WorldRaidFavorRankBonus: long;
}

table WorldRaidSeasonManageExcelTable {
	DataList: [WorldRaidSeasonManageExcel];
}

table WorldRaidSeasonManageExcel {
	SeasonId: long;
	EventContentId: long;
	EnterTicket: CurrencyTypes;
	WorldRaidLobbyScene: string;
	WorldRaidLobbyBanner: string;
	WorldRaidLobbyBG: string;
	WorldRaidLobbyBannerShow: bool;
	SeasonOpenCondition: long;
	WorldRaidLobbyEnterScenario: long;
	CanPlayNotSeasonTime: bool;
	WorldRaidUniqueThemeLobbyUI: bool;
	WorldRaidUniqueThemeName: string;
	CanWorldRaidGemEnter: bool;
	HideWorldRaidTicketUI: bool;
	UseWorldRaidCommonToast: bool;
	OpenRaidBossGroupId: [long];
	BossSpawnTime: [string];
	EliminateTime: [string];
	ScenarioOutputConditionId: [long];
	ConditionScenarioGroupid: [long];
	WorldRaidMapEnterOperator: string;
	UseFavorRankBuff: bool;
}

table WorldRaidStageExcelTable {
	DataList: [WorldRaidStageExcel];
}

table WorldRaidStageExcel {
	Id: long;
	UseBossIndex: bool;
	UseBossAIPhaseSync: bool;
	WorldRaidBossGroupId: long;
	PortraitPath: string;
	BGPath: string;
	RaidCharacterId: long;
	BossCharacterId: [long];
	AssistCharacterLimitCount: long;
	worldraiddifficulty: WorldRaidDifficulty;
	DifficultyOpenCondition: bool;
	RaidEnterAmount: long;
	ReEnterAmount: long;
	BattleDuration: long;
	GroundId: long;
	RaidBattleEndRewardGroupId: long;
	RaidRewardGroupId: long;
	BattleReadyTimelinePath: [string];
	BattleReadyTimelinePhaseStart: [int];
	BattleReadyTimelinePhaseEnd: [int];
	BeforeVictoryTimelinePath: string;
	VictoryTimelinePath: string;
	PhaseChangeTimelinePath: string;
	TimeLinePhase: long;
	EnterScenarioKey: long;
	ClearScenarioKey: long;
	UseFixedEchelon: bool;
	FixedEchelonId: long;
	IsRaidScenarioBattle: bool;
	ShowSkillCard: bool;
	BossBGInfoKey: uint;
	DamageToWorldBoss: long;
	AllyPassiveSkill: [string];
	AllyPassiveSkillLevel: [int];
	SaveCurrentLocalBossHP: bool;
}

table WorldRaidStageRewardExcelTable {
	DataList: [WorldRaidStageRewardExcel];
}

table WorldRaidStageRewardExcel {
	GroupId: long;
	IsClearStageRewardHideInfo: bool;
	ClearStageRewardProb: long;
	ClearStageRewardParcelType: ParcelType;
	ClearStageRewardParcelUniqueID: long;
	ClearStageRewardParcelUniqueName: string;
	ClearStageRewardAmount: long;
}

