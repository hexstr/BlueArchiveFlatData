namespace FlatDataJp;

enum GroundNodeType: int {
	None,
	WalkAble,
	JumpAble,
	TSSOnly,
	NotWalkAble,
}
enum BubbleType: int {
	Idle,
	Monologue,
	EmoticonNormal,
	EmoticonFavorite,
	EmoticonReward,
	EmoticonGiveGift,
}
enum FurnitureCategory: int {
	Furnitures,
	Decorations,
	Interiors,
}
enum FurnitureSubCategory: int {
	Table,
	Closet,
	Chair,
	Bed,
	FurnitureEtc,
	FurnitureSubCategory1,
	Prop,
	HomeAppliance,
	WallDecoration,
	FloorDecoration,
	DecorationEtc,
	DecorationSubCategory1,
	Floor,
	Background,
	Wallpaper,
	InteriorsSubCategory1,
	All,
}
enum FurnitureLocation: int {
	None,
	Inventory,
	Floor,
	WallLeft,
	WallRight,
}
enum AcademyMessageConditions: int {
	None,
	FavorRankUp,
	AcademySchedule,
	Answer,
	Feedback,
}
enum AcademyMessageTypes: int {
	None,
	Text,
	Image,
}
enum VoiceEvent: int {
	OnTSA,
	FormationPickUp,
	CampaignResultDefeat,
	CampaignResultVictory,
	CharacterLevelUp,
	CharacterTranscendence,
	SkillLevelUp,
	Formation,
	CampaignCharacterSpawn,
	BattleStartTimeline,
	BattleVictoryTimeline,
	CharacterFavor,
	BattleMiss,
	BattleBlock,
	BattleCover,
	BattleMove,
	BattleMoveToForamtionBeacon,
	MGS_GameStart,
	MGS_CharacterSelect,
	MGS_Attacking,
	MGS_GeasGet,
	EXSkill,
	EXSkillLevel,
	EXSkill2,
	EXSkillLevel2,
	EXSkill3,
	EXSkillLevel3,
	EXSkill4,
	EXSkillLevel4,
	PublicSkill01,
	PublicSkill02,
	InteractionPublicSkill01,
	InteractionPublicSkill02,
}
enum UnitType: int {
	None,
	AR,
	RF,
	HG,
	MG,
	SMG,
	SG,
	HZ,
	Melee,
}
enum AttackType: int {
	Single,
	Splash,
	Through,
	Heal,
}
enum ProjectileType: int {
	Guided,
	Ground,
	GuidedExplosion,
	GroundConstDistance,
	AirConstDistance,
}
enum DamageFontColor: int {
	Blue,
	White,
	Yellow,
	Red,
	Green,
}
enum TargetingCellType: int {
	None,
	Near,
	Far,
}
enum TargetingUnitType: int {
	None,
	Near,
	Far,
	MinHp,
	MaxHp,
	Random,
}
enum ProjectileAction: int {
	None,
	Damage,
	Heal,
}
enum FontType: int {
	None,
	Damage,
	Block,
	Heal,
	Miss,
	Critical,
	Skill,
	Immune,
	DamageResist,
	DamageWeak,
	CriticalResist,
	CriticalWeak,
	Effective,
	CriticalEffective,
}
enum EmoticonEvent: int {
	CoverEnter,
	ShelterEnter,
	Panic,
	NearlyDead,
	Reload,
	Found,
	GetBeacon,
	Warning,
}
enum BulletType: int {
	Normal,
	Pierce,
	Explosion,
	Siege,
	Mystic,
	None,
	Sonic,
}
enum ActionType: int {
	Crush,
	Courage,
	Tactic,
}
enum BuffOverlap: int {
	Able,
	Unable,
	Change,
	Additive,
}
enum ReArrangeTargetType: int {
	AllySelf,
	AllyAll,
	AllyUnitType,
	AllyGroup,
}
enum ArmorType: int {
	LightArmor,
	HeavyArmor,
	Unarmed,
	Structure,
	Normal,
	ElasticArmor,
}
enum WeaponType: int {
	None,
	SG,
	SMG,
	AR,
	GL,
	HG,
	RL,
	SR,
	DSMG,
	RG,
	DSG,
	Vulcan,
	Missile,
	Cannon,
	Taser,
	MG,
	Binah,
	MT,
	Relic,
	FT,
}
enum EntityMaterialType: int {
	Wood,
	Stone,
	Flesh,
	Metal,
}
enum CoverMotionType: int {
	All,
	Kneel,
}
enum TargetSortBy: int {
	DISTANCE,
	HP,
	DAMAGE_EFFICIENCY,
	TARGETED_COUNT,
	RANDOM,
	FRONT_FORMATION,
}
enum PositioningType: int {
	CloseToObstacle,
	CloseToTarget,
}
enum DamageType: int {
	Normal,
	Critical,
	IgnoreDefence,
}
enum FormationLine: int {
	Students,
	TSS,
}
enum ExternalBTNodeType: int {
	Sequence,
	Selector,
	Instant,
	SubNode,
	ExecuteAll,
}
enum ExternalBTTrigger: int {
	None,
	HPUnder,
	ApplySkillEffectCategory,
	HaveNextExSkillActiveGauge,
	UseNormalSkill,
	UseExSkill,
	CheckActiveGaugeOver,
	CheckPeriod,
	CheckSummonCharacterCountOver,
	CheckSummonCharacterCountUnder,
	ApplyGroggy,
	ApplyLogicEffectTemplateId,
	OnSpawned,
	CheckActiveGaugeBetween,
	DestroyParts,
	CheckHallucinationCountOver,
	CheckHallucinationCountUnder,
	UseSkillEndGroupId,
}
enum ExternalBehavior: int {
	UseNextExSkill,
	ChangePhase,
	ChangeSection,
	AddActiveGauge,
	UseSelectExSkill,
	ClearNormalSkill,
	MoveLeft,
	MoveRight,
	AllUseSelectExSkill,
	ConnectCharacterToDummy,
	ConnectExSkillToParts,
	SetMaxHPToParts,
	AlivePartsUseExSkill,
	ActivatePart,
	AddGroggy,
	SelectTargetToUseSkillAlly,
	ForceChangePhase,
	ClearUseSkillEndGroupId,
}
enum TacticEntityType: int {
	None,
	Student,
	Minion,
	Elite,
	Champion,
	Boss,
	Obstacle,
	Servant,
	Vehicle,
	Summoned,
	Hallucination,
	DestructibleProjectile,
}
enum BuffIconType: int {
	None,
	Debuff_DyingPenalty,
	CC_MindControl,
	CC_Inoperative,
	CC_Confusion,
	CC_Provoke,
	CC_Silence,
	CC_Blind,
	Dot_Damage,
	Dot_Heal,
	Buff_AttackPower,
	Buff_CriticalChance,
	Buff_CriticalDamage,
	Buff_DefensePower,
	Buff_Dodge,
	Buff_Hit,
	Buff_WeaponRange,
	Buff_SightRange,
	Buff_MoveSpeed,
	Buff_Mind,
	Debuf_AttackPower,
	Debuff_CriticalChance,
	Debuff_CriticalDamage,
	Debuff_DefensePower,
	Debuff_Dodge,
	Debuff_Hit,
	Debuff_WeaponRange,
	Debuff_SightRange,
	Debuff_MoveSpeed,
	Debuff_Mind,
	Buff_AttackTime,
	Debuff_AttackTime,
	Buff_MaxHp,
	Debuff_MaxHp,
	Buff_MaxBulletCount,
	Debuff_MaxBulletCount,
	Debuff_SuppliesCondition,
	Buff_HealEffectivenessRate,
	Debuff_HealEffectivenessRate,
	Buff_HealPower,
	Debuff_HealPower,
	Buff_CriticalChanceResistPoint,
	Debuff_CriticalChanceResistPoint,
	CC_Stunned,
	Debuff_ConcentratedTarget,
	Buff_Immortal,
	Max,
}
enum Difficulty: int {
	Normal,
	Hard,
	VeryHard,
	Hardcore,
	Extreme,
	Insane,
	Torment,
}
enum EngageType: int {
	SearchAndMove,
	HoldPosition,
}
enum HitEffectPosition: int {
	Position,
	HeadBone,
	BodyBone,
	Follow,
}
enum StageTopography: int {
	Street,
	Outdoor,
	Indoor,
}
enum TerrainAdaptationStat: int {
	D,
	C,
	B,
	A,
	S,
	SS,
}
enum SquadType: int {
	None,
	Main,
	Support,
	TSS,
}
enum ObstacleClass: int {
	MAIN,
	SUB,
}
enum ObstacleDestroyType: int {
	Remain,
	Remove,
}
enum ObstacleHeightType: int {
	Low,
	Middle,
	High,
}
enum ObstacleCoverType: int {
	None,
	Cover,
	Shelter,
}
enum SkillCategory: int {
	None,
}
enum LogicEffectCategory: int {
	None,
	Attack,
	Heal,
	Buff,
	Debuff,
	CrowdControl,
	Boss,
	Dummy,
}
enum AimIKType: int {
	None,
	OneHandRight,
	OneHandLeft,
	TwoHandRight,
	TwoHandLeft,
	Tripod,
	Dual,
	Max,
}
enum DamageAttribute: int {
	Resist,
	Normal,
	Weak,
	Effective,
}
enum SkillPriorityCheckCondition: int {
	None,
	HPRateUnder,
	DebuffCountOver,
	BuffCountOver,
	CrowdControlOver,
}
enum SkillPriorityCheckTarget: int {
	Ally,
	Enemy,
	All,
}
enum StageType: int {
	Main,
	Sub,
}
enum OperatorCondition: int {
	None,
	StrategyStart,
	StrategyVictory,
	StrategyDefeat,
	AdventureCombatStart,
	AdventureCombatVictory,
	AdventureCombatDefeat,
	ArenaCombatStart,
	ArenaCombatVictory,
	ArenaCombatDefeat,
	WeekDungeonCombatStart,
	WeekDungeonCombatVictory,
	WeekDungeonCombatDefeat,
	SchoolDungeonCombatStart,
	SchoolDungeonCombatVictory,
	SchoolDungeonCombatDefeat,
	StrategyWarpUnitFromHideTile,
	TimeAttackDungeonStart,
	TimeAttackDungeonVictory,
	TimeAttackDungeonDefeat,
	WorldRaidBossSpawn,
	WorldRaidBossKill,
	WorldRaidBossDamaged,
	WorldRaidScenarioBattle,
	MinigameTBGThemaOpen,
	MinigameTBGThemaComeback,
	MinigameTBGAllyRevive,
	MinigameTBGItemUse,
}
enum KnockbackDirection: int {
	TargetToCaster,
	CasterToTarget,
	TargetToHitPosition,
	HitPositionToTarget,
	CasterToHitPosition,
	HitPositionToCaster,
	Caster,
	Target,
}
enum EndCondition: int {
	Duration,
	ReloadCount,
	AmmoCount,
	AmmoHit,
	HitCount,
	None,
	UseExSkillCount,
}
enum LogicEffectSound: int {
	None,
	Damage,
	Heal,
	Knockback,
}
enum EffectBone: int {
	None,
	Shot,
	Head,
	Body,
	Shot2,
	Shot3,
	Extra,
	Extra2,
	Extra3,
}
enum ArenaSimulatorServer: int {
	Preset,
	Live,
	Dev,
	QA,
}
enum ClearCheck: int {
	None,
	Success_Play,
	Success_Sweep,
	Fail_Timeout,
	Fail_PlayerGiveUp,
	Fail_Annihilation,
}
enum BuffType: int {
	None,
	Buff_AttackPower,
	Buff_CriticalChance,
	Buff_CriticalDamage,
	Buff_DefensePower,
	Buff_Dodge,
	Buff_Hit,
	Buff_WeaponRange,
	Buff_SightRange,
	Buff_MoveSpeed,
	Buff_AttackTime,
	Buff_MaxHp,
	Buff_MaxBulletCount,
	DeBuff_AttackPower,
	DeBuff_CriticalChance,
	DeBuff_CriticalDamage,
	DeBuff_DefensePower,
	DeBuff_Dodge,
	DeBuff_Hit,
	DeBuff_WeaponRange,
	DeBuff_SightRange,
	DeBuff_MoveSpeed,
	DeBuff_AttackTime,
	DeBuff_MaxHp,
	DeBuff_MaxBulletCount,
}
enum WorldRaidDifficulty: int {
	None,
	A,
	B,
	C,
	D,
	E,
	F,
	G,
}
enum TacticSpeed: int {
	None,
	Slow,
	Normal,
	Fast,
}
enum TacticSkillUse: int {
	None,
	Auto,
	Manual,
}
enum ShowSkillCutIn: int {
	None,
	Once,
	Always,
}
enum BattleCalculationStat: int {
	FinalDamage,
	FinalHeal,
	FinalDamageRatio,
	FinalDamageRatio2,
	FinalCriticalRate,
}
enum StatTransType: int {
	SpecialTransStat,
	TSATransStat,
}
enum StatLevelUpType: int {
	Standard,
	Premature,
	LateBloom,
	Obstacle,
	TimeAttack,
}
enum GrowthCategory: int {
	None,
	LevelUp,
	Transcend,
	SkillLevelUp,
}
enum StatType: int {
	None,
	MaxHP,
	AttackPower,
	DefensePower,
	HealPower,
	AccuracyPoint,
	AccuracyRate,
	DodgePoint,
	DodgeRate,
	CriticalPoint,
	CriticalChanceRate,
	CriticalResistChanceRate,
	CriticalDamageRate,
	MoveSpeed,
	SightRange,
	ActiveGauge,
	StabilityPoint,
	StabilityRate,
	ReloadTime,
	MaxBulletCount,
	IgnoreDelayCount,
	WeaponRange,
	BlockRate,
	BodyRadius,
	ActionCount,
	StrategyMobility,
	StrategySightRange,
	StreetBattleAdaptation,
	OutdoorBattleAdaptation,
	IndoorBattleAdaptation,
	HealEffectivenessRate,
	CriticalChanceResistPoint,
	CriticalDamageResistRate,
	LifeRecoverOnHit,
	NormalAttackSpeed,
	AmmoCost,
	GroggyGauge,
	GroggyTime,
	DamageRatio,
	DamagedRatio,
	OppressionPower,
	OppressionResist,
	RegenCost,
	InitialWeaponRangeRate,
	DefensePenetration,
	DefensePenetrationResisit,
	ExtendBuffDuration,
	ExtendDebuffDuration,
	ExtendCrowdControlDuration,
	EnhanceExplosionRate,
	EnhancePierceRate,
	EnhanceMysticRate,
	EnhanceLightArmorRate,
	EnhanceHeavyArmorRate,
	EnhanceUnarmedRate,
	EnhanceSiegeRate,
	EnhanceNormalRate,
	EnhanceStructureRate,
	EnhanceNormalArmorRate,
	DamageRatio2Increase,
	DamageRatio2Decrease,
	DamagedRatio2Increase,
	DamagedRatio2Decrease,
	EnhanceSonicRate,
	EnhanceElasticArmorRate,
	ExDamagedRatioIncrease,
	ExDamagedRatioDecrease,
	Max,
}
enum ProductionStep: int {
	ToDo,
	Doing,
	Complete,
	Release,
}
enum TacticRole: int {
	None,
	DamageDealer,
	Tanker,
	Supporter,
	Healer,
	Vehicle,
}
enum TacticRange: int {
	Back,
	Front,
	Middle,
}
enum CVCollectionType: int {
	CVNormal,
	CVEvent,
	CVEtc,
}
enum CVPrintType: int {
	CharacterOverwrite,
	PrefabOverwrite,
	Add,
}
enum CVExceptionTarget: int {
	CharacterId,
	SquadType,
}
enum PotentialStatBonusRateType: int {
	None,
	MaxHP,
	AttackPower,
	HealPower,
}
enum ClanSocialGrade: int {
	None,
	President,
	Manager,
	Member,
	Applicant,
	Refused,
	Kicked,
	Quit,
	VicePredisident,
}
enum ClanJoinOption: int {
	Free,
	Permission,
	All,
}
enum ClanSearchOption: int {
	Name,
	Id,
}
enum ClanRewardType: int {
	None,
	AssistTerm,
	AssistRent,
	Attendance,
}
enum ConquestEnemyType: int {
	None,
	Normal,
	MiddleBoss,
	Boss,
	UnexpectedEvent,
	Challenge,
	IndividualErosion,
	MassErosion,
}
enum ConquestTeamType: int {
	None,
	Team1,
	Team2,
	Team3,
}
enum ConquestTileType: int {
	None,
	Start,
	Normal,
	Battle,
	Base,
}
enum ConquestObjectType: int {
	None,
	ParcelOneTimePerAccount,
}
enum ConquestItemType: int {
	None,
	EventPoint,
	EventToken1,
	EventToken2,
	EventToken3,
	EventToken4,
	EventToken5,
}
enum ConquestProgressType: int {
	None,
	Upgrade,
	Manage,
}
enum TileState: int {
	None,
	PartiallyConquested,
	FullyConquested,
}
enum ConquestEventType: int {
	None,
	Event01,
	Event02,
}
enum ConquestConditionType: int {
	None,
	OpenDateOffset,
	ItemAcquire,
	ParcelUse,
	KillUnit,
}
enum ConquestErosionType: int {
	None,
	IndividualErosion,
	MassErosion,
}
enum ContentType: int {
	None,
	CampaignMainStage,
	CampaignSubStage,
	WeekDungeon,
	EventContentMainStage,
	EventContentSubStage,
	CampaignTutorialStage,
	EventContentMainGroundStage,
	SchoolDungeon,
	TimeAttackDungeon,
	Raid,
	Conquest,
	EventContentStoryStage,
	CampaignExtraStage,
	StoryStrategyStage,
	ScenarioMode,
	EventContent,
	WorldRaid,
	EliminateRaid,
	Chaser,
	FieldContentStage,
	MultiFloorRaid,
	Temp,
}
enum EventContentType: int {
	Stage,
	Gacha,
	Mission,
	Shop,
	Raid,
	Arena,
	BoxGacha,
	Collection,
	Recollection,
	MiniGameRhythm,
	CardShop,
	EventLocation,
	MinigameRhythmEvent,
	FortuneGachaShop,
	SubEvent,
	EventMeetup,
	BoxGachaResult,
	Conquest,
	WorldRaid,
	DiceRace,
	MiniGameRhythmMission,
	WorldRaidEntrance,
	MiniEvent,
	MiniGameShooting,
	MiniGameShootingMission,
	MiniGameTBG,
	TimeAttackDungeon,
	EliminateRaid,
	Treasure,
	Field,
	MultiFloorRaid,
	MinigameDreamMaker,
	Temp,
}
enum OpenCondition: int {
	Hide,
	Lock,
	Open,
}
enum ResetContentType: int {
	None,
	HardStagePlay,
	StarategyMapHeal,
	ShopRefresh,
	ArenaDefenseVictoryReward,
	WeeklyMasterCoin,
	WorldRaidGemEnterCount,
	ConquestDailyErosionCheck,
	MiniEventToken,
}
enum WeekDungeonType: int {
	None,
	ChaserA,
	ChaserB,
	ChaserC,
	FindGift,
	Blood,
}
enum StarGoalType: int {
	None,
	AllAlive,
	Clear,
	GetBoxes,
	ClearTimeInSec,
	AllyBaseDamage,
}
enum OpenConditionContent: int {
	Shop,
	Gacha,
	LobbyIllust,
	Raid,
	Cafe,
	Unit_Growth_Skill,
	Unit_Growth_LevelUp,
	Unit_Growth_Transcendence,
	Arena,
	Academy,
	Equip,
	Item,
	Favor,
	Prologue,
	Mission,
	WeekDungeon_Chase,
	__Deprecated_WeekDungeon_FindGift,
	__Deprecated_WeekDungeon_Blood,
	Story_Sub,
	Story_Replay,
	WeekDungeon,
	None,
	Shop_Gem,
	Craft,
	Student,
	GuideMission,
	Clan,
	Echelon,
	Campaign,
	EventContent,
	Guild,
	EventStage_1,
	EventStage_2,
	Talk,
	Billing,
	Schedule,
	Story,
	Tactic_Speed,
	Cafe_Invite,
	EventMiniGame_1,
	SchoolDungeon,
	TimeAttackDungeon,
	ShiftingCraft,
	WorldRaid,
	Tactic_Skip,
	Mulligan,
	EventPermanent,
	Main_L_1_2,
	Main_L_1_3,
	Main_L_1_4,
	EliminateRaid,
	Cafe_2,
	Cafe_Invite_2,
	MultiFloorRaid,
	StrategySkip,
	MinigameDreamMaker,
	Temp,
}
enum ContentLockType: int {
	None,
	NotUseControlledByOtherSetting,
	Academy,
	MultiFloorRaid,
	EventContent,
	EventNotice,
	GuideMission,
	Campaign,
	Story,
	WeekDungeon_Chase,
	WeekDungeon,
	SchoolDungeon,
	Raid,
	EliminateRaid,
	TimeAttackDungeon,
	Arena,
	Cafe,
	GemShop,
	Gacha,
	Craft,
	MomoTalk,
}
enum TutorialFailureContentType: int {
	None,
	Campaign,
	WeekDungeon,
	Raid,
	TimeAttackDungeon,
	WorldRaid,
	Conquest,
	EliminateRaid,
	MultiFloorRaid,
}
enum FeverBattleType: int {
	Campaign,
	Raid,
	WeekDungeon,
	Arena,
}
enum EventContentScenarioConditionType: int {
	None,
	DayAfter,
	EventPoint,
}
enum EventTargetType: int {
	WeekDungeon,
	Chaser,
	Campaign_Normal,
	Campaign_Hard,
	SchoolDungeon,
	AcademySchedule,
	TimeAttackDungeon,
	AccountLevelExpIncrease,
	Raid,
	EliminateRaid,
}
enum ContentResultType: int {
	Failure,
	Success,
}
enum EventContentItemType: int {
	EventPoint,
	EventToken1,
	EventToken2,
	EventToken3,
	EventToken4,
	EventToken5,
	EventMeetUpTicket,
	EventEtcItem,
}
enum RaidSeasonType: int {
	None,
	Open,
	Close,
	Settlement,
}
enum BuffConditionType: int {
	All,
	Character,
	School,
	Weapon,
}
enum CollectionUnlockType: int {
	None,
	ClearSpecificEventStage,
	ClearSpecificEventScenario,
	ClearSpecificEventMission,
	PurchaseSpecificItemCount,
	SpecificEventLocationRank,
	DiceRaceConsumeDiceCount,
	MinigameTBGThemaClear,
	MinigameEnter,
	MinigameDreamMakerParameter,
	ClearSpecificScenario,
}
enum ShortcutContentType: int {
	None,
	CampaignStage,
	EventStage,
	Blood,
	WeekDungeon,
	Arena,
	Raid,
	Shop,
	ItemInventory,
	Craft,
	SchoolDungeon,
	Academy,
	Mission,
	MultiFloorRaid,
}
enum JudgeGrade: int {
	None,
	Miss,
	Attack,
	Critical,
}
enum SchoolDungeonType: int {
	SchoolA,
	SchoolB,
	SchoolC,
	None,
}
enum EventContentBuffFindRule: int {
	None,
	WeaponType,
	SquadType,
	StreetBattleAdaptation,
	OutdoorBattleAdaptation,
	IndoorBattleAdaptation,
	BulletType,
	School,
	TacticRange,
}
enum TimeAttackDungeonRewardType: int {
	Fixed,
	TimeWeight,
}
enum TimeAttackDungeonType: int {
	None,
	Defense,
	Shooting,
	Destruction,
	Escort,
}
enum SuddenMissionContentType: int {
	OrdinaryState,
	CampaignNormalStage,
	CampaignHardStage,
	EventStage,
	WeekDungeon,
	Chaser,
	SchoolDungeon,
	TimeAttackDungeon,
	Raid,
}
enum ContentsChangeType: int {
	None,
	WorldRaidBossDamageRatio,
	WorldRaidBossGroupDate,
}
enum EventNotifyType: int {
	RewardIncreaseEvent,
	AccountExpIncreaseEvent,
	RaidSeasonManager,
	TimeAttackDungeonSeasonManage,
	EliminateRaidSeasonManage,
}
enum EventContentDiceRaceResultType: int {
	DiceResult1,
	DiceResult2,
	DiceResult3,
	DiceResult4,
	DiceResult5,
	DiceResult6,
	MoveForward,
	LapFinish,
	EventOccur,
	DiceResultFixed1,
	DiceResultFixed2,
	DiceResultFixed3,
	DiceResultFixed4,
	DiceResultFixed5,
	DiceResultFixed6,
	SpecialReward,
}
enum EventContentDiceRaceNodeType: int {
	StartNode,
	RewardNode,
	MoveForwardNode,
	SpecialRewardNode,
}
enum MeetupConditionType: int {
	None,
	EventContentStageClear,
	ScenarioClear,
}
enum MeetupConditionPrintType: int {
	None,
	Lock,
	Hide,
}
enum GuideMissionTabType: int {
	None,
	Daily,
	StageClear,
}
enum RankingSearchType: int {
	None,
	Rank,
	Score,
}
enum EventContentReleaseType: int {
	None,
	Permanent,
	MainStory,
	PermanentSpecialOperate,
	PermanentConquest,
}
enum CraftSlotIndex: int {
	Slot00,
	Slot01,
	Slot02,
	Max,
}
enum CraftNodeTier: int {
	Base,
	Node01,
	Node02,
	Node03,
	Max,
}
enum SubEventType: int {
	None,
	SubEvent,
	SubEventPermanent,
}
enum EquipmentCategory: int {
	Unable,
	Exp,
	Bag,
	Hat,
	Gloves,
	Shoes,
	Badge,
	Hairpin,
	Charm,
	Watch,
	Necklace,
	WeaponExpGrowthA,
	WeaponExpGrowthB,
	WeaponExpGrowthC,
	WeaponExpGrowthZ,
}
enum EquipmentOptionType: int {
	None,
	MaxHP_Base,
	MaxHP_Coefficient,
	AttackPower_Base,
	AttackPower_Coefficient,
	DefensePower_Base,
	DefensePower_Coefficient,
	HealPower_Base,
	HealPower_Coefficient,
	CriticalPoint_Base,
	CriticalPoint_Coefficient,
	CriticalChanceRate_Base,
	CriticalDamageRate_Base,
	CriticalDamageRate_Coefficient,
	SightRange_Base,
	SightRange_Coefficient,
	MaxBulletCount_Base,
	MaxBulletCount_Coefficient,
	HPRecoverOnKill_Base,
	HPRecoverOnKill_Coefficient,
	StreetBattleAdaptation_Base,
	OutdoorBattleAdaptation_Base,
	IndoorBattleAdaptation_Base,
	HealEffectivenessRate_Base,
	HealEffectivenessRate_Coefficient,
	CriticalChanceResistPoint_Base,
	CriticalChanceResistPoint_Coefficient,
	CriticalDamageResistRate_Base,
	CriticalDamageResistRate_Coefficient,
	ExSkillUpgrade,
	OppressionPower_Base,
	OppressionPower_Coefficient,
	OppressionResist_Base,
	OppressionResist_Coefficient,
	StabilityPoint_Base,
	StabilityPoint_Coefficient,
	AccuracyPoint_Base,
	AccuracyPoint_Coefficient,
	DodgePoint_Base,
	DodgePoint_Coefficient,
	MoveSpeed_Base,
	MoveSpeed_Coefficient,
	Max,
	NormalAttackSpeed_Base,
	NormalAttackSpeed_Coefficient,
	DefensePenetration_Base,
	DefensePenetrationResisit_Base,
	ExtendBuffDuration_Base,
	ExtendDebuffDuration_Base,
	ExtendCrowdControlDuration_Base,
	EnhanceExplosionRate_Base,
	EnhanceExplosionRate_Coefficient,
	EnhancePierceRate_Base,
	EnhancePierceRate_Coefficient,
	EnhanceMysticRate_Base,
	EnhanceMysticRate_Coefficient,
	EnhanceLightArmorRate_Base,
	EnhanceLightArmorRate_Coefficient,
	EnhanceHeavyArmorRate_Base,
	EnhanceHeavyArmorRate_Coefficient,
	EnhanceUnarmedRate_Base,
	EnhanceUnarmedRate_Coefficient,
	EnhanceSiegeRate_Base,
	EnhanceSiegeRate_Coefficient,
	EnhanceNormalRate_Base,
	EnhanceNormalRate_Coefficient,
	EnhanceStructureRate_Base,
	EnhanceStructureRate_Coefficient,
	EnhanceNormalArmorRate_Base,
	EnhanceNormalArmorRate_Coefficient,
	DamageRatio2Increase_Base,
	DamageRatio2Increase_Coefficient,
	DamageRatio2Decrease_Base,
	DamageRatio2Decrease_Coefficient,
	DamagedRatio2Increase_Base,
	DamagedRatio2Increase_Coefficient,
	DamagedRatio2Decrease_Base,
	DamagedRatio2Decrease_Coefficient,
	EnhanceSonicRate_Base,
	EnhanceSonicRate_Coefficient,
	EnhanceElasticArmorRate_Base,
	EnhanceElasticArmorRate_Coefficient,
	IgnoreDelayCount_Base,
	WeaponRange_Base,
	BlockRate_Base,
	BlockRate_Coefficient,
	AmmoCost_Base,
	RegenCost_Base,
	RegenCost_Coefficient,
}
enum MultipleConditionCheckType: int {
	And,
	Or,
}
enum Language: int {
	Kr,
	Jp,
	Th,
	Tw,
	En,
}
enum SoundType: int {
	UI,
	BGM,
	FX,
}
enum WeekDay: int {
	Sunday,
	Monday,
	Tuesday,
	Wednesday,
	Thursday,
	Friday,
	Saturday,
	All,
}
enum EchelonType: int {
	None,
	Adventure,
	Raid,
	ArenaAttack,
	ArenaDefence,
	WeekDungeonChaserA,
	Scenario,
	WeekDungeonBlood,
	WeekDungeonChaserB,
	WeekDungeonChaserC,
	WeekDungeonFindGift,
	EventContent,
	SchoolDungeonA,
	SchoolDungeonB,
	SchoolDungeonC,
	TimeAttack,
	WorldRaid,
	Conquest,
	ConquestManage,
	StoryStrategyStage,
	EliminateRaid01,
	EliminateRaid02,
	EliminateRaid03,
	Field,
	MultiFloorRaid,
	Temp,
}
enum EchelonExtensionType: int {
	Base,
	Extension,
}
enum NoticeType: int {
	None,
	Notice,
	Event,
}
enum RewardTag: int {
	Default,
	FirstClear,
	StrategyObject,
	Event,
	ThreeStar,
	ProductMonthly,
	Rare,
	EventBonus,
	TimeWeight,
	ProductWeekly,
	ProductBiweekly,
	EventPermanentReward,
	ConquestManageEvent,
	ConquestManageDefault,
	ConquestCalculateDefault,
	ConquestCalculateLevel2,
	ConquestCalculateLevel3,
	ConquestFootholdUpgrade2,
	ConquestFootholdUpgrade3,
	ConquestErosionPenalty,
	GemBonus,
	GemPaid,
	ConquestTileConquer,
}
enum ArenaRewardType: int {
	None,
	Time,
	Daily,
	SeasonRecord,
	OverallRecord,
	SeasonClose,
	AttackVictory,
	DefenseVictory,
	RankIcon,
}
enum ServiceActionType: int {
	ClanCreate,
	HardAdventurePlayCountRecover,
}
enum RaidStatus: int {
	None,
	Playing,
	Clear,
	Close,
}
enum WebAPIErrorLevel: int {
	None,
	Warning,
	Error,
}
enum GachaTicketType: int {
	None,
	PackageThreeStar,
	ThreeStar,
	TwoStar,
	Normal,
	NormalOnce,
	SelectRecruit,
	PackagePropertyThreeStar,
	Temp_1,
	PackageAcademyThreeStar,
}
enum EventChangeType: int {
	MainSub,
	SubMain,
}
enum CafeCharacterState: int {
	None,
	Idle,
	Walk,
	Reaction,
	Interaction,
	Max,
}
enum FurnitureFunctionType: int {
	None,
	EventCollection,
	VideoPlay,
	TrophyCollection,
	InteractionBGMPlay,
}
enum NotificationEventReddot: int {
	StagePointReward,
	MissionComplete,
	MiniGameMissionComplete,
	WorldRaidReward,
	ConquestCalculateReward,
	DiceRaceLapReward,
}
enum EmblemCategory: int {
	None,
	Default,
	Mission,
	GroupStory,
	Event,
	MainStory,
	Favor,
	Boss,
	Etc,
	Etc_Anniversary,
	MultiFloorRaid,
	Potential,
}
enum EmblemDisplayType: int {
	Always,
	Time,
	Favor,
	Potential,
}
enum EmblemCheckPassType: int {
	None,
	Default,
	Favor,
	Story,
	Potential,
}
enum StickerGetConditionType: int {
	None,
	StickerCheckPass,
	GetStickerCondition,
}
enum Nation: int {
	None,
	All,
	JP,
	GL,
	KR,
}
enum FilterCategory: int {
	Character,
	Equipment,
	Item,
	Craft,
	ShiftCraft,
	Shop,
	MemoryLobby,
	Trophy,
	Emblem,
}
enum FilterIcon: int {
	TextOnly,
	TextWithIcon,
	Pin,
	Role,
	CharacterStar,
	WeaponStar,
	Attack,
	Defense,
	Range,
	MemoryLobby,
}
enum FieldConditionType: int {
	Invalid,
	Interaction,
	QuestInProgress,
	QuestClear,
	Date,
	StageClear,
	HasKeyword,
	HasEvidence,
	OpenDate,
	OpenDateAfter,
}
enum FieldInteractionType: int {
	None,
	Scenario,
	Reward,
	Dialog,
	Stage,
	KeywordFound,
	EvidenceFound,
	SceneChange,
	Timeline,
	ActionTrigger,
	Interplay,
}
enum FieldConditionClass: int {
	AndOr,
	OrAnd,
	Multi,
}
enum FieldDialogType: int {
	None,
	Talk,
	Think,
	Exclaim,
	Question,
	Upset,
	Surprise,
	Bulb,
	Heart,
	Sweat,
	Angry,
	Music,
	Dot,
	Momotalk,
	Phone,
	Keyword,
	Evidence,
}
enum FieldTutorialType: int {
	None,
	MasteryHUD,
	QuestHUD,
	WorldMapHUD,
}
enum FriendSearchLevelOption: int {
	Recommend,
	All,
	Level1To30,
	Level31To40,
	Level41To50,
	Level51To60,
	Level61To70,
	Level71To80,
	Level81To90,
	Level91To100,
}
enum ItemCategory: int {
	Coin,
	CharacterExpGrowth,
	SecretStone,
	Material,
	Consumable,
	Collectible,
	Favor,
	RecruitCoin,
	InvisibleToken,
}
enum MailType: int {
	System,
	Attendance,
	Event,
	MassTrade,
	InventoryFull,
	ArenaDefenseVictory,
	CouponUsageReward,
	ArenaSeasonClose,
	ProductReward,
	MonthlyProductReward,
	ExpiryChangeItem,
	ClanAttendance,
	AccountLink,
	NewUserBonus,
	LeftClanAssistReward,
	AttendanceImmediately,
	WeeklyProductReward,
	BiweeklyProductReward,
	Temp_1,
	Temp_2,
	Temp_3,
	CouponCompleteReward,
	BirthdayMail,
}
enum AttendanceType: int {
	Basic,
	Event,
	Newbie,
	EventCountDown,
	Event20Days,
}
enum AttendanceCountRule: int {
	Accumulation,
	Date,
}
enum AttendanceResetType: int {
	User,
	Server,
}
enum DreamMakerMultiplierCondition: int {
	None,
	Round,
	CollectionCount,
	EndingCount,
}
enum DreamMakerParameterType: int {
	None,
	Param01,
	Param02,
	Param03,
	Param04,
}
enum DreamMakerResult: int {
	None,
	Fail,
	Success,
	Perfect,
}
enum DreamMakerParamOperationType: int {
	None,
	GrowUpHigh,
	GrowUp,
	GrowDownHigh,
	GrowDown,
}
enum DreamMakerEndingCondition: int {
	None,
	Param01,
	Param02,
	Param03,
	Param04,
	Round,
	CollectionCount,
}
enum DreamMakerVoiceCondition: int {
	None,
	Fail,
	Success,
	Perfect,
	DailyResult,
}
enum DreamMakerEndingType: int {
	None,
	Normal,
	Special,
}
enum DreamMakerEndingRewardType: int {
	None,
	FirstEndingReward,
	LoopEndingReward,
}
enum Geas: int {
	ForwardProjectile,
	DiagonalProjectile,
	SideProjectile,
	Pierce,
	Reflect,
	Burn,
	Chill,
	AttackPower,
	AttackSpeed,
	Critical,
	Heal,
	MoveSpeed,
	LifeSteal,
	Evasion,
}
enum TBGObjectType: int {
	None,
	EnemyBoss,
	EnemyMinion,
	Random,
	Facility,
	TreasureBox,
	Start,
	Portal,
}
enum TBGOptionSuccessType: int {
	None,
	TBGItemAcquire,
	ItemAcquire,
	TBGDiceAcquire,
	Portal,
}
enum TBGItemType: int {
	None,
	Dice,
	Heal,
	HealExpansion,
	Defence,
	Guide,
	DiceResultValue,
	DefenceCritical,
	DiceResultConfirm,
}
enum TBGItemEffectType: int {
	None,
	PermanentContinuity,
	TemporaryContinuation,
	Immediately,
}
enum TBGTileType: int {
	None,
	Start,
	Movable,
	UnMovable,
}
enum TBGThemaType: int {
	None,
	Normal,
	Hidden,
}
enum TBGPortalCondition: int {
	None,
	ObjectAllEncounter,
	Round,
}
enum TBGProbModifyCondition: int {
	None,
	AllyRevive,
	DicePlayFail,
}
enum TBGVoiceCondition: int {
	None,
	DiceResultSuccess,
	DiceResultFailBattle,
	DiceResultFailRandom,
	EnemyDie,
	TreasureBoxNormal,
	TreasureBoxSpecial,
	FacilityResult,
}
enum MiniGameTBGThemaRewardType: int {
	TreasureReward,
	EmptyTreasureReward,
	HiddenThemaTreasureReward,
}
enum MissionCategory: int {
	Challenge,
	Daily,
	Weekly,
	Achievement,
	GuideMission,
	All,
	MiniGameScore,
	MiniGameEvent,
	EventAchievement,
	DailySudden,
	DailyFixed,
	EventFixed,
}
enum MissionResetType: int {
	None,
	Daily,
	Weekly,
	Limit,
}
enum MissionCompleteConditionType: int {
	None,
	Reset_DailyLogin,
	Reset_DailyLoginCount,
	Reset_CompleteMission,
	Achieve_EquipmentLevelUpCount,
	Achieve_EquipmentTierUpCount,
	Achieve_CharacterLevelUpCount,
	Reset_CharacterTranscendenceCount,
	Reset_ClearTaticBattleCount,
	Achieve_ClearCampaignStageCount,
	Reset_KillSpecificEnemyCount,
	Reset_KillEnemyWithTagCount,
	Reset_GetCharacterCount,
	Reset_GetCharacterWithTagCount,
	Reset_GetSpecificCharacterCount,
	Reset_AccountLevelUp,
	Reset_GetEquipmentCount,
	Reset_GachaCount,
	Reset_UseGem,
	Reset_GetGem,
	Reset_GetGemPaid,
	Achieve_GetGold,
	Achieve_GetItem,
	Reset_GetFavorLevel,
	Reset___Deprecated_EquipmentAtSpecificLevelCount,
	Reset_EquipmentAtSpecificTierUpCount,
	Reset_CharacterAtSpecificLevelCount,
	Reset_CharacterAtSpecificTranscendenceCount,
	Achieve_CharacterSkillLevelUpCount,
	Reset_CharacterAtSpecificSkillLevelCount,
	Reset_CompleteScheduleCount,
	Reset_CompleteScheduleGroupCount,
	Reset_AcademyLocationRankSum,
	Reset_CraftCount,
	Achieve_GetComfortPoint,
	Achieve_GetWeaponCount,
	Reset_EquipWeaponCount_Obsolete,
	Reset_CompleteScheduleWithSpecificCharacter,
	Reset_CafeInteractionCount,
	Reset_SpecificCharacterAtSpecificLevel,
	Reset_SpecificCharacterAtSpecificTranscendence,
	Reset_LobbyInteraction,
	Achieve_ClearFindGiftAndBloodDungeonCount,
	Reset_ClearSpecificFindGiftAndBloodDungeonCount,
	Achieve_JoinRaidCount,
	Reset_JoinSpecificRaidCount,
	Achieve_JoinArenaCount,
	Reset_ArenaVictoryCount,
	Reset_RaidDamageAmountOnOneBattle,
	Reset_ClearEventStageCount,
	Reset_UseSpecificCharacterCount,
	Achieve_UseGold,
	Reset_UseTiket,
	Reset_ShopBuyCount,
	Reset_ShopBuyActionPointCount,
	Reset_SpecificCharacterAtSpecificFavorRank,
	Reset_ClearSpecificScenario,
	Reset_GetSpecificItemCount,
	Achieve_TotalGetClearStarCount,
	Reset_CompleteCampaignStageMinimumTurn,
	Achieve_TotalLoginCount,
	Reset_LoginAtSpecificTime,
	Reset_CompleteFavorSchedule,
	Reset_CompleteFavorScheduleAtSpecificCharacter,
	Reset_GetMemoryLobbyCount,
	Reset_GetFurnitureGroupCount,
	Reset_AcademyLocationAtSpecificRank,
	Reset_ClearCampaignStageDifficultyNormal,
	Reset_ClearCampaignStageDifficultyHard,
	Achieve_ClearChaserDungeonCount,
	Reset_ClearSpecificChaserDungeonCount,
	Reset_GetCafeRank,
	Reset_SpecificStarCharacterCount,
	Reset_EventClearCampaignStageCount,
	Reset_EventClearSpecificCampaignStageCount,
	Reset_EventCompleteCampaignStageMinimumTurn,
	Reset_EventClearCampaignStageDifficultyNormal,
	Reset_EventClearCampaignStageDifficultyHard,
	Reset_ClearSpecificCampaignStageCount,
	Reset_GetItemWithTagCount,
	Reset_GetFurnitureWithTagCount,
	Reset_GetEquipmentWithTagCount,
	Reset_ClearCampaignStageTimeLimitFromSecond,
	Reset_ClearEventStageTimeLimitFromSecond,
	Reset_ClearRaidTimeLimitFromSecond,
	Reset_ClearBattleWithTagCount,
	Reset_ClearFindGiftAndBloodDungeonTimeLimitFromSecond,
	Reset_CompleteScheduleWithTagCount,
	Reset_ClearChaserDungeonTimeLimitFromSecond,
	Reset_GetTotalScoreRhythm,
	Reset_GetBestScoreRhythm,
	Reset_GetSpecificScoreRhythm,
	Reset_ClearStageRhythm,
	Reset_GetComboCountRhythm,
	Reset_GetFullComboRhythm,
	Reset_GetFeverCountRhythm,
	Reset_UseActionPoint,
	Achieve_ClearSchoolDungeonCount,
	Reset_ClearSchoolDungeonTimeLimitFromSecond,
	Reset_ClearSpecificSchoolDungeonCount,
	Reset_GetCriticalCountRhythm,
	Achieve_WeaponTranscendenceCount,
	Achieve_WeaponLevelUpCount,
	Reset_WeaponAtSpecificTranscendenceCount,
	Reset_WeaponAtSpecificLevelUpCount,
	Reset_BuyShopGoods,
	Reset_ClanLogin,
	Reset_AssistCharacterSetting,
	Reset_DailyMissionFulfill,
	Reset_SelectedMissionFulfill,
	Reset_TotalDamageToWorldRaid,
	Reset_JoinWorldRaidTypeNumber,
	Reset_JoinWorldRaidBattleWithTagCount,
	Reset_ClearWorldRaidTimeLimitFromSecond,
	Achieve_KillEnemyWithDecagrammatonSPOTagCount,
	Reset_ConquerTileCount,
	Reset_ConquerSpecificStepTileCount,
	Reset_ConquerSpecificStepTileAll,
	Reset_UpgradeConquestBaseTileCount,
	Reset_KillConquestBoss,
	Reset_ClearEventConquestTileTimeLimitFromSecond,
	Reset_DiceRaceUseDiceCount,
	Reset_DiceRaceFinishLapCount,
	Reset_FortuneGachaCount,
	Reset_FortuneGachaCountByGrade,
	Reset_ClearCountShooting,
	Reset_ClearSpecificStageShooting,
	Reset_ClearSpecificCharacterShooting,
	Reset_ClearSpecificSectionShooting,
	Achieve_JoinEliminateRaidCount,
	Reset_TBGCompleteRoundCount,
	Reset_CompleteStage,
	Reset_TBGClearSpecificThema,
	Reset_ClearGeneralChaserDungeonCount,
	Reset_ClearGeneralFindGiftAndBloodDungeonCount,
	Reset_ClearGeneralSchoolDungeonCount,
	Reset_JoinArenaCount,
	Reset_GetCafe2ndRank,
	Achieve_GetComfort2ndPoint,
	Reset_ClearSpecificTimeAttackDungeonCount,
	Reset_GetScoreTimeAttackDungeon,
	Reset_GetTotalScoreTimeAttackDungeon,
	Reset_JoinRaidCount,
	Reset_ClearTimeAttackDungeonCount,
	Reset_JoinEliminateRaidCount,
	Reset_FieldClearSpecificDate,
	Reset_FieldGetEvidenceCount,
	Reset_FieldMasteryLevel,
	Reset_TreasureCheckedCellCount,
	Reset_TreasureGetTreasureCount,
	Reset_TreasureRoundRefreshCount,
	Achieve_UseTicketCount,
	Reset_ClearMultiFloorRaidStage,
	Achieve_CharacterPotentialUpCount,
	Reset_CharacterPotentialUpCount,
	Reset_CharacterAtSpecificPotentialCount,
	Reset_PotentialAttackPowerAtSpecificLevel,
	Reset_PotentialMaxHPAtSpecificLevel,
	Reset_PotentialHealPowerAtSpecificLevel,
	Reset_DreamGetSpecificParameter,
	Reset_DreamGetSpecificScheduleCount,
	Reset_DreamGetScheduleCount,
	Reset_DreamGetEndingCount,
	Reset_DreamGetSpecificEndingCount,
	Reset_DreamGetCollectionScenarioCount,
	Temp_1,
	Temp_2,
	Temp_3,
	Temp_4,
}
enum AccountAchievementType: int {
	TotalLoginCount,
	TotalGetClearStarCount,
	TotalCharacterLevelUpCount,
	TotalCharacterSkillLevelUpCount,
	TotalClearCampaignStageCount,
	TotalClearChaserDungeonCount,
	TotalClearFindGiftAndBloodDungeonCount,
	TotalEquipmentLevelUpCount,
	TotalEquipmentTierUpCount,
	MaxComfortPoint,
	TotalGetGold,
	TotalUseGold,
	TotalJoinArenaCount,
	TotalJoinRaidCount,
	TotalClearSchoolDungeonCount,
	TotalGetWeaponCount,
	TotalWeaponLevelUpCount,
	TotalWeaponTranscendenceCount,
	KillEnemyWithDecagrammatonSPOTagCount,
	EventPoint,
	ConquestCalculateReward,
	TotalJoinEliminateRaidCount,
	Cafe2MaxComfortPoint,
	TotalRaidTicketUseCount,
	TotalEliminateTicketUseCount,
	TotalCharacterPotentialUpCount,
}
enum MissionToastDisplayConditionType: int {
	Always,
	Complete,
	Never,
}
enum GetStickerConditionType: int {
	None,
	Reset_StikcerGetCondition_AccountLevel,
	Reset_StickerGetCondition_ScenarioModeId,
	Reset_StickerGetCondition_EnemyKillCount,
	Reset_StickerGetCondition_GetItemCount,
	Reset_StickerGetCondition_BuyItemCount,
	Reset_StickerGetCondition_ScheduleRank,
	Reset_StickerGetCondition_Change_LobbyCharacter,
	Reset_StickerGetCondition_Cafe_Character_Visit_Count,
	Reset_StickerGetCondition_Cafe_Chracter_Invite_Count,
	Reset_StickerGetCondition_GetChracterCount,
	Reset_StickerGetCondition_Cafe_Furniture_Interaction,
	Reset_StickerGetCondition_GetFurniture,
	Reset_StickerGetCondition_SetFurniture,
	Reset_StickerGetCondition_GivePresentChracterCount,
	Reset_StickerGetCondition_GivePresentCount,
	Reset_StickerGetCondition_MomotalkStudentCount,
	Reset_StickerGetCondition_CombatwithCharacterCount,
	Reset_StickerGetCondition_GachaCharacterCount,
	Reset_StickerGetCondition_TouchLobbyCharacter,
	Reset_StickerGetCondition_UseCircleEmoticonCount,
	Reset_StickerGetCondition_CraftCount,
	Reset_StickerGetCondition_NormalStageClear,
	Reset_StickerGetCondition_NormalStageClear3Star,
	Reset_StickerGetCondition_HardStageClear,
	Reset_StickerGetCondition_HardStageClear3Star,
	Achieve_StikcerGetCondition_AccountLevel,
	Achieve_StickerGetCondition_ClearStageId,
	Achieve_StickerGetCondition_ScenarioModeId,
	Achieve_StickerGetCondition_EnemyKillCount,
	Achieve_StickerGetCondition_GetItemCount,
	Achieve_StickerGetCondition_BuyItemCount,
	Achieve_StickerGetCondition_ScheduleRank,
	Achieve_StickerGetCondition_Change_LobbyCharacter,
	Achieve_StickerGetCondition_Cafe_Character_Visit_Count,
	Achieve_StickerGetCondition_Cafe_Chracter_Invite_Count,
	Achieve_StickerGetCondition_GetChracterCount,
	Achieve_StickerGetCondition_Cafe_Furniture_Interaction,
	Achieve_StickerGetCondition_GetFurniture,
	Achieve_StickerGetCondition_SetFurniture,
	Achieve_StickerGetCondition_GivePresentChracterCount,
	Achieve_StickerGetCondition_GivePresentCount,
	Achieve_StickerGetCondition_MomotalkStudentCount,
	Achieve_StickerGetCondition_CombatwithCharacterCount,
	Achieve_StickerGetCondition_GachaCharacterCount,
	Achieve_StickerGetCondition_TouchLobbyCharacter,
	Achieve_StickerGetCondition_UseCircleEmoticonCount,
	Achieve_StickerGetCondition_CraftCount,
	Achieve_StickerGetCondition_NormalStageClear,
	Achieve_StickerGetCondition_NormalStageClear3Star,
	Achieve_StickerGetCondition_HardStageClear,
	Achieve_StickerGetCondition_HardStageClear3Star,
	Reset_StickerGetCondition_EnemyKillCountbyTag,
	Reset_StickerGetCondition_GetItemCountbyTag,
	Reset_StickerGetCondition_ClearCampaignOrEventStageCount,
	Reset_StickerGetCondition_CompleteCampaignStageMinimumTurn,
	Reset_StickerGetCondition_ClearCampaignStageDifficultyNormal,
	Reset_StickerGetCondition_ClearCampaignStageDifficultyHard,
	Reset_StickerGetCondition_EventClearCampaignStageCount,
	Reset_StickerGetCondition_EventClearSpecificCampaignStageCount,
	Reset_StickerGetCondition_EventCompleteCampaignStageMinimumTurn,
	Reset_StickerGetCondition_EventClearCampaignStageDifficultyNormal,
	Reset_StickerGetCondition_EventClearCampaignStageDifficultyHard,
	Reset_StickerGetCondition_ClearSpecificCampaignStageCount,
	Reset_StickerGetCondition_ClearCampaignStageTimeLimitFromSecond,
	Reset_StickerGetCondition_ClearEventStageTimeLimitFromSecond,
	Reset_StickerGetCondition_ClearStageRhythm,
	Reset_StickerGetCondition_ClearSpecificStageShooting,
	Reset_StickerGetCondition_CompleteStage,
	Achieve_StickerGetCondition_ClearCampaignStageCount,
	Achieve_StickerGetCondition_ClearChaserDungeonCount,
	Reset_StickerGetCondition_ClearSpecificChaserDungeonCount,
	Achieve_StickerGetCondition_ClearSchoolDungeonCount,
	Reset_StickerGetCondition_ClearSpecificSchoolDungeonCount,
	Reset_StickerGetCondition_ClearSpecificWeekDungeonCount,
	Achieve_StickerGetCondition_ClearFindGiftAndBloodDungeonCount,
}
enum StickerCheckPassType: int {
	None,
	ClearScenarioModeId,
	ClearCampaignStageId,
}
enum ParcelType: int {
	None,
	Character,
	Currency,
	Equipment,
	Item,
	GachaGroup,
	Product,
	Shop,
	MemoryLobby,
	AccountExp,
	CharacterExp,
	FavorExp,
	TSS,
	Furniture,
	ShopRefresh,
	LocationExp,
	Recipe,
	CharacterWeapon,
	CharacterGear,
	IdCardBackground,
	Emblem,
	Sticker,
	Costume,
}
enum Rarity: int {
	N,
	R,
	SR,
	SSR,
}
enum Tier: int {
	T1,
	T2,
	T3,
	T4,
}
enum CurrencyTypes: int {
	Invalid,
	Gold,
	GemPaid,
	GemBonus,
	Gem,
	ActionPoint,
	AcademyTicket,
	ArenaTicket,
	RaidTicket,
	WeekDungeonChaserATicket,
	WeekDungeonFindGiftTicket,
	WeekDungeonBloodTicket,
	WeekDungeonChaserBTicket,
	WeekDungeonChaserCTicket,
	SchoolDungeonATicket,
	SchoolDungeonBTicket,
	SchoolDungeonCTicket,
	TimeAttackDungeonTicket,
	MasterCoin,
	WorldRaidTicketA,
	WorldRaidTicketB,
	WorldRaidTicketC,
	ChaserTotalTicket,
	SchoolDungeonTotalTicket,
	EliminateTicketA,
	EliminateTicketB,
	EliminateTicketC,
	EliminateTicketD,
	Max,
}
enum SortingTarget: int {
	None,
	Rarity,
	Level,
	StarGrade,
	Tier,
}
enum CurrencyOverChargeType: int {
	CanNotCharge,
	FitToLimit,
	ChargeOverLimit,
}
enum CurrencyAdditionalChargeType: int {
	EnableAutoChargeOverLimit,
	DisableAutoChargeOverLimit,
}
enum RecipeType: int {
	None,
	Craft,
	SkillLevelUp,
	CharacterTranscendence,
	EquipmentTierUp,
	CafeRankUp,
	SelectionItem,
	WeaponTranscendence,
	SelectRecruit,
	CharacterPotential,
}
enum GachaGroupType: int {
	None,
	Reward_General,
	System_Craft,
	Reward_Pack,
}
enum ParcelChangeReason: int {
	None,
	Acquire_NewAccount,
	Acquire_PlayReward,
	Acquire_ChapterReward,
	Acquire_LoginReward,
	Acquire_EventReward,
	Acquire_GMPush,
	Acquire_ShopBuy,
	Acquire_GachaBuy,
	Acquire_CurrencyBuy,
	Equipment_Equip,
	Equipment_Unequip,
	Equipment_Levelup,
	Equipment_LimitBreak,
	Equipment_Transcendence,
	Equipment_Enchant,
	Item_Use,
	Item_Lock,
	Item_CharacterGrowthMaterial,
	Item_Change,
	Item_Delete,
	Item_Consume,
	Item_SelectTicket,
	Character_ExpGrowth,
	Character_Transcendence,
	Character_SkillLevelUp,
	Character_FavorGrowth,
	Furniture_CafeSet,
	Furniture_CafeRecall,
	Academy_AttendSchedule,
	Academy_MessageList,
	Adventure_EnterMainStage,
	Adventure_EnterSubStage,
	Adventure_MainStageBattleResult,
	Adventure_SubStageBattleResult,
	Adventure_ChapterClearReward,
	Adventure_Retreat,
	Adventure_PurchasePlayCountHardStage,
	Adventure_TutorialStage,
	Adventure_TutorialStageBattleResult,
	ContentSweep_Sweep,
	Arena_TimeReward,
	Arena_DailyReward,
	Arena_EnterBattle,
	Arena_BattleResult,
	Cafe_Interact,
	Cafe_Production,
	Cafe_RankUp,
	Cafe_GiveGift,
	WeekDungeon_BattleResult,
	WeekDungeon_EnterBattle,
	WeekDungeon_Retreat,
	Mission_Clear,
	Shop_Refresh,
	Shop_BuyEligma,
	Shop_BuyMerchandise,
	Shop_BuyGacha,
	Scenario_Clear,
	Recipe_Craft,
	Raid_Failed,
	Raid_Reward,
	Raid_SeasonReward,
	Raid_CreateBattle,
	CumulativeTimeReward_Reward,
	Mail_Receive,
	MomoTalk_FavorSchedule,
	WeekDungeon_EnterBlood,
	WeekDungeon_EnterGift,
	Acquire_ActionPoint,
	Acquire_ArenaTicket,
	EventContent_TotalReward,
	Craft_UpdateNode,
	Craft_CompleteProcess,
	Craft_Reward,
	EventContent_BattleResult,
	Adventure_Sweep,
	EventContent_Sweep,
	WeekDungeon_Sweep,
	Acquire_MonthlyProduct,
	Acquire_DailyReward,
	Billing_PurchaseProduct,
	EventContent_EnterMainStage,
	EventContent_EnterSubStage,
	EventContent_MainStageResult,
	EventContent_SubStageResult,
	EventContent_Retreat,
	WeekDungeon_BloodResult,
	WeekDungeon_GiftResult,
	WeekDungeon_EnterChaserA,
	WeekDungeon_EnterChaserB,
	WeekDungeon_EnterChaserC,
	WeekDungeon_ChaserAResult,
	WeekDungeon_ChaserBResult,
	WeekDungeon_ChaserCResult,
	EventContent_BoxGacha,
	Raid_Sweep,
	Clan_AssistReward,
	EventContent_CardShop,
	CharacterWeapon_ExpGrowth,
	CharacterWeapon_Transcendence,
	MiniGameMission_Clear,
	SchoolDungeon_EnterSchoolA,
	SchoolDungeon_EnterSchoolB,
	SchoolDungeon_EnterSchoolC,
	SchoolDungeon_SchoolAResult,
	SchoolDungeon_SchoolBResult,
	SchoolDungeon_SchoolCResult,
	TimeAttackDungeon_CreateBattle,
	TimeAttackDungeon_EndBattle,
	TimeAttackDungeon_Reward,
	Clan_Create,
	Arena_SeasonReward,
	Arena_OverallReward,
	EventContent_AttendSchedule,
	EventContent_BuyFortuneGacha,
	Equipment_BatchGrowth,
	EventContent_EnterStoryStage,
	EventContent_StoryStageResult,
	WorldRaid_EndBattle,
	WorldRaid_Reward,
	Conquest_EnterBattle,
	Conquest_EnterUnExpectBattle,
	Conquest_BattleResult,
	Conquest_UnExpectBattleResult,
	Conquest_UpgradeBase,
	Conquest_ManageBase,
	Conquest_CalculatedReward,
	Conquest_TakeEventBoxObject,
	Conquest_ConquerNormalTile,
	Item_SelectRecruit,
	Adventure_EnterExtraStage,
	Adventure_ExtraStageBattleResult,
	Scenario_EnterMainStage,
	Scenario_MainStageResult,
	Scenario_RetreatMainStage,
	EventContent_DiceRaceRollReward,
	EventContent_DiceRaceLapReward,
	ShiftingCraft_BeginProcess,
	ShiftingCraft_CompleteProcess,
	ShiftingCraft_Reward,
	MiniGame_ShootingBattleResult,
	MiniGame_ShootingSweep,
	EliminateRaid_Failed,
	EliminateRaid_Reward,
	EliminateRaid_SeasonReward,
	EliminateRaid_CreateBattle,
	EliminateRaid_Sweep,
	Item_AutoSynth,
	ContentSweep_MultiSweep,
	Emblem_Acquire,
	MiniGame_TBGMove,
	MiniGame_TBGEncounterInput,
	MiniGame_TBGResurrect,
	MiniGame_TBGSweep,
	Shop_BeforehandGacha,
	EliminateRaid_LimitedReward,
	Craft_AutoBeginProcess,
	Craft_CompleteProcessAll,
	Craft_RewardAll,
	ShiftingCraft_CompleteProcessAll,
	ShiftingCraft_RewardAll,
	Temp_1,
	Temp_2,
	Temp_3,
	Temp_4,
	EventContent_Treasure,
	Field_EnterStage,
	Field_StageResult,
	Field_Interaction,
	Field_Quest,
	Character_PotentialGrowth,
	MultiFloorRaid_EndBattle,
	MultiFloorRaid_Reward,
	MiniGame_DreamSchedule,
	MiniGame_DreamDailyClosing,
	MiniGame_DreamEnding,
	Item_ExpireChange,
	Temp,
	Raid_FailCompensateReward,
	EliminateRaid_FailCompensateReward,
}
enum ConsumeCondition: int {
	And,
	Or,
}
enum DailyRefillType: int {
	None,
	Default,
	Login,
}
enum ScenarioBGType: int {
	None,
	Image,
	BlurRT,
	Spine,
	Hide,
}
enum ScenarioType: int {
	None,
	Title,
	Place,
}
enum ScenarioTypes: int {
	None,
	Title,
	Place,
}
enum ScenarioCharacterAction: int {
	Idle,
	Shake,
	Greeting,
	FalldownLeft,
	FalldownRight,
	Stiff,
	Hophop,
	Jump,
}
enum ScenarioCharacterBehaviors: int {
	None,
	Appear,
	Disappear,
	AppearToLeft,
	ApperToRight,
	DisappearToLeft,
	DisappearToRight,
	MoveToTarget,
}
enum ScenarioCharacterShapes: int {
	None,
	Signal,
	BlackSilhouette,
	Closeup,
	Highlight,
	WhiteSilhouette,
}
enum ScenarioBGScroll: int {
	None,
	Vertical,
	Horizontal,
}
enum DialogCategory: int {
	Cafe,
	Echelon,
	CharacterSSRNew,
	CharacterGet,
	Birthday,
	Dating,
	Title,
	UILobby,
	UILobbySpecial,
	UIShop,
	UIGacha,
	UIRaidLobby,
	UIWork,
	UITitle,
	UIWeekDungeon,
	UIAcademyLobby,
	UIRaidLobbySeasonOff,
	UIRaidLobbySeasonOn,
	UIWorkAronaSit,
	UIWorkAronaSleep,
	UIWorkAronaWatch,
	UIGuideMission,
	UILobby2,
	UIClanSearchList,
	UIAttendance,
	UIAttendanceEvent01,
	UIEventLobby,
	UIEventShop,
	UIEventBoxGachaShop,
	UIAttendanceEvent02,
	UIAttendanceEvent03,
	UIEventCardShop,
	UISchoolDungeon,
	UIAttendanceEvent,
	UISpecialOperationLobby,
	WeaponGet,
	UIAttendanceEvent04,
	UIEventFortuneGachaShop,
	UIAttendanceEvent05,
	UIAttendanceEvent06,
	UIMission,
	UIEventMission,
	UIAttendanceEvent08,
	UIAttendanceEvent07,
	UIEventMiniGameMission,
	UIAttendanceEvent09,
	UIAttendanceEvent10,
	UIAttendanceEvent11,
	UIWorkPlanaSit,
	UIWorkPlanaUmbrella,
	UIWorkPlanaCabinet,
	UIWorkCoexist_AronaSleepSit,
	UIWorkCoexist_PlanaWatchSky,
	UIWorkCoexist_PlanaSitPeek,
	UIWorkCoexist_AronaSleepPeek,
	UIEventArchive,
	UIAttendanceEvent12,
	UIAttendanceEvent13,
	UIAttendanceEvent14,
	Temp_1,
	Temp_2,
	Temp_3,
	Temp_4,
	Temp_5,
	UIAttendanceEvent15,
	UILobbySpecial2,
	UIAttendanceEvent16,
	UIEventTreasure,
	UIMultiFloorRaid,
	UIEventMiniGameDreamMaker,
}
enum DialogCondition: int {
	Idle,
	Enter,
	Exit,
	Buy,
	SoldOut,
	BoxGachaNormal,
	BoxGachaPrize,
	Prize0,
	Prize1,
	Prize2,
	Prize3,
	Interaction,
	Luck0,
	Luck1,
	Luck2,
	Luck3,
	Luck4,
	Luck5,
	StoryOpen,
	CollectionOpen,
	BoxGachaFinish,
	FindTreasure,
	GetTreasure,
	RoundRenewal,
	MiniGameDreamMakerEnough01,
	MiniGameDreamMakerEnough02,
	MiniGameDreamMakerEnough03,
	MiniGameDreamMakerEnough04,
	MiniGameDreamMakerDefault,
}
enum DialogConditionDetail: int {
	None,
	Day,
	Close,
	MiniGameDreamMakerDay,
}
enum DialogType: int {
	Talk,
	Think,
	UITalk,
}
enum Anniversary: int {
	None,
	UserBDay,
	StudentBDay,
}
enum School: int {
	None,
	Hyakkiyako,
	RedWinter,
	Trinity,
	Gehenna,
	Abydos,
	Millennium,
	Arius,
	Shanhaijing,
	Valkyrie,
	WildHunt,
	SRT,
	SCHALE,
	ETC,
	Tokiwadai,
	Sakugawa,
}
enum EtcSchool: int {
	None,
	ETC,
	Tokiwadai,
	Sakugawa,
	Max,
}
enum StoryCondition: int {
	Open,
	Locked,
	ComingSoon,
	Hide,
}
enum EmojiEvent: int {
	EnterConver,
	EnterShelter,
	SignalLeader,
	Nice,
	Reload,
	Blind,
	Panic,
	Silence,
	NearyDead,
	Run,
	TerrainAdaptionS,
	TerrainAdaptionA,
	TerrainAdaptionB,
	TerrainAdaptionC,
	TerrainAdaptionD,
	TerrainAdaptionSS,
	Dot,
	Angry,
	Bulb,
	Exclaim,
	Surprise,
	Sad,
	Sigh,
	Steam,
	Upset,
	Respond,
	Question,
	Sweat,
	Music,
	Chat,
	Twinkle,
	Zzz,
	Tear,
	Heart,
	Shy,
	Think,
}
enum ScenarioModeTypes: int {
	None,
	Main,
	Sub,
	Replay,
	Mini,
	SpecialOperation,
	Prologue,
}
enum ScenarioModeSubTypes: int {
	None,
	Club,
}
enum ScenarioModeReplayTypes: int {
	None,
	Event,
	Favor,
	Work,
	EventMeetup,
}
enum ScenarioEffectDepth: int {
	None,
	AboveBg,
	AboveCharacter,
	AboveAll,
}
enum ScenarioZoomAnchors: int {
	Center,
	LeftTop,
	LeftBottom,
	RightTop,
	RightBottom,
}
enum ScenarioZoomType: int {
	Instant,
	Slide,
}
enum ScenarioContentType: int {
	Prologue,
	WeekDungeon,
	Raid,
	Arena,
	Favor,
	Shop,
	EventContent,
	Craft,
	Chaser,
	EventContentMeetup,
	TimeAttack,
	Mission,
	EventContentPermanentPrologue,
	EventContentReturnSeason,
	MiniEvent,
	EliminateRaid,
	MultiFloorRaid,
	EventContentPermanent,
}
enum MemoryLobbyCategory: int {
	None,
	UILobbySpecial,
	UILobbySpecial2,
}
enum PurchaseCountResetType: int {
	None,
	Day,
	Week,
	Month,
}
enum ShopCategoryType: int {
	General,
	SecretStone,
	Raid,
	Gold,
	Ap,
	PickupGacha,
	NormalGacha,
	PointGacha,
	EventGacha,
	ArenaTicket,
	Arena,
	TutoGacha,
	RecruitSellection,
	EventContent_0,
	EventContent_1,
	EventContent_2,
	EventContent_3,
	EventContent_4,
	_Obsolete,
	LimitedGacha,
	MasterCoin,
	SecretStoneGrowth,
	TicketGacha,
	DirectPayGacha,
	FesGacha,
	TimeAttack,
	Chaser,
	ChaserTicket,
	SchoolDungeonTicket,
	AcademyTicket,
	Special,
	Care,
	BeforehandGacha,
	EliminateRaid,
	GlobalSpecialGacha,
}
enum PurchaseServerTag: int {
	Audit,
	PreAudit,
	Production,
	Hotfix,
	Standby2,
	Standby1,
	Major,
	Minor,
	Temp,
	Test,
	TestIn,
}
enum PurchaseStatusCode: int {
	None,
	Start,
	PublishSuccess,
	End,
	Error,
	DuplicateOrder,
	Refund,
}
enum StoreType: int {
	None,
	GooglePlay,
	AppStore,
	OneStore,
	MicrosoftStore,
	GalaxyStore,
}
enum PurchasePeriodType: int {
	None,
	Day,
	Week,
	Month,
}
enum PurchaseSourceType: int {
	None,
	Product,
	ProductMonthly,
}
enum ProductCategory: int {
	None,
	Gem,
	Monthly,
	Package,
	GachaDirect,
	TimeLimit,
}
enum ProductDisplayTag: int {
	None,
	New,
	Hot,
	Sale,
}
enum ProductTagType: int {
	Monthly,
	Weekly,
	Biweekly,
}
enum BillingTransactionEndType: int {
	None,
	Success,
	Cancel,
}
enum GachaRewardType: int {
	None,
	Eligma,
	Eleph,
}
enum ShopFreeRecruitType: int {
	None,
	Accumulation,
	Reset,
}
enum GachaDisplayTag: int {
	None,
	Limited,
	TwoStar,
	ThreeStar,
	Free,
	New,
	Fes,
	SelectRecruit,
}
enum ShopFilterType: int {
	GachaTicket,
	SecretStone,
	SecretStone_1,
	SkillBook_Ultimate,
	ExSkill,
	SkillBook,
	Craft,
	AP,
	CharacterExpItem,
	Equip,
	Material,
	Creddit,
	Furniture,
	SelectItem,
	Currency,
	Hyakkiyako,
	RedWinter,
	Trinity,
	Gehenna,
	Abydos,
	Millennium,
	Arius,
	Shanhaijing,
	Valkyrie,
	SRT,
	Event,
	ChaserTotalTicket,
	SchoolTotalTicket,
	ShopFilterDUMMY_1,
	ShopFilterDUMMY_2,
	ShopFilterDUMMY_3,
	ShopFilterDUMMY_4,
	ShopFilterDUMMY_5,
	ShopFilterDUMMY_6,
	ShopFilterDUMMY_7,
	ETC,
	Bundle,
}
enum SocialMode: int {
	TITLE,
	LOBBY,
	FORMATION,
	STAGE_SELECT,
	BATTLE,
	POPUP,
	BATTLE_RESULT,
	BATTLE_RESULT_VICTORY,
	BATTLE_RESULT_DEFEAT,
	INVALID,
	TACTIC,
	STRATEGY,
	ACCONT,
	CAMPAIGN_STORY,
	CAMPAIGN_STAGE,
	TACTICREADY,
}
enum AccountState: int {
	WaitingSignIn,
	Normal,
	Dormant,
	Comeback,
	Newbie,
}
enum MessagePopupLayout: int {
	TextOnly,
	ImageBig,
	ImageSmall,
	UnlockCondition,
}
enum MessagePopupImagePositionType: int {
	ImageFirst,
	TextFirst,
}
enum MessagePopupButtonType: int {
	Accept,
	Cancel,
	Command,
}
enum ToastType: int {
	None,
	Tactic_Left,
	Tactic_Right,
	Social_Center,
	Social_Mission,
	Social_Right,
	Notice_Center,
}
enum StrategyAIType: int {
	None,
	Guard,
	Pursuit,
}
enum StageDifficulty: int {
	None,
	Normal,
	Hard,
	VeryHard,
	VeryHard_Ex,
}
enum HexaUnitGrade: int {
	Grade1,
	Grade2,
	Grade3,
	Boss,
}
enum TacticEnvironment: int {
	None,
	WarFog,
}
enum StrategyObjectType: int {
	None,
	Start,
	Heal,
	Skill,
	StatBuff,
	Parcel,
	ParcelOneTimePerAccount,
	Portal,
	PortalOneWayEnterance,
	PortalOneWayExit,
	Observatory,
	Beacon,
	BeaconOneTime,
	EnemySpawn,
	SwitchToggle,
	SwitchMovableWhenToggleOff,
	SwitchMovableWhenToggleOn,
	FixedStart01,
	FixedStart02,
	FixedStart03,
	FixedStart04,
}
enum StrategyEnvironment: int {
	None,
	MapFog,
}
enum Tag: int {
	A,
	a,
	B,
	b,
	C,
	c,
	D,
	d,
	E,
	e,
	F,
	f,
	G,
	g,
	H,
	h,
	I,
	i,
	J,
	j,
	K,
	k,
	L,
	l,
	M,
	m,
	N,
	n,
	O,
	o,
	P,
	p,
	Q,
	q,
	R,
	r,
	S,
	s,
	T,
	t,
	U,
	u,
	V,
	v,
	W,
	w,
	X,
	x,
	Y,
	y,
	Z,
	z,
	aA,
	aa,
	aB,
	ab,
	aC,
	ac,
	aD,
	ad,
	aE,
	ae,
	aF,
	af,
	aG,
	ag,
	aH,
	ah,
	aI,
	ai,
	aJ,
	aj,
	aK,
	ak,
	aL,
	al,
	aM,
	am,
	aN,
	an,
	aO,
	ao,
	aP,
	ap,
	aQ,
	aq,
	aR,
	ar,
	aS,
	as,
	aT,
	at,
	aU,
	au,
	aV,
	av,
	aW,
	aw,
	aX,
	ax,
	aY,
	ay,
	aZ,
	az,
	BA,
	Ba,
	BB,
	Bb,
	BC,
	Bc,
	BD,
	Bd,
	BE,
	Be,
	BF,
	Bf,
	BG,
	Bg,
	BH,
	Bh,
	BI,
	Bi,
	BJ,
	Bj,
	BK,
	Bk,
	BL,
	Bl,
	BM,
	Bm,
	BN,
	Bn,
	BO,
	Bo,
	BP,
	Bp,
	BQ,
	Bq,
	BR,
	Br,
	BS,
	Bs,
	BT,
	Bt,
	BU,
	Bu,
	BV,
	Bv,
	BW,
	Bw,
	BX,
	Bx,
	BY,
	By,
	BZ,
	Bz,
	bA,
	ba,
	bB,
	bb,
	bC,
	bc,
	bD,
	bd,
	bE,
	be,
	bF,
	bf,
	bG,
	bg,
	bH,
	bh,
	bI,
	bi,
	bJ,
	bj,
	bK,
	bk,
	bL,
	bl,
	bM,
	bm,
	bN,
	bn,
	bO,
	bo,
	bP,
	bp,
	bQ,
	bq,
	bR,
	br,
	bS,
	bs,
	bT,
	bt,
	bU,
	bu,
	bV,
	bv,
	bW,
	bw,
	bX,
	bx,
	bY,
	by,
	bZ,
	bz,
	CA,
	Ca,
	CB,
	Cb,
	CC,
	Cc,
	CD,
	Cd,
	CE,
	Ce,
	CF,
	Cf,
	CG,
	Cg,
	CH,
	Ch,
	CI,
	Ci,
	CJ,
	Cj,
	CK,
	Ck,
	CL,
	Cl,
	CM,
	Cm,
	CN,
	Cn,
	CO,
	Co,
	CP,
	Cp,
	CQ,
	Cq,
	CR,
	Cr,
	CS,
	Cs,
	CT,
	Ct,
	CU,
	Cu,
	CV,
	Cv,
	CW,
	Cw,
	CX,
	Cx,
	CY,
	Cy,
	CZ,
	Cz,
	cA,
	ca,
	cB,
	cb,
	cC,
	cc,
	cD,
	cd,
	cE,
	ce,
	cF,
	cf,
	cG,
	cg,
	cH,
	ch,
	cI,
	ci,
	cJ,
	cj,
	cK,
	ck,
	cL,
	cl,
	cM,
	cm,
	cN,
	cn,
	cO,
	co,
	cP,
	cp,
	cQ,
	cq,
	cR,
	cr,
	cS,
	cs,
	cT,
	ct,
	cU,
	cu,
	cV,
	cv,
	cW,
	cw,
	cX,
	cx,
	cY,
	cy,
	cZ,
	cz,
	DA,
	Da,
	DB,
	Db,
	DC,
	Dc,
	DD,
	Dd,
	DE,
	De,
	DF,
	Df,
	DG,
	Dg,
	DH,
	Dh,
	DI,
	Di,
	DJ,
	Dj,
	DK,
	Dk,
	DL,
	Dl,
	DM,
	Dm,
	DN,
	Dn,
	DO,
	Do,
	DP,
	Dp,
	DQ,
	Dq,
	DR,
	Dr,
	DS,
	Ds,
	DT,
	Dt,
	DU,
	Du,
	DV,
	Dv,
	DW,
	Dw,
	DX,
	Dx,
	DY,
	Dy,
	DZ,
	Dz,
	dA,
	da,
	dB,
	db,
	dC,
	dc,
	dD,
	dd,
	dE,
	de,
	dF,
	df,
	dG,
	dg,
	dH,
	dh,
	dI,
	di,
	dJ,
	dj,
	dK,
	dk,
	dL,
	dl,
	dM,
	dm,
	dN,
	dn,
	dO,
	do,
	dP,
	dp,
	dQ,
	dq,
	dR,
	dr,
	dS,
	ds,
	dT,
	dt,
	dU,
	du,
	dV,
	dv,
	dW,
	dw,
	dX,
	dx,
	dY,
	dy,
	dZ,
	dz,
	EA,
	Ea,
	EB,
	Eb,
	EC,
	Ec,
	ED,
	Ed,
	EE,
	Ee,
	EF,
	Ef,
	EG,
	Eg,
	EH,
	Eh,
	EI,
	Ei,
	EJ,
	Ej,
	EK,
	Ek,
	EL,
	El,
	EM,
	Em,
	EN,
	En,
	EO,
	Eo,
	EP,
	Ep,
	EQ,
	Eq,
	ER,
	Er,
	ES,
	Es,
	ET,
	Et,
	EU,
	Eu,
	EV,
	Ev,
	EW,
	Ew,
	EX,
	Ex,
	EY,
	Ey,
	EZ,
	Ez,
	eA,
	ea,
	eB,
	eb,
	eC,
	ec,
	eD,
	ed,
	eE,
	ee,
	eF,
	ef,
	eG,
	eg,
	eH,
	eh,
	eI,
	ei,
	eJ,
	ej,
	eK,
	ek,
	eL,
	el,
	eM,
	em,
	eN,
	en,
	eO,
	eo,
	eP,
	ep,
	eQ,
	eq,
	eR,
	er,
	eS,
	es,
	eT,
	et,
	eU,
	eu,
	eV,
	ev,
	eW,
	ew,
	eX,
	ex,
	eY,
	ey,
	eZ,
	ez,
	FA,
	Fa,
	FB,
	Fb,
	FC,
	Fc,
	FD,
	Fd,
	FE,
	Fe,
	FF,
	Ff,
	FG,
	Fg,
	FH,
	Fh,
	FI,
	Fi,
	FJ,
	Fj,
	FK,
	Fk,
	FL,
	Fl,
	FM,
	Fm,
	FN,
	Fn,
	FO,
	Fo,
	FP,
	Fp,
	FQ,
	Fq,
	FR,
	Fr,
	FS,
	Fs,
	FT,
	Ft,
	FU,
	Fu,
	FV,
	Fv,
	FW,
	Fw,
	FX,
	Fx,
	FY,
	Fy,
	FZ,
	Fz,
	fA,
	fa,
	fB,
	fb,
	fC,
	fc,
	fD,
	fd,
	fE,
	fe,
	fF,
	ff,
	fG,
	fg,
	fH,
	fh,
	fI,
	fi,
	fJ,
	fj,
	fK,
	fk,
	fL,
	fl,
	fM,
	fm,
	fN,
	fn,
	fO,
	fo,
	fP,
	fp,
	fQ,
	fq,
	fR,
	fr,
	fS,
	fs,
	fT,
	ft,
	fU,
	fu,
	fV,
	fv,
	fW,
	fw,
	fX,
	fx,
	fY,
	fy,
	fZ,
	fz,
	GA,
	Ga,
	GB,
	Gb,
	GC,
	Gc,
	GD,
	Gd,
	GE,
	Ge,
	GF,
	Gf,
	GG,
	Gg,
	GH,
	Gh,
	GI,
	Gi,
	GJ,
	Gj,
	GK,
	Gk,
	GL,
	Gl,
	GM,
	Gm,
	GN,
	Gn,
	GO,
	Go,
	GP,
	Gp,
	GQ,
	Gq,
	GR,
	Gr,
	GS,
	Gs,
	GT,
	Gt,
	GU,
	Gu,
	GV,
	Gv,
	GW,
	Gw,
	GX,
	Gx,
	GY,
	Gy,
	GZ,
	Gz,
	gA,
	ga,
	gB,
	gb,
	gC,
	gc,
	gD,
	gd,
	gE,
	ge,
	gF,
	gf,
	gG,
	gg,
	gH,
	gh,
	gI,
	gi,
	gJ,
	gj,
	gK,
	gk,
	gL,
	gl,
	gM,
	gm,
	gN,
	gn,
	gO,
	go,
	gP,
	gp,
	gQ,
	gq,
	gR,
	gr,
	gS,
	gs,
	gT,
	gt,
	gU,
	gu,
	gV,
	gv,
	gW,
	gw,
	gX,
	gx,
	gY,
	gy,
	gZ,
	gz,
	HA,
	Ha,
	HB,
	Hb,
	HC,
	Hc,
	HD,
	Hd,
	HE,
	He,
	HF,
	Hf,
	HG,
	Hg,
	HH,
	Hh,
	HI,
	Hi,
	HJ,
	Hj,
	HK,
	Hk,
	HL,
	Hl,
	HM,
	Hm,
	HN,
	Hn,
	HO,
	Ho,
	HP,
	Hp,
	HQ,
	Hq,
	HR,
	Hr,
	HS,
	Hs,
	HT,
	Ht,
	HU,
	Hu,
	HV,
	Hv,
	HW,
	Hw,
	HX,
	Hx,
	HY,
	Hy,
	HZ,
	Hz,
	hA,
	ha,
	hB,
	hb,
	hC,
	hc,
	hD,
	hd,
	hE,
	he,
	hF,
	hf,
	hG,
	hg,
	hH,
	hh,
	hI,
	hi,
	hJ,
	hj,
	hK,
	hk,
	hL,
	hl,
	hM,
	hm,
	hN,
	hn,
	hO,
	ho,
	hP,
	hp,
	hQ,
	hq,
	hR,
	hr,
	hS,
	hs,
	hT,
	ht,
	hU,
	hu,
	hV,
	hv,
	hW,
	hw,
	hX,
	hx,
	hY,
	hy,
	hZ,
	hz,
	IA,
	Ia,
	IB,
	Ib,
	IC,
	Ic,
	ID,
	Id,
	IE,
	Ie,
	IF,
	If,
	IG,
	Ig,
	IH,
	Ih,
	II,
	Ii,
	IJ,
	Ij,
	IK,
	Ik,
	IL,
	Il,
	IM,
	Im,
	IN,
	In,
	IO,
	Io,
	IP,
	Ip,
	IQ,
	Iq,
	IR,
	Ir,
	IS,
	Is,
	IT,
	It,
	IU,
	Iu,
	IV,
	Iv,
	IW,
	Iw,
	IX,
	Ix,
	IY,
	Iy,
	IZ,
	Iz,
	iA,
	ia,
	iB,
	ib,
	iC,
	ic,
	iD,
	id,
	iE,
	ie,
	iF,
	if,
	iG,
	ig,
	iH,
	ih,
	iI,
	ii,
	iJ,
	ij,
	iK,
	ik,
	iL,
	il,
	iM,
	im,
	iN,
	in,
	iO,
	io,
	iP,
	ip,
	iQ,
	iq,
	iR,
	ir,
	iS,
	is,
	iT,
	it,
	iU,
	iu,
	iV,
	iv,
	iW,
	iw,
	iX,
	ix,
	iY,
	iy,
	iZ,
	iz,
	JA,
	Ja,
	JB,
	Jb,
	JC,
	Jc,
	JD,
	Jd,
	JE,
	Je,
	JF,
	Jf,
	JG,
	Jg,
	JH,
	Jh,
	JI,
	Ji,
	JJ,
	Jj,
	JK,
	Jk,
	JL,
	Jl,
	JM,
	Jm,
	JN,
	Jn,
	JO,
	Jo,
	JP,
	Jp,
	JQ,
	Jq,
	JR,
	Jr,
	JS,
	Js,
	JT,
	Jt,
	JU,
	Ju,
	JV,
	Jv,
	JW,
	Jw,
	JX,
	Jx,
	JY,
	Jy,
	JZ,
	Jz,
	jA,
	ja,
	jB,
	jb,
	jC,
	jc,
	jD,
	jd,
	jE,
	je,
	jF,
	jf,
	jG,
	jg,
	jH,
	jh,
	jI,
	ji,
	jJ,
	jj,
	jK,
	jk,
	jL,
	jl,
	jM,
	jm,
	jN,
	jn,
	jO,
	jo,
	jP,
	jp,
	jQ,
	jq,
	jR,
	jr,
	jS,
	js,
	jT,
	jt,
	jU,
	ju,
	jV,
	jv,
	jW,
	jw,
	jX,
	jx,
	jY,
	jy,
	jZ,
	jz,
	KA,
	Ka,
	KB,
	Kb,
	KC,
	Kc,
	KD,
	Kd,
	KE,
	Ke,
	KF,
	Kf,
	KG,
	Kg,
	KH,
	Kh,
	KI,
	Ki,
	KJ,
	Kj,
	KK,
	Kk,
	KL,
	Kl,
	KM,
	Km,
	KN,
	Kn,
	KO,
	Ko,
	KP,
	Kp,
	KQ,
	Kq,
	KR,
	Kr,
	KS,
	Ks,
	KT,
	Kt,
	KU,
	Ku,
	KV,
	Kv,
	KW,
	Kw,
	KX,
	Kx,
	KY,
	Ky,
	KZ,
	Kz,
	kA,
	ka,
	kB,
	kb,
	kC,
	kc,
	kD,
	kd,
	kE,
	ke,
	kF,
	kf,
	kG,
	kg,
	kH,
	kh,
	kI,
	ki,
	kJ,
	kj,
	kK,
	kk,
	kL,
	kl,
	kM,
	km,
	kN,
	kn,
	kO,
	ko,
	kP,
	kp,
	kQ,
	kq,
	kR,
	kr,
	kS,
	ks,
	kT,
	kt,
	kU,
	ku,
	kV,
	kv,
	kW,
	kw,
	kX,
	kx,
	kY,
	ky,
	kZ,
	kz,
	LA,
	La,
	LB,
	Lb,
	LC,
	Lc,
	LD,
	Ld,
	LE,
	Le,
	LF,
	Lf,
	LG,
	Lg,
	LH,
	Lh,
	LI,
	Li,
	LJ,
	Lj,
	LK,
	Lk,
	LL,
	Ll,
	LM,
	Lm,
	LN,
	Ln,
	LO,
	Lo,
	LP,
	Lp,
	LQ,
	Lq,
	LR,
	Lr,
	LS,
	Ls,
	LT,
	Lt,
	LU,
	Lu,
	LV,
	Lv,
	LW,
	Lw,
	LX,
	Lx,
	LY,
	Ly,
	LZ,
	Lz,
	lA,
	la,
	lB,
	lb,
	lC,
	lc,
	lD,
	ld,
	lE,
	le,
	lF,
	lf,
	lG,
	lg,
	lH,
	lh,
	lI,
	li,
	lJ,
	lj,
	lK,
	lk,
	lL,
	ll,
	lM,
	lm,
	lN,
	ln,
	lO,
	lo,
	lP,
	lp,
	lQ,
	lq,
	lR,
	lr,
	lS,
	ls,
	lT,
	lt,
	lU,
	lu,
	lV,
	lv,
	lW,
	lw,
	lX,
	lx,
	lY,
	ly,
	lZ,
	lz,
	MA,
	Ma,
	MB,
	Mb,
	MC,
	Mc,
	MD,
	Md,
	ME,
	Me,
	MF,
	Mf,
	MG,
	Mg,
	MH,
	Mh,
	MI,
	Mi,
	MJ,
	Mj,
	MK,
	Mk,
	ML,
	Ml,
	MM,
	Mm,
	MN,
	Mn,
	MO,
	Mo,
	MP,
	Mp,
	MQ,
	Mq,
	MR,
	Mr,
	MS,
	Ms,
	MT,
	Mt,
	MU,
	Mu,
	MV,
	Mv,
	MW,
	Mw,
	MX,
	Mx,
	MY,
	My,
	MZ,
	Mz,
	mA,
	ma,
	mB,
	mb,
	mC,
	mc,
	mD,
	md,
	mE,
	me,
	mF,
	mf,
	mG,
	mg,
	mH,
	mh,
	mI,
	mi,
	mJ,
	mj,
	mK,
	mk,
	mL,
	ml,
	mM,
	mm,
	mN,
	mn,
	mO,
	mo,
	mP,
	mp,
	mQ,
	mq,
	mR,
	mr,
	mS,
	ms,
	mT,
	mt,
	mU,
	mu,
	mV,
	mv,
	mW,
	mw,
	mX,
	mx,
	mY,
	my,
	mZ,
	mz,
	NA,
	Na,
	NB,
	Nb,
	NC,
	Nc,
	ND,
	Nd,
	NE,
	Ne,
	NF,
	Nf,
	NG,
	Ng,
	NH,
	Nh,
	NI,
	Ni,
	NJ,
	Nj,
	NK,
	Nk,
	NL,
	Nl,
	NM,
	Nm,
	NN,
	Nn,
	NO,
	No,
	NP,
	Np,
	NQ,
	Nq,
	NR,
	Nr,
	NS,
	Ns,
	NT,
	Nt,
	NU,
	Nu,
	NV,
	Nv,
	NW,
	Nw,
	NX,
	Nx,
	NY,
	Ny,
	NZ,
	Nz,
	nA,
	na,
	nB,
	nb,
	nC,
	nc,
	nD,
	nd,
	nE,
	ne,
	nF,
	nf,
	nG,
	ng,
	nH,
	nh,
	nI,
	ni,
	nJ,
	nj,
	nK,
	nk,
	nL,
	nl,
	nM,
	nm,
	nN,
	nn,
	nO,
	no,
	nP,
	np,
	nQ,
	nq,
	nR,
	nr,
	nS,
	ns,
	nT,
	nt,
	nU,
	nu,
	nV,
	nv,
	nW,
	nw,
	nX,
	nx,
	nY,
	ny,
	nZ,
	nz,
	OA,
	Oa,
	OB,
	Ob,
	OC,
	Oc,
	OD,
	Od,
	OE,
	Oe,
	OF,
	Of,
	OG,
	Og,
	OH,
	Oh,
	OI,
	Oi,
	OJ,
	Oj,
	OK,
	Ok,
	OL,
	Ol,
	OM,
	Om,
	ON,
	On,
	OO,
	Oo,
	OP,
	Op,
	OQ,
	Oq,
	OR,
	Or,
	OS,
	Os,
	OT,
	Ot,
	OU,
	Ou,
	OV,
	Ov,
	OW,
	Ow,
	OX,
	Ox,
	OY,
	Oy,
	OZ,
	Oz,
	oA,
	oa,
	oB,
	ob,
	oC,
	oc,
	oD,
	od,
	oE,
	oe,
	oF,
	of,
	oG,
	og,
	oH,
	oh,
	oI,
	oi,
	oJ,
	oj,
	oK,
	ok,
	oL,
	ol,
	oM,
	om,
	oN,
	on,
	oO,
	oo,
	oP,
	op,
	oQ,
	oq,
	oR,
	or,
	oS,
	os,
	oT,
	ot,
	oU,
	ou,
	oV,
	ov,
	oW,
	ow,
	oX,
	ox,
	oY,
	oy,
	oZ,
	oz,
	PA,
	Pa,
	PB,
	Pb,
	PC,
	Pc,
	PD,
	Pd,
	PE,
	Pe,
	PF,
	Pf,
	PG,
	Pg,
	PH,
	Ph,
	PI,
	Pi,
	PJ,
	Pj,
	PK,
	Pk,
	PL,
	Pl,
	PM,
	Pm,
	PN,
	Pn,
	PO,
	Po,
	PP,
	Pp,
	PQ,
	Pq,
	PR,
	Pr,
	PS,
	Ps,
	PT,
	Pt,
	PU,
	Pu,
	PV,
	Pv,
	PW,
	Pw,
	PX,
	Px,
	PY,
	Py,
	PZ,
	Pz,
	pA,
	pa,
	pB,
	pb,
	pC,
	pc,
	pD,
	pd,
	pE,
	pe,
	pF,
	pf,
	pG,
	pg,
	pH,
	ph,
	pI,
	pi,
	pJ,
	pj,
	pK,
	pk,
	pL,
	pl,
	pM,
	pm,
	pN,
	pn,
	pO,
	po,
	pP,
	pp,
	pQ,
	pq,
	pR,
	pr,
	pS,
	ps,
	pT,
	pt,
	pU,
	pu,
	pV,
	pv,
	pW,
	pw,
	pX,
	px,
	pY,
	py,
	pZ,
	pz,
	QA,
	Qa,
	QB,
	Qb,
	QC,
	Qc,
	QD,
	Qd,
	QE,
	Qe,
	QF,
	Qf,
	QG,
	Qg,
	QH,
	Qh,
	QI,
	Qi,
	QJ,
	Qj,
	QK,
	Qk,
	QL,
	Ql,
	QM,
	Qm,
	QN,
	Qn,
	QO,
	Qo,
	QP,
	Qp,
	QQ,
	Qq,
	QR,
	Qr,
	QS,
	Qs,
	QT,
	Qt,
	QU,
	Qu,
	QV,
	Qv,
	QW,
	Qw,
	QX,
	Qx,
	QY,
	Qy,
	QZ,
	Qz,
	qA,
	qa,
	qB,
	qb,
	qC,
	qc,
	qD,
	qd,
	qE,
	qe,
	qF,
	qf,
	qG,
	qg,
	qH,
	qh,
	qI,
	qi,
	qJ,
	qj,
	qK,
	qk,
	qL,
	ql,
	qM,
	qm,
	qN,
	qn,
	qO,
	qo,
	qP,
	qp,
	qQ,
	qq,
	qR,
	qr,
	qS,
	qs,
	qT,
	qt,
	qU,
	qu,
	qV,
	qv,
	qW,
	qw,
	qX,
	qx,
	qY,
	qy,
	qZ,
	qz,
	RA,
	Ra,
	RB,
	Rb,
	RC,
	Rc,
	RD,
	Rd,
	RE,
	Re,
	RF,
	Rf,
	RG,
	Rg,
	RH,
	Rh,
	RI,
	Ri,
	RJ,
	Rj,
	RK,
	Rk,
	RL,
	Rl,
	RM,
	Rm,
	RN,
	Rn,
	RO,
	Ro,
	RP,
	Rp,
	RQ,
	Rq,
	RR,
	Rr,
	RS,
	Rs,
	RT,
	Rt,
	RU,
	Ru,
	RV,
	Rv,
	RW,
	Rw,
	RX,
	Rx,
	RY,
	Ry,
	RZ,
	Rz,
	rA,
	ra,
	rB,
	rb,
	rC,
	rc,
	rD,
	rd,
	rE,
	re,
	rF,
	rf,
	rG,
	rg,
	rH,
	rh,
	rI,
	ri,
	rJ,
	rj,
	rK,
	rk,
	rL,
	rl,
	rM,
	rm,
	rN,
	rn,
	rO,
	ro,
	rP,
	rp,
	rQ,
	rq,
	rR,
	rr,
	rS,
	rs,
	rT,
	rt,
	rU,
	ru,
	rV,
	rv,
	rW,
	rw,
	rX,
	rx,
	rY,
	ry,
	rZ,
	rz,
	SA,
	Sa,
	SB,
	Sb,
	SC,
	Sc,
	SD,
	Sd,
	SE,
	Se,
	SF,
	Sf,
	SG,
	Sg,
	SH,
	Sh,
	SI,
	Si,
	SJ,
	Sj,
	SK,
	Sk,
	SL,
	Sl,
	SM,
	Sm,
	SN,
	Sn,
	SO,
	So,
	SP,
	Sp,
	SQ,
	Sq,
	SR,
	Sr,
	SS,
	Ss,
	ST,
	St,
	SU,
	Su,
	SV,
	Sv,
	SW,
	Sw,
	SX,
	Sx,
	SY,
	Sy,
	SZ,
	Sz,
	sA,
	sa,
	sB,
	sb,
	sC,
	sc,
	sD,
	sd,
	sE,
	se,
	sF,
	sf,
	sG,
	sg,
	sH,
	sh,
	sI,
	si,
	sJ,
	sj,
	sK,
	sk,
	sL,
	sl,
	sM,
	sm,
	sN,
	sn,
	sO,
	so,
	sP,
	sp,
	sQ,
	sq,
	sR,
	sr,
	sS,
	ss,
	sT,
	st,
	sU,
	su,
	sV,
	sv,
	sW,
	sw,
	sX,
	sx,
	sY,
	sy,
	sZ,
	sz,
	TA,
	Ta,
	TB,
	Tb,
	TC,
	Tc,
	TD,
	Td,
	TE,
	Te,
	TF,
	Tf,
	TG,
	Tg,
	TH,
	Th,
	TI,
	Ti,
	TJ,
	Tj,
	TK,
	Tk,
	TL,
	Tl,
	TM,
	Tm,
	TN,
	Tn,
	TO,
	To,
	TP,
	Tp,
	TQ,
	Tq,
	TR,
	Tr,
	TS,
	Ts,
	TT,
	Tt,
	TU,
	Tu,
	TV,
	Tv,
	TW,
	Tw,
	TX,
	Tx,
	TY,
	Ty,
	TZ,
	Tz,
	tA,
	ta,
	tB,
	tb,
	tC,
	tc,
	tD,
	td,
	tE,
	te,
	tF,
	tf,
	tG,
	tg,
	tH,
	th,
	tI,
	ti,
	tJ,
	tj,
	tK,
	tk,
	tL,
	tl,
	tM,
	tm,
	tN,
	tn,
	tO,
	to,
	tP,
	tp,
	tQ,
	tq,
	tR,
	tr,
	tS,
	ts,
	tT,
	tt,
	tU,
	tu,
	tV,
	tv,
	tW,
	tw,
	tX,
	tx,
	tY,
	ty,
	tZ,
	tz,
	UA,
	Ua,
	UB,
	Ub,
	UC,
	Uc,
	UD,
	Ud,
	UE,
	Ue,
	UF,
	Uf,
	UG,
	Ug,
	UH,
	Uh,
	UI,
	Ui,
	UJ,
	Uj,
	UK,
	Uk,
	UL,
	Ul,
	UM,
	Um,
	UN,
	Un,
	UO,
	Uo,
	UP,
	Up,
	UQ,
	Uq,
	UR,
	Ur,
	US,
	Us,
	UT,
	Ut,
	UU,
	Uu,
	UV,
	Uv,
	UW,
	Uw,
	UX,
	Ux,
	UY,
	Uy,
	UZ,
	Uz,
	uA,
	ua,
	uB,
	ub,
	uC,
	uc,
	uD,
	ud,
	uE,
	ue,
	uF,
	uf,
	uG,
	ug,
	uH,
	uh,
	uI,
	ui,
	uJ,
	uj,
	uK,
	uk,
	uL,
	ul,
	uM,
	um,
	uN,
	un,
	uO,
	uo,
	uP,
	up,
	uQ,
	uq,
	uR,
	ur,
	uS,
	us,
	uT,
	ut,
	uU,
	uu,
	uV,
	uv,
	uW,
	uw,
	uX,
	ux,
	uY,
	uy,
	uZ,
	uz,
	VA,
	Va,
	VB,
	Vb,
	VC,
	Vc,
	VD,
	Vd,
	VE,
	Ve,
	VF,
	Vf,
	VG,
	Vg,
	VH,
	Vh,
	VI,
	Vi,
	VJ,
	Vj,
	VK,
	Vk,
	VL,
	Vl,
	VM,
	Vm,
	VN,
	Vn,
	VO,
	Vo,
	VP,
	Vp,
	VQ,
	Vq,
	VR,
	Vr,
	VS,
	Vs,
	VT,
	Vt,
	VU,
	Vu,
	VV,
	Vv,
	VW,
	Vw,
	VX,
	Vx,
	VY,
	Vy,
	VZ,
	Vz,
	vA,
	va,
	vB,
	vb,
	vC,
	vc,
	vD,
	vd,
	vE,
	ve,
	vF,
	vf,
	vG,
	vg,
	vH,
	vh,
	vI,
	vi,
	vJ,
	vj,
	vK,
	vk,
	vL,
	vl,
	vM,
	vm,
	vN,
	vn,
	vO,
	vo,
	vP,
	vp,
	vQ,
	vq,
	vR,
	vr,
	vS,
	vs,
	vT,
	vt,
	vU,
	vu,
	vV,
	vv,
	vW,
	vw,
	vX,
	vx,
	vY,
	vy,
	vZ,
	vz,
	WA,
	Wa,
	WB,
	Wb,
	WC,
	Wc,
	WD,
	Wd,
	WE,
	We,
	WF,
	Wf,
	WG,
	Wg,
	WH,
	Wh,
	WI,
	Wi,
	WJ,
	Wj,
	WK,
	Wk,
	WL,
	Wl,
	WM,
	Wm,
	WN,
	Wn,
	WO,
	Wo,
	WP,
	Wp,
	WQ,
	Wq,
	WR,
	Wr,
	WS,
	Ws,
	WT,
	Wt,
	WU,
	Wu,
	WV,
	Wv,
	WW,
	Ww,
	WX,
	Wx,
	WY,
	Wy,
	WZ,
	Wz,
	wA,
	wa,
	wB,
	wb,
	wC,
	wc,
	wD,
	wd,
	wE,
	we,
	wF,
	wf,
	wG,
	wg,
	wH,
	wh,
	wI,
	wi,
	wJ,
	wj,
	wK,
	wk,
	wL,
	wl,
	wM,
	wm,
	wN,
	wn,
	wO,
	wo,
	wP,
	wp,
	wQ,
	wq,
	wR,
	wr,
	wS,
	ws,
	wT,
	wt,
	wU,
	wu,
	wV,
	wv,
	wW,
	ww,
	wX,
	wx,
	wY,
	wy,
	wZ,
	wz,
	XA,
	Xa,
	XB,
	Xb,
	XC,
	Xc,
	XD,
	Xd,
	XE,
	Xe,
	XF,
	Xf,
	XG,
	Xg,
	XH,
	Xh,
	XI,
	Xi,
	XJ,
	Xj,
	XK,
	Xk,
	XL,
	Xl,
	XM,
	Xm,
	XN,
	Xn,
	XO,
	Xo,
	XP,
	Xp,
	XQ,
	Xq,
	XR,
	Xr,
	XS,
	Xs,
	XT,
	Xt,
	XU,
	Xu,
	XV,
	Xv,
	XW,
	Xw,
	XX,
	Xx,
	XY,
	Xy,
	XZ,
	Xz,
	xA,
	xa,
	xB,
	xb,
	xC,
	xc,
	xD,
	xd,
	xE,
	xe,
	xF,
	xf,
	xG,
	xg,
	xH,
	xh,
	xI,
	xi,
	xJ,
	xj,
	xK,
	xk,
	xL,
	xl,
	xM,
	xm,
	xN,
	xn,
	xO,
	xo,
	xP,
	xp,
	xQ,
	xq,
	xR,
	xr,
	xS,
	xs,
	xT,
	xt,
	xU,
	xu,
	xV,
	xv,
	xW,
	xw,
	xX,
	xx,
	xY,
	xy,
	xZ,
	xz,
	YA,
	Ya,
	YB,
	Yb,
	YC,
	Yc,
	YD,
	Yd,
	YE,
	Ye,
	YF,
	Yf,
	YG,
	Yg,
	YH,
	Yh,
	YI,
	Yi,
	YJ,
	Yj,
	YK,
	Yk,
	YL,
	Yl,
	YM,
	Ym,
	YN,
	Yn,
	YO,
	Yo,
	YP,
	Yp,
	YQ,
	Yq,
	YR,
	Yr,
	YS,
	Ys,
	YT,
	Yt,
	YU,
	Yu,
	YV,
	Yv,
	YW,
	Yw,
	YX,
	Yx,
	YY,
	Yy,
	YZ,
	Yz,
	yA,
	ya,
	yB,
	yb,
	yC,
	yc,
	yD,
	yd,
	yE,
	ye,
	yF,
	yf,
	yG,
	yg,
	yH,
	yh,
	yI,
	yi,
	yJ,
	yj,
	yK,
	yk,
	yL,
	yl,
	yM,
	ym,
	yN,
	yn,
	yO,
	yo,
	yP,
	yp,
	yQ,
	yq,
	yR,
	yr,
	yS,
	ys,
	yT,
	yt,
	yU,
	yu,
	yV,
	yv,
	yW,
	yw,
	yX,
	yx,
	yY,
	yy,
	yZ,
	yz,
	ZA,
	Za,
	ZB,
	Zb,
	ZC,
	Zc,
	ZD,
	Zd,
	ZE,
	Ze,
	ZF,
	Zf,
	ZG,
	Zg,
	ZH,
	Zh,
	ZI,
	Zi,
	ZJ,
	Zj,
	ZK,
	Zk,
	ZL,
	Zl,
	ZM,
	Zm,
	ZN,
	Zn,
	ZO,
	Zo,
	ZP,
	Zp,
	ZQ,
	Zq,
	ZR,
	Zr,
	ZS,
	Zs,
	ZT,
	Zt,
	ZU,
	Zu,
	ZV,
	Zv,
	ZW,
	Zw,
	ZX,
	Zx,
	ZY,
	Zy,
	ZZ,
	Zz,
	zA,
	za,
	zB,
	zb,
	zC,
	zc,
	zD,
	zd,
	zE,
	ze,
	zF,
	zf,
	zG,
	zg,
	zH,
	zh,
	zI,
	zi,
	zJ,
	zj,
	zK,
	zk,
	zL,
	zl,
	zM,
	zm,
	zN,
	zn,
	zO,
	zo,
	zP,
	zp,
	zQ,
	zq,
	zR,
	zr,
	zS,
	zs,
	zT,
	zt,
	zU,
	zu,
	zV,
	zv,
	zW,
	zw,
	zX,
	zx,
	zY,
	zy,
	zZ,
	zz,
	aAA,
	aAa,
	aAB,
	aAb,
	aAC,
	aAc,
	aAD,
	aAd,
	aAE,
	aAe,
	aAF,
	aAf,
	aAG,
	aAg,
	aAH,
	aAh,
	aAI,
	aAi,
	aAJ,
	aAj,
	aAK,
	aAk,
	aAL,
	aAl,
	aAM,
	aAm,
	aAN,
	aAn,
	aAO,
	aAo,
	aAP,
	aAp,
	aAQ,
	aAq,
	aAR,
	aAr,
	aAS,
	aAs,
	aAT,
	aAt,
	aAU,
	aAu,
	aAV,
	aAv,
	aAW,
	aAw,
	aAX,
	aAx,
	aAY,
	aAy,
	aAZ,
	aAz,
	aaA,
	aaa,
	aaB,
	aab,
	aaC,
	aac,
	aaD,
	aad,
	aaE,
	aae,
	aaF,
	aaf,
	aaG,
	aag,
	aaH,
	aah,
	aaI,
	aai,
	aaJ,
	aaj,
	aaK,
	aak,
	aaL,
	aal,
	aaM,
	aam,
	aaN,
	aan,
	aaO,
	aao,
	aaP,
	aap,
	aaQ,
	aaq,
	aaR,
	aar,
	aaS,
	aas,
	aaT,
	aat,
	aaU,
	aau,
	aaV,
	aav,
	aaW,
	aaw,
	aaX,
	aax,
	aaY,
	aay,
	aaZ,
	aaz,
	aBA,
	aBa,
	aBB,
	aBb,
	aBC,
	aBc,
	aBD,
	aBd,
	aBE,
	aBe,
	aBF,
	aBf,
	aBG,
	aBg,
	aBH,
	aBh,
	aBI,
	aBi,
	aBJ,
	aBj,
	aBK,
	aBk,
	aBL,
	aBl,
	aBM,
	aBm,
	aBN,
	aBn,
	aBO,
	aBo,
	aBP,
	aBp,
	aBQ,
	aBq,
	aBR,
	aBr,
	aBS,
	aBs,
	aBT,
	aBt,
	aBU,
	aBu,
	aBV,
	aBv,
	aBW,
	aBw,
	aBX,
	aBx,
	aBY,
	aBy,
	aBZ,
	aBz,
	abA,
	aba,
	abB,
	abb,
	abC,
	abc,
	abD,
	abd,
	abE,
	abe,
	abF,
	abf,
	abG,
	abg,
	abH,
	abh,
	abI,
	abi,
	abJ,
	abj,
	abK,
	abk,
	abL,
	abl,
	abM,
	abm,
	abN,
	abn,
	abO,
	abo,
	abP,
	abp,
	abQ,
	abq,
	abR,
	abr,
	abS,
	abs,
	abT,
	abt,
	abU,
	abu,
	abV,
	abv,
	abW,
	abw,
	abX,
	abx,
	abY,
	aby,
	abZ,
	abz,
	aCA,
	aCa,
	aCB,
	aCb,
	aCC,
	aCc,
	aCD,
	aCd,
	aCE,
	aCe,
	aCF,
	aCf,
	aCG,
	aCg,
	aCH,
	aCh,
	aCI,
	aCi,
	aCJ,
	aCj,
	aCK,
	aCk,
	aCL,
	aCl,
	aCM,
	aCm,
	aCN,
	aCn,
	aCO,
	aCo,
	aCP,
	aCp,
	aCQ,
	aCq,
	aCR,
	aCr,
	aCS,
	aCs,
	aCT,
	aCt,
	aCU,
	aCu,
	aCV,
	aCv,
	aCW,
	aCw,
	aCX,
	aCx,
	aCY,
	aCy,
	aCZ,
	aCz,
	acA,
	aca,
	acB,
	acb,
	acC,
	acc,
	acD,
	acd,
	acE,
	ace,
	acF,
	acf,
	acG,
	acg,
	acH,
	ach,
	acI,
	aci,
	acJ,
	acj,
	acK,
	ack,
	acL,
	acl,
	acM,
	acm,
	acN,
	acn,
	acO,
	aco,
	acP,
	acp,
	acQ,
	acq,
	acR,
	acr,
	acS,
	acs,
	acT,
	act,
}
enum Club: int {
	None,
	Engineer,
	CleanNClearing,
	KnightsHospitaller,
	IndeGEHENNA,
	IndeMILLENNIUM,
	IndeHyakkiyako,
	IndeShanhaijing,
	IndeTrinity,
	FoodService,
	Countermeasure,
	BookClub,
	MatsuriOffice,
	GourmetClub,
	HoukagoDessert,
	RedwinterSecretary,
	Schale,
	TheSeminar,
	AriusSqud,
	Justice,
	Fuuki,
	Kohshinjo68,
	Meihuayuan,
	SisterHood,
	GameDev,
	anzenkyoku,
	RemedialClass,
	SPTF,
	TrinityVigilance,
	Veritas,
	TrainingClub,
	Onmyobu,
	Shugyobu,
	Endanbou,
	NinpoKenkyubu,
	Class227,
	EmptyClub,
	Emergentology,
	RabbitPlatoon,
	PandemoniumSociety,
	HotSpringsDepartment,
	TeaParty,
	PublicPeaceBureau,
	Genryumon,
	BlackTortoisePromenade,
	LaborParty,
	KnowledgeLiberationFront,
	Hyakkayouran,
	ShinySparkleSociety,
}
table GroundVector3 {
	X: float;
	Y: float;
	Z: float;
}

table AcademyFavorScheduleExcelTable {
	DataList: [AcademyFavorScheduleExcel];
}

table AcademyFavorScheduleExcel {
	Id: long;
	CharacterId: long;
	ScheduleGroupId: long;
	OrderInGroup: long;
	Location: string;
	LocalizeScenarioId: uint;
	FavorRank: long;
	SecretStoneAmount: long;
	ScenarioSriptGroupId: long;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table AcademyLocationExcelTable {
	DataList: [AcademyLocationExcel];
}

table AcademyLocationExcel {
	Id: long;
	LocalizeEtcId: uint;
	PrefabPath: string;
	IconImagePath: string;
	OpenCondition: [School];
	OpenConditionCount: [long];
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	OpenTeacherRank: long;
}

table AcademyLocationRankExcelTable {
	DataList: [AcademyLocationRankExcel];
}

table AcademyLocationRankExcel {
	Rank: long;
	RankExp: long;
	TotalExp: long;
}

table AcademyMessanger1ExcelTable {
	DataList: [AcademyMessanger1Excel];
}

table AcademyMessanger1Excel {
	MessageGroupId: long;
	Id: long;
	CharacterId: long;
	MessageCondition: AcademyMessageConditions;
	ConditionValue: long;
	PreConditionGroupId: long;
	PreConditionFavorScheduleId: long;
	FavorScheduleId: long;
	NextGroupId: long;
	FeedbackTimeMillisec: long;
	MessageType: AcademyMessageTypes;
	ImagePath: string;
	MessageKR: string;
	MessageJP: string;
}

table AcademyMessanger2ExcelTable {
	DataList: [AcademyMessanger2Excel];
}

table AcademyMessanger2Excel {
	MessageGroupId: long;
	Id: long;
	CharacterId: long;
	MessageCondition: AcademyMessageConditions;
	ConditionValue: long;
	PreConditionGroupId: long;
	PreConditionFavorScheduleId: long;
	FavorScheduleId: long;
	NextGroupId: long;
	FeedbackTimeMillisec: long;
	MessageType: AcademyMessageTypes;
	ImagePath: string;
	MessageKR: string;
	MessageJP: string;
}

table AcademyMessanger3ExcelTable {
	DataList: [AcademyMessanger3Excel];
}

table AcademyMessanger3Excel {
	MessageGroupId: long;
	Id: long;
	CharacterId: long;
	MessageCondition: AcademyMessageConditions;
	ConditionValue: long;
	PreConditionGroupId: long;
	PreConditionFavorScheduleId: long;
	FavorScheduleId: long;
	NextGroupId: long;
	FeedbackTimeMillisec: long;
	MessageType: AcademyMessageTypes;
	ImagePath: string;
	MessageKR: string;
	MessageJP: string;
}

table AcademyMessangerExcelTable {
	DataList: [AcademyMessangerExcel];
}

table AcademyMessangerExcel {
	MessageGroupId: long;
	Id: long;
	CharacterId: long;
	MessageCondition: AcademyMessageConditions;
	ConditionValue: long;
	PreConditionGroupId: long;
	PreConditionFavorScheduleId: long;
	FavorScheduleId: long;
	NextGroupId: long;
	FeedbackTimeMillisec: long;
	MessageType: AcademyMessageTypes;
	ImagePath: string;
	MessageKR: string;
	MessageJP: string;
}

table AcademyRewardExcelTable {
	DataList: [AcademyRewardExcel];
}

table AcademyRewardExcel {
	Location: string;
	ScheduleGroupId: long;
	OrderInGroup: long;
	Id: long;
	ProgressTexture: string;
	LocalizeEtcId: uint;
	LocationRank: long;
	FavorExp: long;
	SecretStoneAmount: long;
	SecretStoneProb: long;
	ExtraFavorExp: long;
	ExtraFavorExpProb: long;
	ExtraRewardParcelType: [ParcelType];
	ExtraRewardParcelId: [long];
	ExtraRewardAmount: [long];
	ExtraRewardProb: [long];
	IsExtraRewardDisplayed: [bool];
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table AcademyTicketExcelTable {
	DataList: [AcademyTicketExcel];
}

table AcademyTicketExcel {
	LocationRankSum: long;
	ScheduleTicktetMax: long;
}

table AcademyZoneExcelTable {
	DataList: [AcademyZoneExcel];
}

table AcademyZoneExcel {
	Id: long;
	LocationId: long;
	LocationRankForUnlock: long;
	LocalizeEtcId: uint;
	StudentVisitProb: [long];
	RewardGroupId: long;
	Tags: [Tag];
}

table AccountLevelExcelTable {
	DataList: [AccountLevelExcel];
}

table AccountLevelExcel {
	Id: long;
	Level: long;
	Exp: long;
	APAutoChargeMax: long;
	NeedReportEvent: bool;
}

table AnimationBlendTable {
	DataList: [BlendData];
}

table BlendData {
	Type: int;
	InfoList: [BlendInfo];
}

table BlendInfo {
	From: int;
	To: int;
	Blend: float;
}

table AnimatorDataTable {
	DataList: [AnimatorData];
}

table AnimatorData {
	DefaultStateName: string;
	Name: string;
	DataList: [AniStateData];
}

table AniStateData {
	StateName: string;
	StatePrefix: string;
	StateNameWithPrefix: string;
	Tag: string;
	SpeedParameterName: string;
	SpeedParamter: float;
	StateSpeed: float;
	ClipName: string;
	Length: float;
	FrameRate: float;
	IsLooping: bool;
	Events: [AniEventData];
}

table AniEventData {
	Name: string;
	Time: float;
	IntParam: int;
	FloatParam: float;
	StringParam: string;
}

table ArenaLevelSectionExcelTable {
	DataList: [ArenaLevelSectionExcel];
}

table ArenaLevelSectionExcel {
	ArenaSeasonId: long;
	StartLevel: long;
	LastLevel: long;
	UserCount: long;
}

table ArenaMapExcelTable {
	DataList: [ArenaMapExcel];
}

table ArenaMapExcel {
	UniqueId: long;
	TerrainType: long;
	TerrainTypeLocalizeKey: string;
	ImagePath: string;
	GroundGroupId: long;
	GroundGroupNameLocalizeKey: string;
	StartRank: long;
	EndRank: long;
	GroundId: long;
}

table ArenaNPCExcelTable {
	DataList: [ArenaNPCExcel];
}

table ArenaNPCExcel {
	UniqueId: long;
	Rank: long;
	NPCAccountLevel: long;
	NPCLevel: long;
	NPCLevelDeviation: long;
	NPCStarGrade: long;
	ExceptionCharacterRarities: [Rarity];
	ExceptionMainCharacterIds: [long];
	ExceptionSupportCharacterIds: [long];
	ExceptionTSSIds: [long];
}

table ArenaRewardExcelTable {
	DataList: [ArenaRewardExcel];
}

table ArenaRewardExcel {
	UniqueId: long;
	arenaRewardType: ArenaRewardType;
	RankStart: long;
	RankEnd: long;
	RankIconPath: string;
	RewardParcelType: [ParcelType];
	RewardParcelUniqueId: [long];
	RewardParcelUniqueName: [string];
	RewardParcelAmount: [long];
}

table ArenaSeasonCloseRewardExcelTable {
	DataList: [ArenaSeasonCloseRewardExcel];
}

table ArenaSeasonCloseRewardExcel {
	SeasonId: long;
	RankStart: long;
	RankEnd: long;
	RewardParcelType: [ParcelType];
	RewardParcelUniqueId: [long];
	RewardParcelUniqueName: [string];
	RewardParcelAmount: [long];
}

table ArenaSeasonExcelTable {
	DataList: [ArenaSeasonExcel];
}

table ArenaSeasonExcel {
	UniqueId: long;
	SeasonStartDate: string;
	SeasonEndDate: string;
	SeasonGroupLimit: long;
	PrevSeasonId: long;
}

table AssistEchelonTypeConvertExcelTable {
	DataList: [AssistEchelonTypeConvertExcel];
}

table AssistEchelonTypeConvertExcel {
	Contents: EchelonType;
	ConvertTo: EchelonType;
}

table AttendanceExcelTable {
	DataList: [AttendanceExcel];
}

table AttendanceExcel {
	Id: long;
	Type: AttendanceType;
	CountdownPrefab: string;
	DisplayOrder: long;
	AccountType: AccountState;
	AccountLevelLimit: long;
	Title: string;
	InfomationLocalizeCode: string;
	CountRule: AttendanceCountRule;
	CountReset: AttendanceResetType;
	BookSize: long;
	StartDate: string;
	StartableEndDate: string;
	EndDate: string;
	ExpiryDate: long;
	mailType: MailType;
	dialogCategory: DialogCategory;
	TitleImagePath: string;
	DecorationImagePath: string;
}

table AttendanceRewardExcelTable {
	DataList: [AttendanceRewardExcel];
}

table AttendanceRewardExcel {
	AttendanceId: long;
	Day: long;
	RewardIcon: string;
	RewardParcelType: [ParcelType];
	RewardId: [long];
	RewardAmount: [long];
}

table BattleLevelFactorExcelTable {
	DataList: [BattleLevelFactorExcel];
}

table BattleLevelFactorExcel {
	LevelDiff: int;
	DamageRate: long;
}

table BossExternalBTExcelTable {
	DataList: [BossExternalBTExcel];
}

table BossExternalBTExcel {
	ExternalBTId: long;
	AIPhase: long;
	externalBTNodeType: ExternalBTNodeType;
	externalBTTrigger: ExternalBTTrigger;
	TriggerArgument: string;
	BehaviorRate: long;
	externalBehavior: ExternalBehavior;
	BehaviorArgument: string;
}

table BossPhaseExcelTable {
	DataList: [BossPhaseExcel];
}

table BossPhaseExcel {
	Id: long;
	AIPhase: long;
	NormalAttackSkillUniqueName: string;
	UseExSkill: [bool];
}

table BuffParticleExcelTable {
	DataList: [BuffParticleExcel];
}

table BuffParticleExcel {
	UniqueId: long;
	UniqueName: string;
	BuffType: string;
	BuffName: string;
	ResourcePath: string;
}

table BulletArmorDamageFactorExcelTable {
	DataList: [BulletArmorDamageFactorExcel];
}

table BulletArmorDamageFactorExcel {
	DamageFactorGroupId: string;
	bulletType: BulletType;
	armorType: ArmorType;
	DamageRate: long;
	damageAttribute: DamageAttribute;
	MinDamageRate: long;
	MaxDamageRate: long;
	ShowHighlightFloater: bool;
}

table CafeInfoExcelTable {
	DataList: [CafeInfoExcel];
}

table CafeInfoExcel {
	CafeId: long;
	IsDefault: bool;
	OpenConditionCafeId: OpenConditionContent;
	OpenConditionCafeInvite: OpenConditionContent;
}

table CafeInteractionExcelTable {
	DataList: [CafeInteractionExcel];
}

table CafeInteractionExcel {
	CharacterId: long;
	IgnoreIfUnobtained: bool;
	IgnoreIfUnobtainedStartDate: string;
	IgnoreIfUnobtainedEndDate: string;
	BubbleType: [BubbleType];
	BubbleDuration: [long];
	FavorEmoticonRewardParcelType: ParcelType;
	FavorEmoticonRewardId: long;
	FavorEmoticonRewardAmount: long;
	CafeCharacterState: [string];
}

table CafeProductionExcelTable {
	DataList: [CafeProductionExcel];
}

table CafeProductionExcel {
	CafeId: long;
	Rank: long;
	CafeProductionParcelType: ParcelType;
	CafeProductionParcelId: long;
	ParcelProductionCoefficient: long;
	ParcelProductionCorrectionValue: long;
	ParcelStorageMax: long;
}

table CafeRankExcelTable {
	DataList: [CafeRankExcel];
}

table CafeRankExcel {
	CafeId: long;
	Rank: long;
	RecipeId: long;
	ComfortMax: long;
	TagCountMax: long;
	CharacterVisitMin: int;
	CharacterVisitMax: int;
	CafeVisitWeightBase: int;
	CafeVisitWeightTagBonusStep: [int];
	CafeVisitWeightTagBonus: [int];
}

table CampaignChapterExcelTable {
	DataList: [CampaignChapterExcel];
}

table CampaignChapterExcel {
	Id: long;
	Name: string;
	NormalImagePath: string;
	HardImagePath: string;
	Order: long;
	PreChapterId: [long];
	ChapterRewardId: long;
	ChapterHardRewardId: long;
	ChapterVeryHardRewardId: long;
	NormalCampaignStageId: [long];
	NormalExtraStageId: [long];
	HardCampaignStageId: [long];
	VeryHardCampaignStageId: [long];
	IsTacticSkip: bool;
}

table CampaignChapterRewardExcelTable {
	DataList: [CampaignChapterRewardExcel];
}

table CampaignChapterRewardExcel {
	Id: long;
	CampaignChapterStar: long;
	ChapterRewardParcelType: [ParcelType];
	ChapterRewardId: [long];
	ChapterRewardAmount: [int];
}

table CampaignStageExcelTable {
	DataList: [CampaignStageExcel];
}

table CampaignStageExcel {
	Id: long;
	Deprecated: bool;
	Name: string;
	StageNumber: string;
	CleardScenarioId: long;
	BattleDuration: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	StageEnterEchelonCount: int;
	StarConditionTacticRankSCount: long;
	StarConditionTurnCount: long;
	EnterScenarioGroupId: [long];
	ClearScenarioGroupId: [long];
	StrategyMap: string;
	StrategyMapBG: string;
	CampaignStageRewardId: long;
	MaxTurn: int;
	stageTopography: StageTopography;
	RecommandLevel: int;
	BgmId: string;
	strategyEnvironment: StrategyEnvironment;
	GroundId: long;
	StrategySkipGroundId: int;
	contentType: ContentType;
	BGMId: long;
	FirstClearReportEventName: string;
	TacticRewardExp: long;
	FixedEchelonId: long;
	echelonExtensionType: EchelonExtensionType;
}

table CampaignStageRewardExcelTable {
	DataList: [CampaignStageRewardExcel];
}

table CampaignStageRewardExcel {
	GroupId: long;
	rewardTag: RewardTag;
	StageRewardProb: int;
	StageRewardParcelType: ParcelType;
	StageRewardId: long;
	StageRewardAmount: int;
	IsDisplayed: bool;
}

table CampaignStrategyObjectExcelTable {
	DataList: [CampaignStrategyObjectExcel];
}

table CampaignStrategyObjectExcel {
	Id: long;
	Key: uint;
	Name: string;
	PrefabName: string;
	strategyObjectType: StrategyObjectType;
	StrategyRewardParcelType: ParcelType;
	StrategyRewardID: long;
	StrategyRewardName: string;
	StrategyRewardAmount: int;
	StrategySightRange: long;
	PortalId: int;
	HealValue: int;
	SwithId: int;
	BuffId: int;
	Disposable: bool;
}

table CampaignUnitExcelTable {
	DataList: [CampaignUnitExcel];
}

table CampaignUnitExcel {
	Id: long;
	Key: uint;
	Name: string;
	PrefabName: string;
	StrategyPrefabName: string;
	EnterScenarioGroupId: [long];
	ClearScenarioGroupId: [long];
	GroundId: long;
	MoveRange: int;
	AIMoveType: StrategyAIType;
	Grade: HexaUnitGrade;
	EnvironmentType: TacticEnvironment;
	Scale: float;
	IsTacticSkip: bool;
}

table CharacterAcademyTagsExcelTable {
	DataList: [CharacterAcademyTagsExcel];
}

table CharacterAcademyTagsExcel {
	Id: long;
	FavorTags: [Tag];
	FavorItemTags: [Tag];
	FavorItemUniqueTags: [Tag];
	ForbiddenTags: [Tag];
	ZoneWhiteListTags: [Tag];
}

table CharacterAIExcelTable {
	DataList: [CharacterAIExcel];
}

table CharacterAIExcel {
	Id: long;
	engageType: EngageType;
	Positioning: PositioningType;
	CheckCanUseAutoSkill: bool;
	DistanceReduceRatioObstaclePath: long;
	DistanceReduceObstaclePath: long;
	DistanceReduceRatioFormationPath: long;
	DistanceReduceFormationPath: long;
	MinimumPositionGap: long;
	CanUseObstacleOfKneelMotion: bool;
	CanUseObstacleOfStandMotion: bool;
	HasTargetSwitchingMotion: bool;
}

table CharacterCalculationLimitExcelTable {
	DataList: [CharacterCalculationLimitExcel];
}

table CharacterCalculationLimitExcel {
	Id: long;
	tacticEntityType: TacticEntityType;
	CalculationValue: BattleCalculationStat;
	MinValue: long;
	MaxValue: long;
}

table CharacterCombatSkinExcelTable {
	DataList: [CharacterCombatSkinExcel];
}

table CharacterCombatSkinExcel {
	GroupId: string;
	UniqueId: long;
	ResourcePath: string;
}

table CharacterDialogFieldExcelTable {
	DataList: [CharacterDialogFieldExcel];
}

table CharacterDialogFieldExcel {
	GroupId: long;
	Phase: int;
	TargetIndex: int;
	DialogType: FieldDialogType;
	Duration: long;
	MotionName: string;
	IsInteractionDialog: bool;
	HideUI: bool;
	LocalizeKR: string;
	LocalizeJP: string;
}

table CharacterExcelTable {
	DataList: [CharacterExcel];
}

table CharacterExcel {
	Id: long;
	DevName: string;
	CostumeGroupId: long;
	IsPlayable: bool;
	productionStep: ProductionStep;
	CollectionVisible: bool;
	ReleaseDate: string;
	CollectionVisibleStartDate: string;
	CollectionVisibleEndDate: string;
	IsPlayableCharacter: bool;
	LocalizeEtcId: uint;
	rarity: Rarity;
	IsNPC: bool;
	tacticEntityType: TacticEntityType;
	CanSurvive: bool;
	IsDummy: bool;
	SubPartsCount: int;
	tacticRole: TacticRole;
	weaponType: WeaponType;
	tacticRange: TacticRange;
	bulletType: BulletType;
	armorType: ArmorType;
	aimIKType: AimIKType;
	school: School;
	club: Club;
	DefaultStarGrade: int;
	MaxStarGrade: int;
	statLevelUpType: StatLevelUpType;
	squadType: SquadType;
	Jumpable: bool;
	PersonalityId: long;
	CharacterAIId: long;
	ExternalBTId: long;
	MainCombatStyleId: long;
	CombatStyleIndex: int;
	ScenarioCharacter: string;
	SpawnTemplateId: uint;
	FavorLevelupType: int;
	EquipmentSlot: [EquipmentCategory];
	WeaponLocalizeId: uint;
	DisplayEnemyInfo: bool;
	BodyRadius: long;
	RandomEffectRadius: long;
	HPBarHide: bool;
	HpBarHeight: float;
	HighlightFloaterHeight: float;
	EmojiOffsetX: float;
	EmojiOffsetY: float;
	MoveStartFrame: int;
	MoveEndFrame: int;
	JumpMotionFrame: int;
	AppearFrame: int;
	CanMove: bool;
	CanFix: bool;
	CanCrowdControl: bool;
	CanBattleItemMove: bool;
	IsAirUnit: bool;
	AirUnitHeight: long;
	Tags: [Tag];
	SecretStoneItemId: long;
	SecretStoneItemAmount: int;
	CharacterPieceItemId: long;
	CharacterPieceItemAmount: int;
	CombineRecipeId: long;
}

table CharacterGearExcelTable {
	DataList: [CharacterGearExcel];
}

table CharacterGearExcel {
	Id: long;
	CharacterId: long;
	statLevelUpType: StatLevelUpType;
	Tier: long;
	NextTierEquipment: long;
	RecipeId: long;
	OpenFavorLevel: long;
	MaxLevel: long;
	LearnSkillSlot: string;
	StatType: [EquipmentOptionType];
	MinStatValue: [long];
	MaxStatValue: [long];
	Icon: string;
	LocalizeEtcId: uint;
	Tags: [Tag];
}

table CharacterGearLevelExcelTable {
	DataList: [CharacterGearLevelExcel];
}

table CharacterGearLevelExcel {
	Level: int;
	TierLevelExp: [long];
	TotalExp: [long];
}

table CharacterIllustCoordinateExcelTable {
	DataList: [CharacterIllustCoordinateExcel];
}

table CharacterIllustCoordinateExcel {
	Id: long;
	CharacterBodyCenterX: float;
	CharacterBodyCenterY: float;
	DefaultScale: float;
	MinScale: float;
	MaxScale: float;
}

table CharacterLevelExcelTable {
	DataList: [CharacterLevelExcel];
}

table CharacterLevelExcel {
	Level: int;
	Exp: long;
	TotalExp: long;
}

table CharacterLevelStatFactorExcelTable {
	DataList: [CharacterLevelStatFactorExcel];
}

table CharacterLevelStatFactorExcel {
	Level: long;
	CriticalFactor: long;
	StabilityFactor: long;
	DefenceFactor: long;
	AccuracyFactor: long;
}

table CharacterSkillListExcelTable {
	DataList: [CharacterSkillListExcel];
}

table CharacterSkillListExcel {
	CharacterSkillListGroupId: long;
	MinimumGradeCharacterWeapon: int;
	MinimumTierCharacterGear: int;
	FormIndex: int;
	IsRootMotion: bool;
	IsMoveLeftRight: bool;
	UseRandomExSkillTimeline: bool;
	TSAInteractionId: long;
	NormalSkillGroupId: [string];
	NormalSkillTimeLineIndex: [int];
	ExSkillGroupId: [string];
	ExSkillCutInTimeLineIndex: [string];
	ExSkillLevelTimeLineIndex: [string];
	PublicSkillGroupId: [string];
	PublicSkillTimeLineIndex: [int];
	PassiveSkillGroupId: [string];
	LeaderSkillGroupId: [string];
	ExtraPassiveSkillGroupId: [string];
	HiddenPassiveSkillGroupId: [string];
}

table CharacterStatExcelTable {
	DataList: [CharacterStatExcel];
}

table CharacterStatExcel {
	CharacterId: long;
	StabilityRate: long;
	StabilityPoint: long;
	AttackPower1: long;
	AttackPower100: long;
	MaxHP1: long;
	MaxHP100: long;
	DefensePower1: long;
	DefensePower100: long;
	HealPower1: long;
	HealPower100: long;
	DodgePoint: long;
	AccuracyPoint: long;
	CriticalPoint: long;
	CriticalResistPoint: long;
	CriticalDamageRate: long;
	CriticalDamageResistRate: long;
	BlockRate: long;
	HealEffectivenessRate: long;
	OppressionPower: long;
	OppressionResist: long;
	DefensePenetration1: long;
	DefensePenetration100: long;
	DefensePenetrationResist1: long;
	DefensePenetrationResist100: long;
	EnhanceExplosionRate: long;
	EnhancePierceRate: long;
	EnhanceMysticRate: long;
	EnhanceSonicRate: long;
	EnhanceSiegeRate: long;
	EnhanceNormalRate: long;
	EnhanceLightArmorRate: long;
	EnhanceHeavyArmorRate: long;
	EnhanceUnarmedRate: long;
	EnhanceElasticArmorRate: long;
	EnhanceStructureRate: long;
	EnhanceNormalArmorRate: long;
	ExtendBuffDuration: long;
	ExtendDebuffDuration: long;
	ExtendCrowdControlDuration: long;
	AmmoCount: long;
	AmmoCost: long;
	IgnoreDelayCount: long;
	NormalAttackSpeed: long;
	Range: long;
	InitialRangeRate: long;
	MoveSpeed: long;
	SightPoint: long;
	ActiveGauge: long;
	GroggyGauge: int;
	GroggyTime: int;
	StrategyMobility: long;
	ActionCount: long;
	StrategySightRange: long;
	DamageRatio: long;
	DamagedRatio: long;
	DamageRatio2Increase: long;
	DamageRatio2Decrease: long;
	DamagedRatio2Increase: long;
	DamagedRatio2Decrease: long;
	ExDamagedRatioIncrease: long;
	ExDamagedRatioDecrease: long;
	StreetBattleAdaptation: TerrainAdaptationStat;
	OutdoorBattleAdaptation: TerrainAdaptationStat;
	IndoorBattleAdaptation: TerrainAdaptationStat;
	RegenCost: long;
}

table CharacterStatLimitExcelTable {
	DataList: [CharacterStatLimitExcel];
}

table CharacterStatLimitExcel {
	Id: long;
	tacticEntityType: TacticEntityType;
	statType: StatType;
	StatMinValue: long;
	StatMaxValue: long;
	StatRatioMinValue: long;
	StatRatioMaxValue: long;
}

table CharacterStatsDetailExcelTable {
	DataList: [CharacterStatsDetailExcel];
}

table CharacterStatsDetailExcel {
	Id: long;
	DetailShowStats: [StatType];
	IsStatsPercent: [bool];
}

table CharacterStatsTransExcelTable {
	DataList: [CharacterStatsTransExcel];
}

table CharacterStatsTransExcel {
	TransSupportStats: StatType;
	echelonExtensionType: EchelonExtensionType;
	TransSupportStatsFactor: int;
	statTransType: StatTransType;
}

table CharacterTranscendenceExcelTable {
	DataList: [CharacterTranscendenceExcel];
}

table CharacterTranscendenceExcel {
	CharacterId: long;
	MaxFavorLevel: [int];
	StatBonusRateAttack: [long];
	StatBonusRateHP: [long];
	StatBonusRateHeal: [long];
	RecipeId: [long];
	SkillSlotA: [string];
	SkillSlotB: [string];
	MaxlevelStar: [int];
}

table CharacterVictoryInteractionExcelTable {
	DataList: [CharacterVictoryInteractionExcel];
}

table CharacterVictoryInteractionExcel {
	InteractionId: long;
	CostumeId01: long;
	PositionIndex01: int;
	VictoryStartAnimationPath01: string;
	VictoryEndAnimationPath01: string;
	CostumeId02: long;
	PositionIndex02: int;
	VictoryStartAnimationPath02: string;
	VictoryEndAnimationPath02: string;
	CostumeId03: long;
	PositionIndex03: int;
	VictoryStartAnimationPath03: string;
	VictoryEndAnimationPath03: string;
	CostumeId04: long;
	PositionIndex04: int;
	VictoryStartAnimationPath04: string;
	VictoryEndAnimationPath04: string;
	CostumeId05: long;
	PositionIndex05: int;
	VictoryStartAnimationPath05: string;
	VictoryEndAnimationPath05: string;
	CostumeId06: long;
	PositionIndex06: int;
	VictoryStartAnimationPath06: string;
	VictoryEndAnimationPath06: string;
}

table CharacterWeaponExcelTable {
	DataList: [CharacterWeaponExcel];
}

table CharacterWeaponExcel {
	Id: long;
	ImagePath: string;
	SetRecipe: long;
	statLevelUpType: StatLevelUpType;
	AttackPower: long;
	AttackPower100: long;
	MaxHP: long;
	MaxHP100: long;
	HealPower: long;
	HealPower100: long;
	Unlock: [bool];
	RecipeId: [long];
	MaxLevel: [int];
	LearnSkillSlot: [string];
	StatType: [EquipmentOptionType];
	StatValue: [long];
}

table CharacterWeaponExpBonusExcelTable {
	DataList: [CharacterWeaponExpBonusExcel];
}

table CharacterWeaponExpBonusExcel {
	weaponType: WeaponType;
	WeaponExpGrowthA: int;
	WeaponExpGrowthB: int;
	WeaponExpGrowthC: int;
	WeaponExpGrowthZ: int;
}

table CharacterWeaponLevelExcelTable {
	DataList: [CharacterWeaponLevelExcel];
}

table CharacterWeaponLevelExcel {
	Level: int;
	Exp: long;
	TotalExp: long;
}

table ClanAssistSlotExcelTable {
	DataList: [ClanAssistSlotExcel];
}

table ClanAssistSlotExcel {
	SlotId: long;
	echelonType: EchelonType;
	SlotNumber: long;
	AssistTermRewardPeriodFromSec: long;
	AssistRewardLimit: long;
	AssistRentRewardDailyMaxCount: long;
	AssistRentalFeeAmount: long;
	AssistRentalFeeAmountStranger: long;
}

table ClanRewardExcelTable {
	DataList: [ClanRewardExcel];
}

table ClanRewardExcel {
	clanRewardType: ClanRewardType;
	echelonType: EchelonType;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
}

table ClearDeckRuleExcelTable {
	DataList: [ClearDeckRuleExcel];
}

table ClearDeckRuleExcel {
	contentType: ContentType;
	SizeLimit: long;
}

table ConquestCalculateExcelTable {
	DataList: [ConquestCalculateExcel];
}

table ConquestCalculateExcel {
	EventContentId: long;
	CalculateConditionParcelType: ParcelType;
	CalculateConditionParcelUniqueId: long;
	CalculateConditionParcelAmount: long;
}

table ConquestCameraSettingExcelTable {
	DataList: [ConquestCameraSettingExcel];
}

table ConquestCameraSettingExcel {
	Id: long;
	ConquestMapBoundaryOffsetLeft: float;
	ConquestMapBoundaryOffsetRight: float;
	ConquestMapBoundaryOffsetTop: float;
	ConquestMapBoundaryOffsetBottom: float;
	ConquestMapCenterOffsetX: float;
	ConquestMapCenterOffsetY: float;
	CameraAngle: float;
	CameraZoomMax: float;
	CameraZoomMin: float;
	CameraZoomDefault: float;
}

table ConquestErosionExcelTable {
	DataList: [ConquestErosionExcel];
}

table ConquestErosionExcel {
	EventContentId: long;
	Id: long;
	ErosionType: ConquestErosionType;
	Phase: int;
	PhaseAlarm: bool;
	StepIndex: int;
	PhaseStartConditionType: [ConquestConditionType];
	PhaseStartConditionParameter: [string];
	PhaseBeforeExposeConditionType: [ConquestConditionType];
	PhaseBeforeExposeConditionParameter: [string];
	ErosionBattleConditionParcelType: ParcelType;
	ErosionBattleConditionParcelUniqueId: long;
	ErosionBattleConditionParcelAmount: long;
	ConquestRewardId: long;
}

table ConquestErosionUnitExcelTable {
	DataList: [ConquestErosionUnitExcel];
}

table ConquestErosionUnitExcel {
	TilePrefabId: long;
	MassErosionUnitId: long;
	MassErosionUnitRotationY: float;
	IndividualErosionUnitId: long;
	IndividualErosionUnitRotationY: float;
}

table ConquestEventExcelTable {
	DataList: [ConquestEventExcel];
}

table ConquestEventExcel {
	EventContentId: long;
	MainStoryEventContentId: long;
	conquestEventType: ConquestEventType;
	UseErosion: bool;
	UseUnexpectedEvent: bool;
	UseCalculate: bool;
	UseConquestObject: bool;
	EvnetMapGoalLocalize: string;
	EvnetMapNameLocalize: string;
	MapEnterScenarioGroupId: long;
	EvnetScenarioBG: string;
	ManageUnitChange: int;
	AssistCount: int;
	PlayTimeLimitInSeconds: int;
	AnimationUnitAmountMin: int;
	AnimationUnitAmountMax: int;
	AnimationUnitDelay: float;
	LocalizeUnexpected: string;
	LocalizeErosions: string;
	LocalizeStep: string;
	LocalizeTile: string;
	LocalizeMapInfo: string;
	LocalizeManage: string;
	LocalizeUpgrade: string;
	LocalizeTreasureBox: string;
	IndividualErosionDailyCount: long;
}

table ConquestGroupBonusExcelTable {
	DataList: [ConquestGroupBonusExcel];
}

table ConquestGroupBonusExcel {
	ConquestBonusId: long;
	School: [School];
	RecommandLocalizeEtcId: uint;
	BonusParcelType: [ParcelType];
	BonusId: [long];
	BonusCharacterCount1: [int];
	BonusPercentage1: [long];
	BonusCharacterCount2: [int];
	BonusPercentage2: [long];
	BonusCharacterCount3: [int];
	BonusPercentage3: [long];
}

table ConquestGroupBuffExcelTable {
	DataList: [ConquestGroupBuffExcel];
}

table ConquestGroupBuffExcel {
	ConquestBuffId: long;
	School: [School];
	RecommandLocalizeEtcId: uint;
	SkillGroupId: string;
}

table ConquestMapExcelTable {
	DataList: [ConquestMapExcel];
}

table ConquestMapExcel {
	EventContentId: long;
	DevName: string;
	MapDifficulty: StageDifficulty;
	StepIndex: int;
	ConquestMap: string;
	StepEnterScenarioGroupId: long;
	StepOpenConditionType: [ConquestConditionType];
	StepOpenConditionParameter: [string];
	MapGoalLocalize: string;
	StepGoalLocalize: string;
	StepNameLocalize: string;
	ConquestMapBG: string;
	CameraSettingId: long;
}

table ConquestObjectExcelTable {
	DataList: [ConquestObjectExcel];
}

table ConquestObjectExcel {
	Id: long;
	EventContentId: long;
	conquestObjectType: ConquestObjectType;
	Key: uint;
	Name: string;
	PrefabName: string;
	ConquestRewardParcelType: ParcelType;
	ConquestRewardID: long;
	ConquestRewardAmount: int;
	Disposable: bool;
	StepIndex: int;
	StepObjectCount: int;
}

table ConquestPlayGuideExcelTable {
	DataList: [ConquestPlayGuideExcel];
}

table ConquestPlayGuideExcel {
	Id: long;
	EventContentId: long;
	DisplayOrder: int;
	GuideTitle: string;
	GuideImagePath: string;
	GuideText: string;
}

table ConquestProgressResourceExcelTable {
	DataList: [ConquestProgressResourceExcel];
}

table ConquestProgressResourceExcel {
	Id: long;
	EventContentId: long;
	Group: ConquestProgressType;
	ProgressResource: string;
	VoiceId: [uint];
	ProgressLocalizeCode: string;
}

table ConquestRewardExcelTable {
	DataList: [ConquestRewardExcel];
}

table ConquestRewardExcel {
	GroupId: long;
	rewardTag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	IsDisplayed: bool;
}

table ConquestStepExcelTable {
	DataList: [ConquestStepExcel];
}

table ConquestStepExcel {
	EventContentId: long;
	MapDifficulty: StageDifficulty;
	Step: int;
	StepGoalLocalize: string;
	StepEnterScenarioGroupId: long;
	StepEnterItemType: ParcelType;
	StepEnterItemUniqueId: long;
	StepEnterItemAmount: long;
	UnexpectedEventUnitId: [long];
	UnexpectedEventPrefab: string;
	TreasureBoxObjectId: long;
	TreasureBoxCountPerStepOpen: int;
}

table ConquestTileExcelTable {
	DataList: [ConquestTileExcel];
}

table ConquestTileExcel {
	Id: long;
	Name: string;
	EventId: long;
	Step: int;
	PrefabName: string;
	TileNameLocalize: string;
	TileImageName: string;
	Playable: bool;
	TileType: ConquestTileType;
	NotMapFog: bool;
	GroupBonusId: long;
	ConquestCostType: ParcelType;
	ConquestCostId: long;
	ConquestCostAmount: int;
	ManageCostType: ParcelType;
	ManageCostId: long;
	ManageCostAmount: int;
	ConquestRewardId: long;
	MassErosionId: long;
	Upgrade2CostType: ParcelType;
	Upgrade2CostId: long;
	Upgrade2CostAmount: int;
	Upgrade3CostType: ParcelType;
	Upgrade3CostId: long;
	Upgrade3CostAmount: int;
}

table ConquestUnexpectedEventExcelTable {
	DataList: [ConquestUnexpectedEventExcel];
}

table ConquestUnexpectedEventExcel {
	EventContentId: long;
	UnexpectedEventConditionType: ParcelType;
	UnexpectedEventConditionUniqueId: long;
	UnexpectedEventConditionAmount: long;
	UnexpectedEventOccurDailyLimitCount: int;
	UnitCountPerStep: int;
	UnexpectedEventPrefab: [string];
	UnexpectedEventUnitId: [long];
}

table ConquestUnitExcelTable {
	DataList: [ConquestUnitExcel];
}

table ConquestUnitExcel {
	Id: long;
	Key: uint;
	Name: string;
	PrefabName: string;
	StrategyPrefabName: string;
	Scale: float;
	ShieldEffectScale: float;
	UnitFxPrefabName: string;
	PointAnimation: string;
	EnemyType: ConquestEnemyType;
	Team: ConquestTeamType;
	UnitGroup: long;
	PrevUnitGroup: long;
	BattleDuration: long;
	GroundId: long;
	StarGoal: [StarGoalType];
	StarGoalAmount: [int];
	GroupBuffId: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	ManageEchelonStageEnterCostType: ParcelType;
	ManageEchelonStageEnterCostId: long;
	ManageEchelonStageEnterCostAmount: int;
	EnterScenarioGroupId: long;
	ClearScenarioGroupId: long;
	ConquestRewardId: long;
	stageTopography: StageTopography;
	RecommandLevel: int;
	TacticRewardExp: long;
	FixedEchelonId: long;
	echelonExtensionType: EchelonExtensionType;
}

table ConstArenaExcelTable {
	DataList: [ConstArenaExcel];
}

table ConstArenaExcel {
	AttackCoolTime: long;
	BattleDuration: long;
	DefenseCoolTime: long;
	TSSStartCoolTime: long;
	EndAlarm: long;
	TimeRewardMaxAmount: long;
	EnterCostType: ParcelType;
	EnterCostId: long;
	TicketCost: long;
	DailyRewardResetTime: string;
	OpenScenarioId: string;
	CharacterSlotHideRank: [long];
	MapSlotHideRank: long;
	RelativeOpponentRankStart: [long];
	RelativeOpponentRankEnd: [long];
	ModifiedStatType: [StatType];
	StatMulFactor: [long];
	StatSumFactor: [long];
	NPCName: [string];
	NPCMainCharacterCount: long;
	NPCSupportCharacterCount: long;
	NPCCharacterSkillLevel: long;
	TimeSpanInDaysForBattleHistory: long;
	HiddenCharacterImagePath: string;
	DefenseVictoryRewardMaxCount: long;
	TopRankerCountLimit: long;
	AutoRefreshIntervalMilliSeconds: long;
	EchelonSettingIntervalMilliSeconds: long;
	SkipAllowedTimeMilliSeconds: long;
	ShowSeasonChangeInfoStartTime: string;
	ShowSeasonChangeInfoEndTime: string;
	ShowSeasonId: long;
}

table ConstAudioExcelTable {
	DataList: [ConstAudioExcel];
}

table ConstAudioExcel {
	DefaultSnapShotName: string;
	BattleSnapShotName: string;
	RaidSnapShotName: string;
	ExSkillCutInSnapShotName: string;
}

table ConstCombatExcelTable {
	DataList: [ConstCombatExcel];
}

table ConstCombatExcel {
	SkillHandCount: int;
	DyingTime: int;
	BuffIconBlinkTime: int;
	ShowBufficonEXSkill: bool;
	ShowBufficonPassiveSkill: bool;
	ShowBufficonExtraPassiveSkill: bool;
	ShowBufficonLeaderSkill: bool;
	ShowBufficonGroundPassiveSkill: bool;
	SuppliesConditionStringId: string;
	PublicSpeechBubbleOffsetX: float;
	PublicSpeechBubbleOffsetY: float;
	PublicSpeechBubbleOffsetZ: float;
	ShowRaidListCount: int;
	MaxRaidTicketCount: long;
	MaxRaidBossSkillSlot: long;
	EngageTimelinePath: string;
	EngageWithSupporterTimelinePath: string;
	VictoryTimelinePath: string;
	TimeLimitAlarm: long;
	EchelonMaxCommonCost: int;
	EchelonInitCommonCost: int;
	SkillSlotCoolTime: long;
	EnemyRegenCost: long;
	ChampionRegenCost: long;
	PlayerRegenCostDelay: long;
	CrowdControlFactor: long;
	RaidOpenScenarioId: string;
	EliminateRaidOpenScenarioId: string;
	DefenceConstA: long;
	DefenceConstB: long;
	DefenceConstC: long;
	DefenceConstD: long;
	AccuracyConstA: long;
	AccuracyConstB: long;
	AccuracyConstC: long;
	AccuracyConstD: long;
	CriticalConstA: long;
	CriticalConstB: long;
	CriticalConstC: long;
	CriticalConstD: long;
	MaxGroupBuffLevel: int;
	EmojiDefaultTime: int;
	TimeLineActionRotateSpeed: long;
	BodyRotateSpeed: long;
	NormalTimeScale: long;
	FastTimeScale: long;
	BulletTimeScale: long;
	UIDisplayDelayAfterSkillCutIn: long;
	UseInitialRangeForCoverMove: bool;
	SlowTimeScale: long;
	AimIKMinDegree: float;
	AimIKMaxDegree: float;
	MinimumClearTime: int;
	MinimumClearLevelGap: int;
	CheckCheaterMaxUseCostNonArena: int;
	CheckCheaterMaxUseCostArena: int;
	AllowedMaxTimeScale: long;
	RandomAnimationOutput: long;
	SummonedTeleportDistance: long;
	ArenaMinimumClearTime: int;
	WORLDBOSSBATTLELITTLE: long;
	WORLDBOSSBATTLEMIDDLE: long;
	WORLDBOSSBATTLEHIGH: long;
	WORLDBOSSBATTLEVERYHIGH: long;
	WorldRaidAutoSyncTermSecond: long;
	WorldRaidBossHpDecreaseTerm: long;
	WorldRaidBossParcelReactionDelay: long;
	RaidRankingJumpMinimumWaitingTime: long;
	EffectTeleportDistance: float;
	AuraExitThresholdMargin: long;
	TSAInteractionDamageFactor: long;
	VictoryInteractionRate: long;
	EchelonExtensionEngageTimelinePath: string;
	EchelonExtensionEngageWithSupporterTimelinePath: string;
	EchelonExtensionVictoryTimelinePath: string;
	EchelonExtensionEchelonMaxCommonCost: int;
	EchelonExtensionEchelonInitCommonCost: int;
	EchelonExtensionCostRegenRatio: long;
	CheckCheaterMaxUseCostMultiFloorRaid: int;
}

table ConstCommonExcelTable {
	DataList: [ConstCommonExcel];
}

table ConstCommonExcel {
	CampaignMainStageMaxRank: int;
	CampaignMainStageBestRecord: int;
	HardAdventurePlayCountRecoverDailyNumber: int;
	HardStageCount: int;
	TacticRankClearTime: int;
	BaseTimeScale: long;
	GachaPercentage: int;
	AcademyFavorZoneId: long;
	CafePresetSlotCount: int;
	CafeMonologueIntervalMillisec: long;
	CafeMonologueDefaultDuration: long;
	CafeBubbleIdleDurationMilliSec: long;
	FindGiftTimeLimit: int;
	CafeAutoChargePeriodInMsc: int;
	CafeProductionDecimalPosition: int;
	CafeSetGroupApplyCount: int;
	WeekDungeonFindGiftRewardLimitCount: int;
	StageFailedCurrencyRefundRate: int;
	EnterDeposit: int;
	AccountMaxLevel: int;
	MainSquadExpBonus: int;
	SupportSquadExpBonus: int;
	AccountExpRatio: int;
	MissionToastLifeTime: int;
	ExpItemInsertLimit: int;
	ExpItemInsertAccelTime: int;
	CharacterLvUpCoefficient: int;
	EquipmentLvUpCoefficient: int;
	ExpEquipInsertLimit: int;
	EquipLvUpCoefficient: int;
	NicknameLength: int;
	CraftDuration: [int];
	CraftLimitTime: int;
	ShiftingCraftDuration: [int];
	ShiftingCraftTicketConsumeAmount: int;
	ShiftingCraftSlotMaxCapacity: int;
	CraftTicketItemUniqueId: int;
	CraftTicketConsumeAmount: int;
	AcademyEnterCostType: ParcelType;
	AcademyEnterCostId: long;
	AcademyTicketCost: int;
	MassangerMessageExpireDay: int;
	CraftLeafNodeGenerateLv1Count: int;
	CraftLeafNodeGenerateLv2Count: int;
	TutorialGachaShopId: int;
	BeforehandGachaShopId: int;
	TutorialGachaGoodsId: int;
	EquipmentSlotOpenLevel: [int];
	ScenarioAutoDelayMillisec: float;
	JoinOrCreateClanCoolTimeFromHour: long;
	ClanMaxMember: long;
	ClanSearchResultCount: long;
	ClanMaxApplicant: long;
	ClanRejoinCoolTimeFromSecond: long;
	ClanWordBalloonMaxCharacter: int;
	CallNameRenameCoolTimeFromHour: long;
	CallNameMinimumLength: long;
	CallNameMaximumLength: long;
	LobbyToScreenModeWaitTime: long;
	ScreenshotToLobbyButtonHideDelay: long;
	PrologueScenarioID01: long;
	PrologueScenarioID02: long;
	TutorialHardStage11: long;
	TutorialSpeedButtonStage: long;
	TutorialCharacterDefaultCount: long;
	TutorialShopCategoryType: ShopCategoryType;
	AdventureStrategyPlayTimeLimitInSeconds: long;
	WeekDungoenTacticPlayTimeLimitInSeconds: long;
	RaidTacticPlayTimeLimitInSeconds: long;
	RaidOpponentListAmount: long;
	CraftBaseGoldRequired: [long];
	PostExpiredDayAttendance: int;
	PostExpiredDayInventoryOverflow: int;
	PostExpiredDayGameManager: int;
	UILabelCharacterWrap: string;
	RequestTimeOut: float;
	MailStorageSoftCap: int;
	MailStorageHardCap: int;
	ClearDeckStorageSize: int;
	ClearDeckNoStarViewCount: int;
	ClearDeck1StarViewCount: int;
	ClearDeck2StarViewCount: int;
	ClearDeck3StarViewCount: int;
	ExSkillLevelMax: int;
	PublicSkillLevelMax: int;
	PassiveSkillLevelMax: int;
	ExtraPassiveSkillLevelMax: int;
	AccountCommentMaxLength: int;
	CafeSummonCoolTimeFromHour: int;
	LimitedStageDailyClearCount: long;
	LimitedStageEntryTimeLimit: long;
	LimitedStageEntryTimeBuffer: long;
	LimitedStagePointAmount: long;
	LimitedStagePointPerApMin: long;
	LimitedStagePointPerApMax: long;
	AccountLinkReward: int;
	MonthlyProductCheckDays: int;
	WeaponLvUpCoefficient: int;
	ShowRaidMyListCount: int;
	MaxLevelExpMasterCoinRatio: int;
	RaidEnterCostType: ParcelType;
	RaidEnterCostId: long;
	RaidTicketCost: long;
	TimeAttackDungeonScenarioId: string;
	TimeAttackDungoenPlayCountPerTicket: int;
	TimeAttackDungeonEnterCostType: ParcelType;
	TimeAttackDungeonEnterCostId: long;
	TimeAttackDungeonEnterCost: long;
	ClanLeaderTransferLastLoginLimit: long;
	MonthlyProductRepurchasePopupLimit: int;
	CommonFavorItemTags: [Tag];
	MaxApMasterCoinPerWeek: long;
	CraftOpenExpTier1: long;
	CraftOpenExpTier2: long;
	CraftOpenExpTier3: long;
	CharacterEquipmentGearSlot: long;
	BirthDayDDay: int;
	RecommendedFriendsLvDifferenceLimit: int;
	DDosDetectCount: int;
	DDosCheckIntervalInSeconds: int;
	MaxFriendsCount: int;
	MaxFriendsRequest: int;
	FriendsSearchRequestCount: int;
	FriendsMaxApplicant: int;
	IdCardDefaultCharacterId: long;
	IdCardDefaultBgId: long;
	WorldRaidGemEnterCost: long;
	WorldRaidGemEnterAmout: long;
	FriendIdCardCommentMaxLength: long;
	FormationPresetNumberOfEchelonTab: int;
	FormationPresetNumberOfEchelon: int;
	FormationPresetRecentNumberOfEchelon: int;
	FormationPresetEchelonTabTextLength: int;
	FormationPresetEchelonSlotTextLength: int;
	CharProfileRowIntervalKr: int;
	CharProfileRowIntervalJp: int;
	CharProfilePopupRowIntervalKr: int;
	CharProfilePopupRowIntervalJp: int;
	BeforehandGachaCount: int;
	BeforehandGachaGroupId: int;
	RenewalDisplayOrderDay: int;
	EmblemDefaultId: long;
	BirthdayMailStartDate: string;
	BirthdayMailRemainDate: int;
	BirthdayMailParcelType: ParcelType;
	BirthdayMailParcelId: long;
	BirthdayMailParcelAmount: int;
	ClearDeckAverageDeckCount: int;
	ClearDeckWorldRaidSaveConditionCoefficient: int;
	ClearDeckShowCount: int;
	CharacterMaxLevel: int;
	PotentialBonusStatMaxLevelMaxHP: int;
	PotentialBonusStatMaxLevelAttackPower: int;
	PotentialBonusStatMaxLevelHealPower: int;
	PotentialOpenConditionCharacterLevel: int;
	AssistStrangerMinLevel: int;
	AssistStrangerMaxLevel: int;
	MaxBlockedUserCount: int;
}

table ConstConquestExcelTable {
	DataList: [ConstConquestExcel];
}

table ConstConquestExcel {
	ManageUnitChange: int;
	AssistCount: int;
	PlayTimeLimitInSeconds: int;
	AnimationUnitAmountMin: int;
	AnimationUnitAmountMax: int;
	AnimationUnitDelay: float;
}

table ConstEventCommonExcelTable {
	DataList: [ConstEventCommonExcel];
}

table ConstEventCommonExcel {
	EventContentHardStageCount: int;
	EventStrategyPlayTimeLimitInSeconds: long;
	SubEventChangeLimitSeconds: long;
	SubEventInstantClear: bool;
	CardShopProbWeightCount: long;
	CardShopProbWeightRarity: Rarity;
	MeetupScenarioReplayResource: string;
	MeetupScenarioReplayTitleLocalize: string;
	SpecialOperactionCollectionGroupId: long;
	TreasureNormalVariationAmount: int;
	TreasureLoopVariationAmount: int;
	TreasureLimitVariationLoopCount: int;
	TreasureLimitVariationClearLoopCount: int;
}

table ConstFieldExcelTable {
	DataList: [ConstFieldExcel];
}

table ConstFieldExcel {
	DialogSmoothTime: int;
	TalkDialogDurationDefault: int;
	ThinkDialogDurationDefault: int;
	IdleThinkDelayMin: int;
	IdleThinkDelayMax: int;
	ExclaimDurationDefault: int;
	QuestionDurationDefault: int;
	UpsetDurationDefault: int;
	SurpriseDurationDefault: int;
	BulbDurationDefault: int;
	HeartDurationDefault: int;
	SweatDurationDefault: int;
	AngryDurationDefault: int;
	MusicDurationDefault: int;
	DotDurationDefault: int;
	MomotalkDurationDefault: int;
	PhoneDurationDefault: int;
	KeywordDurationDefault: int;
	EvidenceDurationDefault: int;
}

table ConstMiniGameShootingExcelTable {
	DataList: [ConstMiniGameShootingExcel];
}

table ConstMiniGameShootingExcel {
	NormalStageId: long;
	NormalSectionCount: int;
	HardStageId: long;
	HardSectionCount: int;
	FreeStageId: long;
	FreeSectionCount: int;
	PlayerCharacterId: [long];
	HiddenPlayerCharacterId: long;
	CameraSmoothTime: float;
	SpawnEffectPath: string;
	WaitTimeAfterSpawn: float;
	FreeGearInterval: int;
}

table ConstMinigameTBGExcelTable {
	DataList: [ConstMinigameTBGExcel];
}

table ConstMinigameTBGExcel {
	ConquestMapBoundaryOffsetLeft: float;
	ConquestMapBoundaryOffsetRight: float;
	ConquestMapBoundaryOffsetTop: float;
	ConquestMapBoundaryOffsetBottom: float;
	ConquestMapCenterOffsetX: float;
	ConquestMapCenterOffsetY: float;
	CameraAngle: float;
	CameraZoomMax: float;
	CameraZoomMin: float;
	CameraZoomDefault: float;
	ThemaLoadingProgressTime: float;
	MapAllyRotation: float;
	AniAllyBattleAttack: string;
	EffectAllyBattleAttack: string;
	EffectAllyBattleDamage: string;
	AniEnemyBattleAttack: string;
	EffectEnemyBattleAttack: string;
	EffectEnemyBattleDamage: string;
	EncounterAllyRotation: float;
	EncounterEnemyRotation: float;
	EncounterRewardReceiveIndex: int;
}

table ConstNewbieContentExcelTable {
	DataList: [ConstNewbieContentExcel];
}

table ConstNewbieContentExcel {
	NewbieGachaReleaseDate: string;
	NewbieGachaCheckDays: int;
	NewbieGachaTokenGraceTime: int;
	NewbieAttendanceReleaseDate: string;
	NewbieAttendanceStartableEndDay: int;
	NewbieAttendanceEndDay: int;
}

table ConstStrategyExcelTable {
	DataList: [ConstStrategyExcel];
}

table ConstStrategyExcel {
	HexaMapBoundaryOffset: float;
	HexaMapStartCameraOffset: float;
	CameraZoomMax: float;
	CameraZoomMin: float;
	CameraZoomDefault: float;
	HealCostType: CurrencyTypes;
	HealCostAmount: [long];
	CanHealHpRate: int;
	PlayTimeLimitInSeconds: long;
	AdventureEchelonCount: int;
	RaidEchelonCount: int;
	DefaultEchelonCount: int;
	EventContentEchelonCount: int;
	TimeAttackDungeonEchelonCount: int;
	WorldRaidEchelonCount: int;
	TacticSkipClearTimeSeconds: int;
	TacticSkipFramePerSecond: int;
	ConquestEchelonCount: int;
	StoryEchelonCount: int;
	MultiSweepPresetCount: int;
	MultiSweepPresetNameMaxLength: int;
	MultiSweepPresetSelectStageMaxCount: int;
	MultiSweepPresetMaxSweepCount: int;
	MultiSweepPresetSelectParcelMaxCount: int;
}

table ContentEnterCostReduceExcelTable {
	DataList: [ContentEnterCostReduceExcel];
}

table ContentEnterCostReduceExcel {
	EnterCostReduceGroupId: long;
	contentType: ContentType;
	StageId: long;
	ReduceEnterCostType: ParcelType;
	ReduceEnterCostId: long;
	ReduceAmount: long;
}

table ContentsFeverExcelTable {
	DataList: [ContentsFeverExcel];
}

table ContentsFeverExcel {
	ConditionContent: FeverBattleType;
	SkillFeverCheckCondition: SkillPriorityCheckTarget;
	SkillCostFever: long;
	FeverStartTime: long;
	FeverDurationTime: long;
}

table ContentSpoilerPopupExcelTable {
	DataList: [ContentSpoilerPopupExcel];
}

table ContentSpoilerPopupExcel {
	contentType: ContentType;
	SpoilerPopupTitle: string;
	SpoilerPopupDescription: string;
	IsWarningPopUp: bool;
	ConditionScenarioModeId: long;
}

table CostumeExcelTable {
	DataList: [CostumeExcel];
}

table CostumeExcel {
	CostumeGroupId: long;
	CostumeUniqueId: long;
	DevName: string;
	productionStep: ProductionStep;
	IsDefault: bool;
	CollectionVisible: bool;
	ReleaseDate: string;
	CollectionVisibleStartDate: string;
	CollectionVisibleEndDate: string;
	rarity: Rarity;
	CharacterSkillListGroupId: long;
	SpineResourceName: string;
	SpineResourceNameDiorama: string;
	SpineResourceNameDioramaForFormConversion: [string];
	entityMaterialType: EntityMaterialType;
	ModelPrefabName: string;
	CafeModelPrefabName: string;
	EchelonModelPrefabName: string;
	StrategyModelPrefabName: string;
	TextureDir: string;
	CollectionTexturePath: string;
	CollectionBGTexturePath: string;
	CombatStyleTexturePath: string;
	UseObjectHPBAR: bool;
	TextureBoss: string;
	TextureSkillCard: [string];
	InformationPacel: string;
	AnimationSSR: string;
	EnterStrategyAnimationName: string;
	AnimationValidator: bool;
	CharacterVoiceGroupId: long;
}

table CouponStuffExcelTable {
	DataList: [CouponStuffExcel];
}

table CouponStuffExcel {
	StuffId: long;
	parcelType: ParcelType;
	ParcelId: long;
	LimitAmount: int;
	CouponStuffNameLocalizeKey: string;
}

table CurrencyExcelTable {
	DataList: [CurrencyExcel];
}

table CurrencyExcel {
	ID: long;
	LocalizeEtcId: uint;
	CurrencyType: CurrencyTypes;
	CurrencyName: string;
	Icon: string;
	rarity: Rarity;
	AutoChargeMsc: int;
	AutoChargeAmount: int;
	currencyOverChargeType: CurrencyOverChargeType;
	currencyAdditionalChargeType: CurrencyAdditionalChargeType;
	ChargeLimit: long;
	OverChargeLimit: long;
	SpriteName: string;
	dailyRefillType: DailyRefillType;
	DailyRefillAmount: long;
	DailyRefillTime: [long];
}

table DefaultCharacterExcelTable {
	DataList: [DefaultCharacterExcel];
}

table DefaultCharacterExcel {
	CharacterId: long;
	FavoriteCharacter: bool;
	Level: int;
	Exp: int;
	FavorExp: int;
	FavorRank: int;
	StarGrade: int;
	ExSkillLevel: int;
	PassiveSkillLevel: int;
	ExtraPassiveSkillLevel: int;
	CommonSkillLevel: int;
	LeaderSkillLevel: int;
}

table DefaultEchelonExcelTable {
	DataList: [DefaultEchelonExcel];
}

table DefaultEchelonExcel {
	EchlonId: int;
	LeaderId: long;
	MainId: [long];
	SupportId: [long];
	TssId: long;
}

table DefaultFurnitureExcelTable {
	DataList: [DefaultFurnitureExcel];
}

table DefaultFurnitureExcel {
	Id: long;
	Location: FurnitureLocation;
	PositionX: float;
	PositionY: float;
	Rotation: float;
}

table DefaultMailExcelTable {
	DataList: [DefaultMailExcel];
}

table DefaultMailExcel {
	Id: long;
	LocalizeCodeId: uint;
	mailType: MailType;
	MailSendPeriodFrom: string;
	MailSendPeriodTo: string;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table DefaultParcelExcelTable {
	DataList: [DefaultParcelExcel];
}

table DefaultParcelExcel {
	parcelType: ParcelType;
	ParcelId: long;
	ParcelAmount: long;
}

table DuplicateBonusExcelTable {
	DataList: [DuplicateBonusExcel];
}

table DuplicateBonusExcel {
	Id: long;
	itemCategory: ItemCategory;
	ItemId: long;
	CharacterId: long;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
}

table EchelonConstraintExcelTable {
	DataList: [EchelonConstraintExcel];
}

table EchelonConstraintExcel {
	GroupId: long;
	IsWhiteList: bool;
	CharacterId: [long];
	PersonalityId: [long];
	weaponType: WeaponType;
	school: School;
	club: Club;
	Role: TacticRole;
}

table EliminateRaidRankingRewardExcelTable {
	DataList: [EliminateRaidRankingRewardExcel];
}

table EliminateRaidRankingRewardExcel {
	RankingRewardGroupId: long;
	Id: long;
	RankStart: long;
	RankEnd: long;
	PercentRankStart: long;
	PercentRankEnd: long;
	Tier: int;
	RewardParcelType: [ParcelType];
	RewardParcelUniqueId: [long];
	RewardParcelUniqueName: [string];
	RewardParcelAmount: [long];
}

table EliminateRaidSeasonManageExcelTable {
	DataList: [EliminateRaidSeasonManageExcel];
}

table EliminateRaidSeasonManageExcel {
	SeasonId: long;
	SeasonDisplay: long;
	SeasonStartData: string;
	SeasonEndData: string;
	SettlementEndDate: string;
	LobbyTableBGPath: string;
	LobbyScreenBGPath: string;
	OpenRaidBossGroup01: string;
	OpenRaidBossGroup02: string;
	OpenRaidBossGroup03: string;
	RankingRewardGroupId: long;
	MaxSeasonRewardGauage: int;
	StackedSeasonRewardGauge: [long];
	SeasonRewardId: [long];
	LimitedRewardIdNormal: long;
	LimitedRewardIdHard: long;
	LimitedRewardIdVeryhard: long;
	LimitedRewardIdHardcore: long;
	LimitedRewardIdExtreme: long;
	LimitedRewardIdInsane: long;
	LimitedRewardIdTorment: long;
}

table EliminateRaidStageExcelTable {
	DataList: [EliminateRaidStageExcel];
}

table EliminateRaidStageExcel {
	Id: long;
	UseBossIndex: bool;
	UseBossAIPhaseSync: bool;
	RaidBossGroup: string;
	RaidEnterCostType: ParcelType;
	RaidEnterCostId: long;
	RaidEnterCostAmount: int;
	BossSpinePath: string;
	PortraitPath: string;
	BGPath: string;
	RaidCharacterId: long;
	BossCharacterId: [long];
	difficulty: Difficulty;
	IsOpen: bool;
	MaxPlayerCount: long;
	RaidRoomLifeTime: int;
	BattleDuration: long;
	GroundId: long;
	GroundDevName: string;
	EnterTimeLine: string;
	tacticEnvironment: TacticEnvironment;
	DefaultClearScore: long;
	MaximumScore: long;
	PerSecondMinusScore: long;
	HPPercentScore: long;
	MinimumAcquisitionScore: long;
	MaximumAcquisitionScore: long;
	RaidRewardGroupId: long;
	BattleReadyTimelinePath: [string];
	BattleReadyTimelinePhaseStart: [int];
	BattleReadyTimelinePhaseEnd: [int];
	VictoryTimelinePath: string;
	PhaseChangeTimelinePath: string;
	TimeLinePhase: long;
	EnterScenarioKey: uint;
	ClearScenarioKey: uint;
	ShowSkillCard: bool;
	BossBGInfoKey: uint;
	echelonExtensionType: EchelonExtensionType;
}

table EliminateRaidStageLimitedRewardExcelTable {
	DataList: [EliminateRaidStageLimitedRewardExcel];
}

table EliminateRaidStageLimitedRewardExcel {
	LimitedRewardId: long;
	LimitedRewardParcelType: [ParcelType];
	LimitedRewardParcelUniqueId: [long];
	LimitedRewardAmount: [long];
}

table EliminateRaidStageRewardExcelTable {
	DataList: [EliminateRaidStageRewardExcel];
}

table EliminateRaidStageRewardExcel {
	GroupId: long;
	IsClearStageRewardHideInfo: bool;
	ClearStageRewardProb: long;
	ClearStageRewardParcelType: ParcelType;
	ClearStageRewardParcelUniqueID: long;
	ClearStageRewardParcelUniqueName: string;
	ClearStageRewardAmount: long;
}

table EliminateRaidStageSeasonRewardExcelTable {
	DataList: [EliminateRaidStageSeasonRewardExcel];
}

table EliminateRaidStageSeasonRewardExcel {
	SeasonRewardId: long;
	SeasonRewardParcelType: [ParcelType];
	SeasonRewardParcelUniqueId: [long];
	SeasonRewardParcelUniqueName: [string];
	SeasonRewardAmount: [long];
}

table EmblemExcelTable {
	DataList: [EmblemExcel];
}

table EmblemExcel {
	Id: long;
	Category: EmblemCategory;
	rarity: Rarity;
	DisplayOrder: long;
	LocalizeEtcId: uint;
	LocalizeCodeId: uint;
	UseAtLocalizeId: long;
	EmblemTextVisible: bool;
	IconPath: string;
	EmblemIconPath: string;
	EmblemIconNumControl: int;
	EmblemIconBGPath: string;
	EmblemBGPathJp: string;
	EmblemBGPathKr: string;
	DisplayType: EmblemDisplayType;
	DisplayStartDate: string;
	DisplayEndDate: string;
	DislpayFavorLevel: int;
	CheckPassType: EmblemCheckPassType;
	EmblemParameter: long;
	CheckPassCount: long;
}

table EmoticonSpecialExcelTable {
	DataList: [EmoticonSpecialExcel];
}

table EmoticonSpecialExcel {
	UniqueId: long;
	CharacterUniqueId: long;
	Random: string;
}

table EquipmentExcelTable {
	DataList: [EquipmentExcel];
}

table EquipmentExcel {
	Id: long;
	equipmentCategory: EquipmentCategory;
	rarity: Rarity;
	LocalizeEtcId: uint;
	Wear: bool;
	MaxLevel: int;
	RecipeId: int;
	TierInit: long;
	NextTierEquipment: long;
	StackableMax: int;
	Icon: string;
	ImageName: string;
	Tags: [Tag];
	CraftQualityTier0: long;
	CraftQualityTier1: long;
	CraftQualityTier2: long;
	ShiftingCraftQuality: long;
	ShopCategory: [ShopCategoryType];
	ShortcutTypeId: long;
}

table EquipmentLevelExcelTable {
	DataList: [EquipmentLevelExcel];
}

table EquipmentLevelExcel {
	Level: int;
	TierLevelExp: [long];
	TotalExp: [long];
}

table EquipmentStatExcelTable {
	DataList: [EquipmentStatExcel];
}

table EquipmentStatExcel {
	EquipmentId: long;
	statLevelUpType: StatLevelUpType;
	StatType: [EquipmentOptionType];
	MinStat: [long];
	MaxStat: [long];
	LevelUpInsertLimit: int;
	LevelUpFeedExp: long;
	LevelUpFeedCostCurrency: CurrencyTypes;
	LevelUpFeedCostAmount: long;
	equipmentCategory: EquipmentCategory;
	LevelUpFeedAddExp: long;
	DefaultMaxLevel: int;
	TranscendenceMax: int;
	DamageFactorGroupId: string;
}

table EventContentArchiveBannerOffsetExcelTable {
	DataList: [EventContentArchiveBannerOffsetExcel];
}

table EventContentArchiveBannerOffsetExcel {
	EventContentId: long;
	OffsetX: float;
	OffsetY: float;
	ScaleX: float;
	ScaleY: float;
}

table EventContentBoxGachaElementExcelTable {
	DataList: [EventContentBoxGachaElementExcel];
}

table EventContentBoxGachaElementExcel {
	EventContentId: long;
	Id: long;
	Round: long;
	GroupId: long;
}

table EventContentBoxGachaManageExcelTable {
	DataList: [EventContentBoxGachaManageExcel];
}

table EventContentBoxGachaManageExcel {
	EventContentId: long;
	Round: long;
	GoodsId: long;
	IsLoop: bool;
}

table EventContentBoxGachaShopExcelTable {
	DataList: [EventContentBoxGachaShopExcel];
}

table EventContentBoxGachaShopExcel {
	EventContentId: long;
	GroupId: long;
	GroupElementAmount: long;
	Round: long;
	IsLegacy: bool;
	IsPrize: bool;
	GoodsId: [long];
	DisplayOrder: long;
}

table EventContentBuffExcelTable {
	DataList: [EventContentBuffExcel];
}

table EventContentBuffExcel {
	EventContentBuffId: long;
	IsBuff: bool;
	CharacterTag: Tag;
	EnumType: EventContentBuffFindRule;
	EnumTypeValue: [string];
	SkillGroupId: string;
	IconPath: string;
	SpriteName: string;
	BuffDescriptionLocalizeCodeId: string;
}

table EventContentBuffGroupExcelTable {
	DataList: [EventContentBuffGroupExcel];
}

table EventContentBuffGroupExcel {
	EventContentId: long;
	BuffContentId: long;
	BuffGroupId: long;
	BuffGroupNameLocalizeCodeId: string;
	EventContentBuffId1: long;
	BuffNameLocalizeCodeId1: string;
	BuffDescriptionIconPath1: string;
	EventContentBuffId2: long;
	BuffNameLocalizeCodeId2: string;
	BuffDescriptionIconPath2: string;
	EventContentDebuffId: long;
	DebuffNameLocalizeCodeId: string;
	DeBuffDescriptionIconPath: string;
	BuffGroupProb: long;
}

table EventContentCardExcelTable {
	DataList: [EventContentCardExcel];
}

table EventContentCardExcel {
	CardGroupId: int;
	EventContentId: long;
	LocalizeEtcId: uint;
	IconPath: string;
	BackIconPath: string;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
}

table EventContentCardShopExcelTable {
	DataList: [EventContentCardShopExcel];
}

table EventContentCardShopExcel {
	EventContentId: long;
	Id: long;
	rarity: Rarity;
	CostGoodsId: long;
	CardGroupId: int;
	IsLegacy: bool;
	RefreshGroup: int;
	Prob: int;
	ProbWeight1: int;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentChangeExcelTable {
	DataList: [EventContentChangeExcel];
}

table EventContentChangeExcel {
	EventContentId: long;
	ChangeCount: long;
	IsLast: bool;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	ChangeCostType: ParcelType;
	ChangeCostId: long;
	ChangeCostAmount: int;
}

table EventContentChangeScenarioExcelTable {
	DataList: [EventContentChangeScenarioExcel];
}

table EventContentChangeScenarioExcel {
	EventContentId: long;
	ChangeType: EventChangeType;
	ChangeCount: long;
	ScenarioGroupId: long;
}

table EventContentCharacterBonusExcelTable {
	DataList: [EventContentCharacterBonusExcel];
}

table EventContentCharacterBonusExcel {
	EventContentId: long;
	CharacterId: long;
	EventContentItemType: [EventContentItemType];
	BonusPercentage: [long];
}

table EventContentCollectionExcelTable {
	DataList: [EventContentCollectionExcel];
}

table EventContentCollectionExcel {
	Id: long;
	EventContentId: long;
	GroupId: long;
	UnlockConditionType: CollectionUnlockType;
	UnlockConditionParameter: [long];
	multipleConditionCheckType: MultipleConditionCheckType;
	UnlockConditionCount: long;
	IsObject: bool;
	IsHorizon: bool;
	EmblemResource: string;
	ThumbResource: string;
	FullResource: string;
	LocalizeEtcId: uint;
	SubNameLocalizeCodeId: string;
}

table EventContentCurrencyItemExcelTable {
	DataList: [EventContentCurrencyItemExcel];
}

table EventContentCurrencyItemExcel {
	EventContentId: long;
	eventContentItemType: EventContentItemType;
	ItemUniqueId: long;
}

table EventContentDebuffRewardExcelTable {
	DataList: [EventContentDebuffRewardExcel];
}

table EventContentDebuffRewardExcel {
	EventContentId: long;
	EventStageId: long;
	eventContentItemType: EventContentItemType;
	RewardPercentage: long;
}

table EventContentDiceRaceEffectExcelTable {
	DataList: [EventContentDiceRaceEffectExcel];
}

table EventContentDiceRaceEffectExcel {
	EventContentId: long;
	eventContentDiceRaceResultType: EventContentDiceRaceResultType;
	IsDiceResult: bool;
	AniClip: string;
	VoiceId: [uint];
}

table EventContentDiceRaceExcelTable {
	DataList: [EventContentDiceRaceExcel];
}

table EventContentDiceRaceExcel {
	EventContentId: long;
	DiceCostGoodsId: long;
	SkipableLap: int;
	DiceRacePawnPrefab: string;
	IsUsingFixedDice: bool;
	DiceRaceEventType: [string];
}

table EventContentDiceRaceNodeExcelTable {
	DataList: [EventContentDiceRaceNodeExcel];
}

table EventContentDiceRaceNodeExcel {
	EventContentId: long;
	NodeId: long;
	eventContentDiceRaceNodeType: EventContentDiceRaceNodeType;
	MoveForwardTypeArg: int;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table EventContentDiceRaceProbExcelTable {
	DataList: [EventContentDiceRaceProbExcel];
}

table EventContentDiceRaceProbExcel {
	EventContentId: long;
	eventContentDiceRaceResultType: EventContentDiceRaceResultType;
	CostItemId: long;
	CostItemAmount: int;
	DiceResult: int;
	Prob: int;
}

table EventContentDiceRaceTotalRewardExcelTable {
	DataList: [EventContentDiceRaceTotalRewardExcel];
}

table EventContentDiceRaceTotalRewardExcel {
	EventContentId: long;
	RewardID: long;
	RequiredLapFinishCount: int;
	DisplayLapFinishCount: int;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentExcelTable {
	DataList: [EventContentExcel];
}

table EventContentExcel {
	Id: long;
	DevName: string;
	EventContentId: long;
	BgImagePath: string;
}

table EventContentFortuneGachaExcelTable {
	DataList: [EventContentFortuneGachaExcel];
}

table EventContentFortuneGachaExcel {
	FortuneGachaGroupId: int;
	LocalizeEtcId: uint;
	IconPath: string;
}

table EventContentFortuneGachaModifyExcelTable {
	DataList: [EventContentFortuneGachaModifyExcel];
}

table EventContentFortuneGachaModifyExcel {
	EventContentId: int;
	TargetGrade: int;
	ProbModifyStartCount: int;
	UsePrefabName: string;
	BucketImagePath: string;
	ShopBgImagePath: string;
	TitleLocalizeKey: string;
}

table EventContentFortuneGachaShopExcelTable {
	DataList: [EventContentFortuneGachaShopExcel];
}

table EventContentFortuneGachaShopExcel {
	EventContentId: long;
	Id: long;
	Grade: int;
	CostGoodsId: long;
	IsLegacy: bool;
	FortuneGachaGroupId: int;
	Prob: int;
	ProbModifyValue: int;
	ProbModifyLimit: int;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentLobbyMenuExcelTable {
	DataList: [EventContentLobbyMenuExcel];
}

table EventContentLobbyMenuExcel {
	EventContentId: long;
	eventContentType: EventContentType;
	IconSpriteName: string;
	ButtonText: string;
	DisplayOrder: int;
	IconOffsetX: float;
	IconOffsetY: float;
	ReddotSpriteName: string;
}

table EventContentLocationExcelTable {
	DataList: [EventContentLocationExcel];
}

table EventContentLocationExcel {
	EventContentId: long;
	Id: long;
	LocalizeEtcId: uint;
	PrefabPath: string;
	LocationResetScheduleCount: int;
	ScheduleEventPointCostParcelType: ParcelType;
	ScheduleEventPointCostParcelId: long;
	ScheduleEventPointCostParcelAmount: long;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	InformationGroupId: long;
}

table EventContentLocationRewardExcelTable {
	DataList: [EventContentLocationRewardExcel];
}

table EventContentLocationRewardExcel {
	Location: string;
	ScheduleGroupId: long;
	OrderInGroup: long;
	Id: long;
	ProgressTexture: string;
	VoiceId: [uint];
	LocalizeEtcId: uint;
	LocationRank: long;
	FavorExp: long;
	SecretStoneAmount: long;
	SecretStoneProb: long;
	ExtraFavorExp: long;
	ExtraFavorExpProb: long;
	ExtraRewardParcelType: [ParcelType];
	ExtraRewardParcelId: [long];
	ExtraRewardAmount: [long];
	ExtraRewardProb: [long];
	IsExtraRewardDisplayed: [bool];
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table EventContentMeetupExcelTable {
	DataList: [EventContentMeetupExcel];
}

table EventContentMeetupExcel {
	Id: long;
	EventContentId: long;
	CharacterId: long;
	ConditionScenarioGroupId: long;
	ConditionType: MeetupConditionType;
	ConditionParameter: [long];
	ConditionPrintType: MeetupConditionPrintType;
}

table EventContentMiniEventShortCutExcelTable {
	DataList: [EventContentMiniEventShortCutExcel];
}

table EventContentMiniEventShortCutExcel {
	Id: int;
	LocalizeEtcId: uint;
	ShorcutContentType: EventTargetType;
}

table EventContentMiniEventTokenExcelTable {
	DataList: [EventContentMiniEventTokenExcel];
}

table EventContentMiniEventTokenExcel {
	EventContentId: long;
	ItemUniqueId: long;
	MaximumAmount: long;
}

table EventContentMissionExcelTable {
	DataList: [EventContentMissionExcel];
}

table EventContentMissionExcel {
	Id: long;
	EventContentId: long;
	GroupId: long;
	GroupName: string;
	Category: MissionCategory;
	Description: uint;
	ResetType: MissionResetType;
	ToastDisplayType: MissionToastDisplayConditionType;
	ToastImagePath: string;
	ViewFlag: bool;
	DisplayOrder: long;
	PreMissionId: [long];
	AccountType: AccountState;
	AccountLevel: long;
	ShortcutUI: [string];
	ChallengeStageShortcut: long;
	CompleteConditionType: MissionCompleteConditionType;
	IsCompleteExtensionTime: bool;
	CompleteConditionCount: long;
	CompleteConditionParameter: [long];
	CompleteConditionParameterTag: [Tag];
	RewardIcon: string;
	CompleteConditionMissionId: [long];
	CompleteConditionMissionCount: long;
	MissionRewardParcelType: [ParcelType];
	MissionRewardParcelId: [long];
	MissionRewardAmount: [int];
	ConditionRewardParcelType: [ParcelType];
	ConditionRewardParcelId: [long];
	ConditionRewardAmount: [int];
}

table EventContentPlayGuideExcelTable {
	DataList: [EventContentPlayGuideExcel];
}

table EventContentPlayGuideExcel {
	Id: long;
	EventContentId: long;
	DisplayOrder: int;
	GuideTitle: string;
	GuideImagePath: string;
	GuideText: string;
}

table EventContentScenarioExcelTable {
	DataList: [EventContentScenarioExcel];
}

table EventContentScenarioExcel {
	Id: long;
	EventContentId: long;
	ReplayDisplayGroup: int;
	Order: long;
	RecollectionNumber: long;
	IsRecollection: bool;
	IsMeetup: bool;
	IsOmnibus: bool;
	ScenarioGroupId: [long];
	ScenarioConditionType: EventContentScenarioConditionType;
	ConditionAmount: long;
	ConditionEventContentId: long;
	ClearedScenarioGroupId: long;
	RecollectionSummaryLocalizeScenarioId: uint;
	RecollectionResource: string;
	IsRecollectionHorizon: bool;
	CostParcelType: ParcelType;
	CostId: long;
	CostAmount: int;
	RewardParcelType: [ParcelType];
	RewardId: [long];
	RewardAmount: [int];
}

table EventContentSeasonExcelTable {
	DataList: [EventContentSeasonExcel];
}

table EventContentSeasonExcel {
	EventContentId: long;
	OriginalEventContentId: long;
	IsReturn: bool;
	Name: string;
	eventContentType: EventContentType;
	openConditionContent: OpenConditionContent;
	EventDisplay: bool;
	IconOrder: int;
	subEventType: SubEventType;
	SubEvent: bool;
	EventItemId: long;
	MainEventId: long;
	EventChangeOpenCondition: long;
	BeforehandExposedTime: string;
	EventContentOpenTime: string;
	EventContentCloseTime: string;
	ExtensionTime: string;
	MainIconParcelPath: string;
	SubIconParcelPath: string;
	BeforehandBgImagePath: string;
	MinigamePrologScenarioGroupId: long;
	BeforehandScenarioGroupId: [long];
	MainBannerImagePath: string;
	MainBgImagePath: string;
	ShiftTriggerStageId: long;
	ShiftMainBgImagePath: string;
	MinigameLobbyPrefabName: string;
	MinigameVictoryPrefabName: string;
	MinigameMissionBgPrefabName: string;
	MinigameMissionBgImagePath: string;
	CardBgImagePath: string;
	EventAssist: bool;
	eventContentReleaseType: EventContentReleaseType;
	EventContentStageRewardIdPermanent: long;
	RewardTagPermanent: RewardTag;
	MiniEventShortCutScenarioModeId: long;
}

table EventContentShopExcelTable {
	DataList: [EventContentShopExcel];
}

table EventContentShopExcel {
	EventContentId: long;
	Id: long;
	LocalizeEtcId: uint;
	CategoryType: ShopCategoryType;
	IsLegacy: bool;
	GoodsId: [long];
	DisplayOrder: long;
	SalePeriodFrom: string;
	SalePeriodTo: string;
	PurchaseCooltimeMin: long;
	PurchaseCountLimit: long;
	purchaseCountResetType: PurchaseCountResetType;
	BuyReportEventName: string;
	RestrictBuyWhenInventoryFull: bool;
}

table EventContentShopInfoExcelTable {
	DataList: [EventContentShopInfoExcel];
}

table EventContentShopInfoExcel {
	EventContentId: long;
	CategoryType: ShopCategoryType;
	LocalizeCode: uint;
	CostParcelType: [ParcelType];
	CostParcelId: [long];
	IsRefresh: bool;
	IsSoldOutDimmed: bool;
	AutoRefreshCoolTime: long;
	RefreshAbleCount: long;
	GoodsId: [long];
	OpenPeriodFrom: string;
	OpenPeriodTo: string;
	ShopProductUpdateDate: string;
}

table EventContentShopRefreshExcelTable {
	DataList: [EventContentShopRefreshExcel];
}

table EventContentShopRefreshExcel {
	EventContentId: long;
	Id: long;
	LocalizeEtcId: uint;
	IsLegacy: bool;
	GoodsId: long;
	DisplayOrder: long;
	CategoryType: ShopCategoryType;
	RefreshGroup: int;
	Prob: int;
	BuyReportEventName: string;
}

table EventContentSpecialOperationsExcelTable {
	DataList: [EventContentSpecialOperationsExcel];
}

table EventContentSpecialOperationsExcel {
	EventContentId: long;
	PointItemId: long;
}

table EventContentSpineDialogOffsetExcelTable {
	DataList: [EventContentSpineDialogOffsetExcel];
}

table EventContentSpineDialogOffsetExcel {
	EventContentId: long;
	eventContentType: EventContentType;
	CostumeUniqueId: long;
	SpineOffsetX: float;
	SpineOffsetY: float;
	DialogOffsetX: float;
	DialogOffsetY: float;
}

table EventContentSpoilerPopupExcelTable {
	DataList: [EventContentSpoilerPopupExcel];
}

table EventContentSpoilerPopupExcel {
	EventContentId: long;
	SpoilerPopupTitle: string;
	SpoilerPopupDescription: string;
	IsWarningPopUp: bool;
	ConditionScenarioModeId: long;
}

table EventContentStageExcelTable {
	DataList: [EventContentStageExcel];
}

table EventContentStageExcel {
	Id: long;
	Name: string;
	EventContentId: long;
	stageDifficulty: StageDifficulty;
	StageNumber: string;
	StageDisplay: int;
	PrevStageId: long;
	OpenDate: long;
	OpenEventPoint: long;
	OpenConditionScenarioPermanentSubEventId: long;
	PrevStageSubEventId: long;
	OpenConditionScenarioId: long;
	OpenConditionContentType: EventContentType;
	OpenConditionContentId: long;
	BattleDuration: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	StageEnterEchelonCount: int;
	StarConditionTacticRankSCount: long;
	StarConditionTurnCount: long;
	EnterScenarioGroupId: [long];
	ClearScenarioGroupId: [long];
	StrategyMap: string;
	StrategyMapBG: string;
	EventContentStageRewardId: long;
	MaxTurn: int;
	stageTopography: StageTopography;
	RecommandLevel: int;
	BgmId: string;
	strategyEnvironment: StrategyEnvironment;
	GroundID: long;
	contentType: ContentType;
	BGMId: long;
	InstantClear: bool;
	BuffContentId: long;
	FixedEchelonId: long;
	ChallengeDisplay: bool;
	StarGoal: [StarGoalType];
	StarGoalAmount: [int];
	IsDefeatBattle: bool;
	StageHint: uint;
	echelonExtensionType: EchelonExtensionType;
}

table EventContentStageRewardExcelTable {
	DataList: [EventContentStageRewardExcel];
}

table EventContentStageRewardExcel {
	GroupId: long;
	rewardTag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	IsDisplayed: bool;
}

table EventContentStageTotalRewardExcelTable {
	DataList: [EventContentStageTotalRewardExcel];
}

table EventContentStageTotalRewardExcel {
	Id: long;
	EventContentId: long;
	RequiredEventItemAmount: long;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentZoneExcelTable {
	DataList: [EventContentZoneExcel];
}

table EventContentZoneExcel {
	Id: long;
	OriginalZoneId: long;
	LocationId: long;
	LocationRank: long;
	EventPointForLocationRank: long;
	LocalizeEtcId: uint;
	StudentVisitProb: [long];
	RewardGroupId: long;
	Tags: [Tag];
	WhiteListTags: [Tag];
}

table EventContentZoneVisitRewardExcelTable {
	DataList: [EventContentZoneVisitRewardExcel];
}

table EventContentZoneVisitRewardExcel {
	EventContentId: long;
	EventContentLocationId: long;
	DevName: string;
	CharacterId: long;
	CharacterDevName: string;
	VisitRewardParcelType: [ParcelType];
	VisitRewardParcelId: [long];
	VisitRewardAmount: [long];
	VisitRewardProb: [long];
}

table FarmingDungeonLocationManageExcelTable {
	DataList: [FarmingDungeonLocationManageExcel];
}

table FarmingDungeonLocationManageExcel {
	FarmingDungeonLocationId: long;
	contentType: ContentType;
	weekDungeonType: WeekDungeonType;
	schoolDungeonType: SchoolDungeonType;
	Order: long;
	OpenStartDateTime: string;
	OpenEndDateTime: string;
	LocationButtonImagePath: string;
	LocalizeCodeTitle: uint;
	LocalizeCodeInfo: uint;
}

table FavorLevelExcelTable {
	DataList: [FavorLevelExcel];
}

table FavorLevelExcel {
	Level: long;
	ExpType: [long];
}

table FavorLevelRewardExcelTable {
	DataList: [FavorLevelRewardExcel];
}

table FavorLevelRewardExcel {
	CharacterId: long;
	FavorLevel: long;
	StatType: [EquipmentOptionType];
	StatValue: [long];
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardAmount: [long];
}

table FieldContentStageExcelTable {
	DataList: [FieldContentStageExcel];
}

table FieldContentStageExcel {
	Id: long;
	SeasonId: long;
	AreaId: long;
	GroupId: long;
	stageDifficulty: StageDifficulty;
	Name: string;
	BattleDuration: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	stageTopography: StageTopography;
	RecommandLevel: int;
	GroundID: long;
	BGMId: long;
	InstantClear: bool;
	FixedEchelonId: long;
	SkipFormationSettings: bool;
}

table FieldContentStageRewardExcelTable {
	DataList: [FieldContentStageRewardExcel];
}

table FieldContentStageRewardExcel {
	GroupId: long;
	rewardTag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	IsDisplayed: bool;
}

table FieldDateExcelTable {
	DataList: [FieldDateExcel];
}

table FieldDateExcel {
	UniqueId: long;
	SeasonId: long;
	OpenDate: long;
	DateLocalizeKey: string;
	EntrySceneId: long;
	StartConditionType: FieldConditionType;
	StartConditionId: long;
	EndConditionType: FieldConditionType;
	EndConditionId: long;
	OpenConditionStage: long;
	DateResultSpinePath: string;
	DateResultSpineOffsetX: float;
}

table FieldEvidenceExcelTable {
	DataList: [FieldEvidenceExcel];
}

table FieldEvidenceExcel {
	UniqueId: long;
	NameLocalizeKey: string;
	DescriptionLocalizeKey: string;
	DetailLocalizeKey: string;
	ImagePath: string;
}

table FieldInteractionExcelTable {
	DataList: [FieldInteractionExcel];
}

table FieldInteractionExcel {
	UniqueId: long;
	FieldDateId: long;
	ShowEmoji: bool;
	KeywordLocalize: string;
	FieldSeasonId: long;
	InteractionType: [FieldInteractionType];
	InteractionId: [long];
	ConditionClass: FieldConditionClass;
	ConditionClassParameters: [long];
	OnceOnly: bool;
	ConditionIndex: [long];
	ConditionType: [FieldConditionType];
	ConditionId: [long];
	NegateCondition: [bool];
}

table FieldKeywordExcelTable {
	DataList: [FieldKeywordExcel];
}

table FieldKeywordExcel {
	UniqueId: long;
	NameLocalizeKey: string;
	DescriptionLocalizeKey: string;
	ImagePath: string;
}

table FieldMasteryExcelTable {
	DataList: [FieldMasteryExcel];
}

table FieldMasteryExcel {
	UniqueId: long;
	SeasonId: long;
	Order: int;
	ExpAmount: long;
	TokenType: ParcelType;
	TokenId: long;
	TokenRequirement: long;
	AccomplishmentConditionType: FieldConditionType;
	AccomplishmentConditionId: long;
}

table FieldMasteryLevelExcelTable {
	DataList: [FieldMasteryLevelExcel];
}

table FieldMasteryLevelExcel {
	Level: int;
	Id: [long];
	Exp: [long];
	TotalExp: [long];
	RewardId: [long];
}

table FieldMasteryManageExcelTable {
	DataList: [FieldMasteryManageExcel];
}

table FieldMasteryManageExcel {
	FieldSeason: long;
	LocalizeEtc: uint;
	ImagePath: string;
	LevelId: long;
}

table FieldQuestExcelTable {
	DataList: [FieldQuestExcel];
}

table FieldQuestExcel {
	UniqueId: long;
	FieldSeasonId: long;
	IsDaily: bool;
	FieldDateId: long;
	Opendate: long;
	AssetPath: string;
	RewardId: long;
	Prob: int;
	QuestNamKey: uint;
	QuestDescKey: uint;
}

table FieldRewardExcelTable {
	DataList: [FieldRewardExcel];
}

table FieldRewardExcel {
	GroupId: long;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
}

table FieldSceneExcelTable {
	DataList: [FieldSceneExcel];
}

table FieldSceneExcel {
	UniqueId: long;
	DateId: long;
	GroupId: long;
	ArtLevelPath: string;
	DesignLevelPath: string;
	BGMId: long;
	ConditionalBGMQuestId: [long];
	BeginConditionalBGMScenarioGroupId: [long];
	EndConditionalBGMScenarioGroupId: [long];
	ConditionalBGMId: [long];
}

table FieldSeasonExcelTable {
	DataList: [FieldSeasonExcel];
}

table FieldSeasonExcel {
	UniqueId: long;
	EventContentId: long;
	EntryDateId: long;
	InstantEntryDateId: long;
	StartDate: string;
	EndDate: string;
	LobbyBGMChangeStageId: long;
	CharacterIconPath: string;
	MasteryImagePath: string;
}

table FieldStoryStageExcelTable {
	DataList: [FieldStoryStageExcel];
}

table FieldStoryStageExcel {
	Id: long;
	SeasonId: long;
	Name: string;
	BattleDuration: long;
	stageTopography: StageTopography;
	RecommandLevel: int;
	GroundID: long;
	BGMId: long;
	FixedEchelonId: long;
	SkipFormationSettings: bool;
}

table FieldTutorialExcelTable {
	DataList: [FieldTutorialExcel];
}

table FieldTutorialExcel {
	SeasonId: long;
	TutorialType: [FieldTutorialType];
	ConditionType: [FieldConditionType];
	ConditionId: [long];
}

table FieldWorldMapZoneExcelTable {
	DataList: [FieldWorldMapZoneExcel];
}

table FieldWorldMapZoneExcel {
	Id: long;
	GroupId: int;
	Date: int;
	OpenConditionType: FieldConditionType;
	OpenConditionId: long;
	CloseConditionType: FieldConditionType;
	CloseConditionId: long;
	ResultFieldScene: long;
	FieldStageInteractionId: long;
	LocalizeCode: uint;
}

table FixedEchelonSettingExcelTable {
	DataList: [FixedEchelonSettingExcel];
}

table FixedEchelonSettingExcel {
	FixedEchelonID: long;
	EchelonSceneSkip: bool;
	MainLeaderSlot: int;
	MainCharacterID: [long];
	MainLevel: [int];
	MainGrade: [int];
	MainExSkillLevel: [int];
	MainNoneExSkillLevel: [int];
	MainEquipment1Tier: [int];
	MainEquipment1Level: [int];
	MainEquipment2Tier: [int];
	MainEquipment2Level: [int];
	MainEquipment3Tier: [int];
	MainEquipment3Level: [int];
	MainCharacterWeaponGrade: [int];
	MainCharacterWeaponLevel: [int];
	MainCharacterGearTier: [int];
	MainCharacterGearLevel: [int];
	SupportCharacterID: [long];
	SupportLevel: [int];
	SupportGrade: [int];
	SupportExSkillLevel: [int];
	SupportNoneExSkillLevel: [int];
	SupportEquipment1Tier: [int];
	SupportEquipment1Level: [int];
	SupportEquipment2Tier: [int];
	SupportEquipment2Level: [int];
	SupportEquipment3Tier: [int];
	SupportEquipment3Level: [int];
	SupportCharacterWeaponGrade: [int];
	SupportCharacterWeaponLevel: [int];
	SupportCharacterGearTier: [int];
	SupportCharacterGearLevel: [int];
	InteractionTSCharacterId: long;
}

table FixedStrategyExcelTable {
	DataList: [FixedStrategyExcel];
}

table FixedStrategyExcel {
	Id: long;
	StageEnterEchelon01FixedEchelonId: long;
	StageEnterEchelon01Starttile: long;
	StageEnterEchelon02FixedEchelonId: long;
	StageEnterEchelon02Starttile: long;
	StageEnterEchelon03FixedEchelonId: long;
	StageEnterEchelon03Starttile: long;
	StageEnterEchelon04FixedEchelonId: long;
	StageEnterEchelon04Starttile: long;
}

table FloaterCommonExcelTable {
	DataList: [FloaterCommonExcel];
}

table FloaterCommonExcel {
	Id: long;
	tacticEntityType: TacticEntityType;
	FloaterOffsetPosX: int;
	FloaterOffsetPosY: int;
	FloaterRandomPosRangeX: int;
	FloaterRandomPosRangeY: int;
}

table FormationLocationExcelTable {
	DataList: [FormationLocationExcel];
}

table FormationLocationExcel {
	Id: long;
	GroupID: long;
	SlotZ: [float];
	SlotX: [float];
}

table FurnitureExcelTable {
	DataList: [FurnitureExcel];
}

table FurnitureExcel {
	Id: long;
	productionStep: ProductionStep;
	rarity: Rarity;
	Category: FurnitureCategory;
	SubCategory: FurnitureSubCategory;
	LocalizeEtcId: uint;
	StarGradeInit: int;
	Tier: long;
	Icon: string;
	SizeWidth: int;
	SizeHeight: int;
	OtherSize: int;
	ExpandWidth: int;
	Enable: bool;
	ReverseRotation: bool;
	Prefab: string;
	PrefabExpand: string;
	SubPrefab: string;
	SubExpandPrefab: string;
	CornerPrefab: string;
	StackableMax: long;
	RecipeCraftId: long;
	SetGroudpId: long;
	ComfortBonus: long;
	VisitOperationType: long;
	VisitBonusOperationType: long;
	Tags: [Tag];
	CraftQualityTier0: long;
	CraftQualityTier1: long;
	CraftQualityTier2: long;
	ShiftingCraftQuality: long;
	furnitureFunctionType: FurnitureFunctionType;
	FurnitureFunctionParameter: long;
	VideoId: long;
	EventCollectionId: long;
	FurnitureBubbleOffsetX: long;
	FurnitureBubbleOffsetY: long;
	CafeCharacterStateReq: [string];
	CafeCharacterStateAdd: [string];
	CafeCharacterStateMake: [string];
	CafeCharacterStateOnly: [string];
}

table FurnitureGroupExcelTable {
	DataList: [FurnitureGroupExcel];
}

table FurnitureGroupExcel {
	Id: long;
	GroupNameLocalize: uint;
	LocalizeEtcId: uint;
	RequiredFurnitureCount: [int];
	ComfortBonus: [long];
}

table FurnitureTemplateElementExcelTable {
	DataList: [FurnitureTemplateElementExcel];
}

table FurnitureTemplateElementExcel {
	FurnitureTemplateId: long;
	FurnitureId: long;
	Location: FurnitureLocation;
	PositionX: float;
	PositionY: float;
	Rotation: float;
	Order: long;
}

table FurnitureTemplateExcelTable {
	DataList: [FurnitureTemplateExcel];
}

table FurnitureTemplateExcel {
	FurnitureTemplateId: long;
	FunitureTemplateTitle: uint;
	ThumbnailImagePath: string;
	ImagePath: string;
}

table GachaCraftNodeExcelTable {
	DataList: [GachaCraftNodeExcel];
}

table GachaCraftNodeExcel {
	ID: long;
	Tier: long;
	QuickCraftNodeDisplayOrder: int;
	NodeQuality: long;
	Icon: string;
	LocalizeKey: uint;
	Property: long;
}

table GachaCraftNodeGroupExcelTable {
	DataList: [GachaCraftNodeGroupExcel];
}

table GachaCraftNodeGroupExcel {
	NodeId: long;
	GachaGroupId: long;
	ProbWeight: long;
}

table GachaCraftOpenTagExcelTable {
	DataList: [GachaCraftOpenTagExcel];
}

table GachaCraftOpenTagExcel {
	NodeTier: CraftNodeTier;
	Tag: [Tag];
}

table GachaElementExcelTable {
	DataList: [GachaElementExcel];
}

table GachaElementExcel {
	ID: long;
	GachaGroupID: long;
	parcelType: ParcelType;
	ParcelID: long;
	rarity: Rarity;
	ParcelAmountMin: int;
	ParcelAmountMax: int;
	Prob: int;
	State: int;
}

table GachaElementRecursiveExcelTable {
	DataList: [GachaElementRecursiveExcel];
}

table GachaElementRecursiveExcel {
	ID: long;
	GachaGroupID: long;
	parcelType: ParcelType;
	ParcelID: long;
	ParcelAmountMin: int;
	ParcelAmountMax: int;
	Prob: int;
	State: int;
}

table GachaGroupExcelTable {
	DataList: [GachaGroupExcel];
}

table GachaGroupExcel {
	ID: long;
	NameKr: string;
	IsRecursive: bool;
	GroupType: GachaGroupType;
}

table GoodsExcelTable {
	DataList: [GoodsExcel];
}

table GoodsExcel {
	Id: long;
	Type: int;
	rarity: Rarity;
	IconPath: string;
	ConsumeParcelType: [ParcelType];
	ConsumeParcelId: [long];
	ConsumeParcelAmount: [long];
	ConsumeCondition: [ConsumeCondition];
	ConsumeGachaTicketType: GachaTicketType;
	ConsumeGachaTicketTypeAmount: long;
	ProductIdAOS: long;
	ProductIdiOS: long;
	ConsumeExtraStep: [long];
	ConsumeExtraAmount: [long];
	State: int;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelAmount: [long];
}

table GroundExcelTable {
	DataList: [GroundExcel];
}

table GroundExcel {
	Id: long;
	StageFileName: [string];
	GroundSceneName: string;
	FormationGroupId: long;
	stageTopography: StageTopography;
	EnemyBulletType: BulletType;
	EnemyArmorType: ArmorType;
	LevelNPC: long;
	LevelMinion: long;
	LevelElite: long;
	LevelChampion: long;
	LevelBoss: long;
	ObstacleLevel: long;
	GradeNPC: long;
	GradeMinion: long;
	GradeElite: long;
	GradeChampion: long;
	GradeBoss: long;
	PlayerSightPointAdd: long;
	PlayerSightPointRate: long;
	PlayerAttackRangeAdd: long;
	PlayerAttackRangeRate: long;
	EnemySightPointAdd: long;
	EnemySightPointRate: long;
	EnemyAttackRangeAdd: long;
	EnemyAttackRangeRate: long;
	PlayerSkillRangeAdd: long;
	PlayerSkillRangeRate: long;
	EnemySkillRangeAdd: long;
	EnemySkillRangeRate: long;
	PlayerMinimumPositionGapRate: long;
	EnemyMinimumPositionGapRate: long;
	PlayerSightRangeMax: bool;
	EnemySightRangeMax: bool;
	TSSAirUnitHeight: long;
	IsPhaseBGM: bool;
	BGMId: long;
	WarningUI: bool;
	TSSHatchOpen: bool;
	ForcedTacticSpeed: TacticSpeed;
	ForcedSkillUse: TacticSkillUse;
	ShowNPCSkillCutIn: ShowSkillCutIn;
	ImmuneHitBeforeTimeOutEnd: bool;
	UIBattleHideFromScratch: bool;
	BattleReadyTimelinePath: string;
	BeforeVictoryTimelinePath: string;
	SkipBattleEnd: bool;
	HideNPCWhenBattleEnd: bool;
	UIHpScale: float;
	UIEmojiScale: float;
	UISkillMainLogScale: float;
	AllyPassiveSkillId: [string];
	AllyPassiveSkillLevel: [int];
	EnemyPassiveSkillId: [string];
	EnemyPassiveSkillLevel: [int];
}

table GroundGridFlat {
	X: int;
	Y: int;
	StartX: float;
	StartY: float;
	Gap: float;
	Nodes: [GroundNodeFlat];
	Version: string;
}

table GroundNodeFlat {
	X: int;
	Y: int;
	IsCanNotUseSkill: bool;
	Position: GroundVector3;
	NodeType: GroundNodeType;
	OriginalNodeType: GroundNodeType;
}

table GroundModuleRewardExcelTable {
	DataList: [GroundModuleRewardExcel];
}

table GroundModuleRewardExcel {
	GroupId: uint;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
	RewardParcelProbability: long;
	IsDisplayed: bool;
	DropItemModelPrefabPath: string;
}

table GroundNodeLayerFlat {
	Layers: [byte];
}

table GuideMissionExcelTable {
	DataList: [GuideMissionExcel];
}

table GuideMissionExcel {
	SeasonId: long;
	Id: long;
	Category: MissionCategory;
	IsLegacy: bool;
	TabNumber: long;
	PreMissionId: [long];
	Description: uint;
	ToastDisplayType: MissionToastDisplayConditionType;
	ToastImagePath: string;
	ShortcutUI: [string];
	CompleteConditionType: MissionCompleteConditionType;
	CompleteConditionCount: long;
	CompleteConditionParameter: [long];
	CompleteConditionParameterTag: [Tag];
	IsAutoClearForScenario: bool;
	MissionRewardParcelType: [ParcelType];
	MissionRewardParcelId: [long];
	MissionRewardAmount: [int];
}

table GuideMissionOpenStageConditionExcelTable {
	DataList: [GuideMissionOpenStageConditionExcel];
}

table GuideMissionOpenStageConditionExcel {
	SeasonId: long;
	OrderNumber: long;
	TabLocalizeCode: string;
	ClearScenarioModeId: long;
	LockScenarioTextLocailzeCode: string;
	ShortcutScenarioUI: string;
	ClearStageId: long;
	LockStageTextLocailzeCode: string;
	ShortcutStageUI: string;
}

table GuideMissionSeasonExcelTable {
	DataList: [GuideMissionSeasonExcel];
}

table GuideMissionSeasonExcel {
	Id: long;
	TitleLocalizeCode: string;
	PermanentInfomationLocalizeCode: string;
	InfomationLocalizeCode: string;
	AccountType: AccountState;
	Enabled: bool;
	BannerOpenDate: string;
	StartDate: string;
	StartableEndDate: string;
	EndDate: string;
	CloseBannerAfterCompletion: bool;
	MaximumLoginCount: long;
	ExpiryDate: long;
	SpineCharacterId: long;
	RequirementParcelImage: string;
	RewardImage: string;
	LobbyBannerImage: string;
	BackgroundImage: string;
	TitleImage: string;
	RequirementParcelType: ParcelType;
	RequirementParcelId: long;
	RequirementParcelAmount: int;
	TabType: GuideMissionTabType;
	IsPermanent: bool;
	PreSeasonId: long;
}

table HpBarAbbreviationExcelTable {
	DataList: [HpBarAbbreviationExcel];
}

table HpBarAbbreviationExcel {
	MonsterLv: int;
	StandardHpBar: int;
	RaidBossHpBar: int;
}

table InformationStrategyObjectExcelTable {
	DataList: [InformationStrategyObjectExcel];
}

table InformationStrategyObjectExcel {
	Id: long;
	StageId: long;
	PageName: string;
	LocalizeCodeId: string;
}

table ItemExcelTable {
	DataList: [ItemExcel];
}

table ItemExcel {
	Id: long;
	GroupId: long;
	rarity: Rarity;
	productionStep: ProductionStep;
	LocalizeEtcId: uint;
	itemCategory: ItemCategory;
	Quality: long;
	Icon: string;
	SpriteName: string;
	StackableMax: int;
	StackableFunction: int;
	ImmediateUse: bool;
	UsingResultParcelType: ParcelType;
	UsingResultId: long;
	UsingResultAmount: long;
	mailType: MailType;
	ExpiryChangeParcelType: ParcelType;
	ExpiryChangeId: long;
	ExpiryChangeAmount: long;
	CanTierUpgrade: bool;
	TierUpgradeRecipeCraftId: long;
	Tags: [Tag];
	CraftQualityTier0: long;
	CraftQualityTier1: long;
	CraftQualityTier2: long;
	ShiftingCraftQuality: long;
	MaxGiftTags: int;
	ShopCategory: [ShopCategoryType];
	ExpirationDateTime: string;
	ExpirationNotifyDateIn: int;
	ShortcutTypeId: long;
	GachaTicket: GachaTicketType;
}

table KnockBackExcelTable {
	DataList: [KnockBackExcel];
}

table KnockBackExcel {
	Index: long;
	Dist: float;
	Speed: float;
}

table LimitedStageExcelTable {
	DataList: [LimitedStageExcel];
}

table LimitedStageExcel {
	Id: long;
	Name: string;
	SeasonId: long;
	stageDifficulty: StageDifficulty;
	StageNumber: string;
	StageDisplay: int;
	PrevStageId: long;
	OpenDate: long;
	OpenEventPoint: long;
	BattleDuration: long;
	StageEnterCostType: ParcelType;
	StageEnterCostId: long;
	StageEnterCostAmount: int;
	StageEnterEchelonCount: int;
	StarConditionTacticRankSCount: long;
	StarConditionTurnCount: long;
	EnterScenarioGroupId: [long];
	ClearScenarioGroupId: [long];
	StrategyMap: string;
	StrategyMapBG: string;
	StageRewardId: long;
	MaxTurn: int;
	stageTopography: StageTopography;
	RecommandLevel: int;
	BgmId: string;
	strategyEnvironment: StrategyEnvironment;
	GroundID: long;
	contentType: ContentType;
	BGMId: long;
	InstantClear: bool;
	BuffContentId: long;
	ChallengeDisplay: bool;
}

table LimitedStageRewardExcelTable {
	DataList: [LimitedStageRewardExcel];
}

table LimitedStageRewardExcel {
	GroupId: long;
	rewardTag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
	IsDisplayed: bool;
}

table LimitedStageSeasonExcelTable {
	DataList: [LimitedStageSeasonExcel];
}

table LimitedStageSeasonExcel {
	Id: long;
	StartDate: string;
	EndDate: string;
	TypeACount: long;
	TypeBCount: long;
	TypeCCount: long;
}

table LocalizeCharProfileExcelTable {
	DataList: [LocalizeCharProfileExcel];
}

table LocalizeCharProfileExcel {
	CharacterId: long;
	StatusMessageKr: string;
	StatusMessageJp: string;
	FullNameKr: string;
	FullNameJp: string;
	FamilyNameKr: string;
	FamilyNameRubyKr: string;
	PersonalNameKr: string;
	PersonalNameRubyKr: string;
	FamilyNameJp: string;
	FamilyNameRubyJp: string;
	PersonalNameJp: string;
	PersonalNameRubyJp: string;
	SchoolYearKr: string;
	SchoolYearJp: string;
	CharacterAgeKr: string;
	CharacterAgeJp: string;
	BirthDay: string;
	BirthdayKr: string;
	BirthdayJp: string;
	CharHeightKr: string;
	CharHeightJp: string;
	DesignerNameKr: string;
	DesignerNameJp: string;
	IllustratorNameKr: string;
	IllustratorNameJp: string;
	CharacterVoiceKr: string;
	CharacterVoiceJp: string;
	HobbyKr: string;
	HobbyJp: string;
	WeaponNameKr: string;
	WeaponDescKr: string;
	WeaponNameJp: string;
	WeaponDescJp: string;
	ProfileIntroductionKr: string;
	ProfileIntroductionJp: string;
	CharacterSSRNewKr: string;
	CharacterSSRNewJp: string;
}

table LocalizeCodeInBuildExcelTable {
	DataList: [LocalizeCodeInBuildExcel];
}

table LocalizeCodeInBuildExcel {
	Key: uint;
	Kr: string;
	Jp: string;
}

table LocalizeEtcExcelTable {
	DataList: [LocalizeEtcExcel];
}

table LocalizeEtcExcel {
	Key: uint;
	NameKr: string;
	DescriptionKr: string;
	NameJp: string;
	DescriptionJp: string;
}

table LocalizeFieldExcelTable {
	DataList: [LocalizeFieldExcel];
}

table LocalizeFieldExcel {
	Key: uint;
	Kr: string;
	Jp: string;
}

table LocalizeGachaShopExcelTable {
	DataList: [LocalizeGachaShopExcel];
}

table LocalizeGachaShopExcel {
	GachaShopId: long;
	TabNameKr: string;
	TabNameJp: string;
	TitleNameKr: string;
	TitleNameJp: string;
	SubTitleKr: string;
	SubTitleJp: string;
	GachaDescriptionKr: string;
	GachaDescriptionJp: string;
}

table LogicEffectCommonVisualExcelTable {
	DataList: [LogicEffectCommonVisualExcel];
}

table LogicEffectCommonVisualExcel {
	StringID: uint;
	IconSpriteName: string;
	IconDispelColor: [float];
	ParticleEnterPath: string;
	ParticleEnterSocket: EffectBone;
	ParticleLoopPath: string;
	ParticleLoopSocket: EffectBone;
	ParticleEndPath: string;
	ParticleEndSocket: EffectBone;
	ParticleApplyPath: string;
	ParticleApplySocket: EffectBone;
	ParticleRemovedPath: string;
	ParticleRemovedSocket: EffectBone;
}

table MiniGameAudioAnimatorExcelTable {
	DataList: [MiniGameAudioAnimatorExcel];
}

table MiniGameAudioAnimatorExcel {
	ControllerNameHash: uint;
	VoiceNamePrefix: string;
	StateNameHash: uint;
	StateName: string;
	IgnoreInterruptDelay: bool;
	IgnoreInterruptPlay: bool;
	Volume: float;
	Delay: float;
	AudioPriority: int;
	AudioClipPath: [string];
	VoiceHash: [uint];
}

table MiniGameMissionExcelTable {
	DataList: [MiniGameMissionExcel];
}

table MiniGameMissionExcel {
	Id: long;
	EventContentId: long;
	GroupId: long;
	GroupName: string;
	Category: MissionCategory;
	Description: uint;
	ResetType: MissionResetType;
	ToastDisplayType: MissionToastDisplayConditionType;
	ToastImagePath: string;
	ViewFlag: bool;
	DisplayOrder: long;
	PreMissionId: [long];
	AccountType: AccountState;
	AccountLevel: long;
	ShortcutUI: [string];
	CompleteConditionType: MissionCompleteConditionType;
	IsCompleteExtensionTime: bool;
	CompleteConditionCount: long;
	CompleteConditionParameter: [long];
	CompleteConditionParameterTag: [Tag];
	RewardIcon: string;
	MissionRewardParcelType: [ParcelType];
	MissionRewardParcelId: [long];
	MissionRewardAmount: [int];
}

table MiniGamePlayGuideExcelTable {
	DataList: [MiniGamePlayGuideExcel];
}

table MiniGamePlayGuideExcel {
	Id: long;
	EventContentId: long;
	DisplayOrder: int;
	GuideTitle: string;
	GuideImagePath: string;
	GuideText: string;
}

table MiniGameRhythmBgmExcelTable {
	DataList: [MiniGameRhythmBgmExcel];
}

table MiniGameRhythmBgmExcel {
	RhythmBgmId: long;
	EventContentId: long;
	StageSelectImagePath: string;
	Bpm: long;
	Bgm: long;
	BgmNameText: string;
	BgmArtistText: string;
	HasLyricist: bool;
	BgmComposerText: string;
	BgmLength: int;
}

table MiniGameRhythmExcelTable {
	DataList: [MiniGameRhythmExcel];
}

table MiniGameRhythmExcel {
	UniqueId: long;
	RhythmBgmId: long;
	PresetName: string;
	StageDifficulty: Difficulty;
	IsSpecial: bool;
	OpenStageScoreAmount: long;
	MaxHp: long;
	MissDamage: long;
	CriticalHPRestoreValue: long;
	MaxScore: long;
	FeverScoreRate: long;
	NoteScoreRate: long;
	ComboScoreRate: long;
	AttackScoreRate: long;
	FeverCriticalRate: float;
	FeverAttackRate: float;
	MaxHpScore: long;
	RhythmFileName: string;
	ArtLevelSceneName: string;
	ComboImagePath: string;
}

table MiniGameShootingCharacterExcelTable {
	DataList: [MiniGameShootingCharacterExcel];
}

table MiniGameShootingCharacterExcel {
	UniqueId: long;
	SpineResourceName: string;
	BodyRadius: float;
	ModelPrefabName: string;
	NormalAttackSkillData: string;
	PublicSkillData: [string];
	DeathSkillData: string;
	MaxHP: long;
	AttackPower: long;
	DefensePower: long;
	CriticalRate: long;
	CriticalDamageRate: long;
	AttackRange: long;
	MoveSpeed: long;
	ShotTime: long;
	IsBoss: bool;
	Scale: float;
	IgnoreObstacleCheck: bool;
	CharacterVoiceGroupId: long;
}

table MiniGameShootingGeasExcelTable {
	DataList: [MiniGameShootingGeasExcel];
}

table MiniGameShootingGeasExcel {
	UniqueId: long;
	GeasType: Geas;
	Icon: string;
	Probability: long;
	MaxOverlapCount: int;
	GeasData: string;
	NeedGeasId: long;
	HideInPausePopup: bool;
}

table MiniGameShootingStageExcelTable {
	DataList: [MiniGameShootingStageExcel];
}

table MiniGameShootingStageExcel {
	UniqueId: long;
	BgmId: [long];
	CostGoodsId: long;
	difficulty: Difficulty;
	DesignLevel: string;
	ArtLevel: string;
	StartBattleDuration: long;
	DefaultBattleDuration: long;
	DefaultLogicEffect: string;
	CameraSizeRate: float;
	EventContentStageRewardId: long;
}

table MiniGameShootingStageRewardExcelTable {
	DataList: [MiniGameShootingStageRewardExcel];
}

table MiniGameShootingStageRewardExcel {
	GroupId: long;
	RewardId: long;
	ClearSection: long;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [int];
}

table MinigameTBGDiceExcelTable {
	DataList: [MinigameTBGDiceExcel];
}

table MinigameTBGDiceExcel {
	EventContentId: long;
	UniqueId: long;
	DiceGroup: int;
	DiceResult: int;
	Prob: int;
	ProbModifyCondition: [TBGProbModifyCondition];
	ProbModifyValue: [int];
	ProbModifyLimit: [int];
}

table MinigameTBGEncounterExcelTable {
	DataList: [MinigameTBGEncounterExcel];
}

table MinigameTBGEncounterExcel {
	EventContentId: long;
	UniqueId: long;
	AllThema: bool;
	ThemaIndex: int;
	ThemaType: TBGThemaType;
	ObjectType: TBGObjectType;
	EnemyImagePath: string;
	EnemyPrefabName: string;
	EnemyNameLocalize: string;
	OptionGroupId: long;
	RewardHide: bool;
	EncounterTitleLocalize: string;
	StoryImagePath: string;
	BeforeStoryLocalize: string;
	BeforeStoryOption1Localize: string;
	BeforeStoryOption2Localize: string;
	BeforeStoryOption3Localize: string;
	AllyAttackLocalize: string;
	EnemyAttackLocalize: string;
	AttackDefenceLocalize: string;
	ClearStoryLocalize: string;
	DefeatStoryLocalize: string;
	RunawayStoryLocalize: string;
}

table MinigameTBGEncounterOptionExcelTable {
	DataList: [MinigameTBGEncounterOptionExcel];
}

table MinigameTBGEncounterOptionExcel {
	OptionGroupId: long;
	UniqueId: long;
	SlotIndex: int;
	OptionTitleLocalize: string;
	OptionSuccessLocalize: string;
	OptionSuccessRewardGroupId: long;
	OptionSuccessOrHigherDiceCount: int;
	OptionGreatSuccessOrHigherDiceCount: int;
	OptionFailLocalize: string;
	OptionFailLessDiceCount: int;
	RunawayOrHigherDiceCount: int;
	RewardHide: bool;
}

table MinigameTBGEncounterRewardExcelTable {
	DataList: [MinigameTBGEncounterRewardExcel];
}

table MinigameTBGEncounterRewardExcel {
	GroupId: long;
	UniqueId: long;
	tBGOptionSuccessType: TBGOptionSuccessType;
	Paremeter: long;
	parcelType: ParcelType;
	ParcelId: long;
	Amount: long;
	Prob: int;
}

table MinigameTBGItemExcelTable {
	DataList: [MinigameTBGItemExcel];
}

table MinigameTBGItemExcel {
	UniqueId: long;
	ItemType: TBGItemType;
	tBGItemEffectType: TBGItemEffectType;
	ItemParameter: int;
	LocalizeETCId: string;
	Icon: string;
	BuffIcon: string;
	EncounterCount: int;
	DiceEffectAniClip: string;
}

table MinigameTBGObjectExcelTable {
	DataList: [MinigameTBGObjectExcel];
}

table MinigameTBGObjectExcel {
	UniqueId: long;
	Key: string;
	PrefabName: string;
	ObjectType: TBGObjectType;
	ObjectCostType: ParcelType;
	ObjectCostId: long;
	ObjectCostAmount: int;
	Disposable: bool;
	ReEncounterCost: bool;
}

table MinigameTBGSeasonExcelTable {
	DataList: [MinigameTBGSeasonExcel];
}

table MinigameTBGSeasonExcel {
	EventContentId: long;
	ItemSlot: int;
	DefaultEchelonHp: int;
	DefaultItemDiceId: long;
	EchelonSlot1CharacterId: long;
	EchelonSlot2CharacterId: long;
	EchelonSlot3CharacterId: long;
	EchelonSlot4CharacterId: long;
	EchelonSlot1Portrait: string;
	EchelonSlot2Portrait: string;
	EchelonSlot3Portrait: string;
	EchelonSlot4Portrait: string;
	EventUseCostType: ParcelType;
	EventUseCostId: long;
	EchelonRevivalCostType: ParcelType;
	EchelonRevivalCostId: long;
	EchelonRevivalCostAmount: int;
	EnemyBossHP: int;
	EnemyMinionHP: int;
	AttackDamage: int;
	CriticalAttackDamage: int;
	RoundItemSelectLimit: int;
	InstantClearRound: int;
	MaxHp: int;
	MapImagePath: string;
	MapNameLocalize: string;
}

table MinigameTBGThemaExcelTable {
	DataList: [MinigameTBGThemaExcel];
}

table MinigameTBGThemaExcel {
	EventContentId: long;
	UniqueId: long;
	ThemaIndex: int;
	ThemaType: TBGThemaType;
	ThemaMap: string;
	ThemaMapBG: string;
	PortalCondition: [TBGPortalCondition];
	PortalConditionParameter: [string];
	ThemaNameLocalize: string;
	ThemaLoadingImage: string;
	ThemaPlayerPrefab: string;
	ThemaLeaderId: long;
	ThemaGoalLocalize: string;
	InstantClearCostAmount: long;
}

table MiniGameTBGThemaRewardExcelTable {
	DataList: [MiniGameTBGThemaRewardExcel];
}

table MiniGameTBGThemaRewardExcel {
	EventContentId: long;
	ThemaRound: int;
	ThemaUniqueId: int;
	IsLoop: bool;
	miniGameTBGThemaRewardType: MiniGameTBGThemaRewardType;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [int];
}

table MinigameTBGVoiceExcelTable {
	DataList: [MinigameTBGVoiceExcel];
}

table MinigameTBGVoiceExcel {
	EventContentId: long;
	UniqueId: long;
	VoiceCondition: TBGVoiceCondition;
	VoiceId: uint;
}

table MissionExcelTable {
	DataList: [MissionExcel];
}

table MissionExcel {
	Id: long;
	Category: MissionCategory;
	Description: uint;
	ResetType: MissionResetType;
	ToastDisplayType: MissionToastDisplayConditionType;
	ToastImagePath: string;
	ViewFlag: bool;
	Limit: bool;
	StartDate: string;
	EndDate: string;
	EndDay: long;
	StartableEndDate: string;
	DateAutoRefer: ContentType;
	DisplayOrder: long;
	PreMissionId: [long];
	AccountType: AccountState;
	AccountLevel: long;
	ContentTags: [SuddenMissionContentType];
	ShortcutUI: [string];
	ChallengeStageShortcut: long;
	CompleteConditionType: MissionCompleteConditionType;
	CompleteConditionCount: long;
	CompleteConditionParameter: [long];
	CompleteConditionParameterTag: [Tag];
	RewardIcon: string;
	MissionRewardParcelType: [ParcelType];
	MissionRewardParcelId: [long];
	MissionRewardAmount: [int];
}

table NormalSkillTemplateExcelTable {
	DataList: [NormalSkillTemplateExcel];
}

table NormalSkillTemplateExcel {
	Index: long;
	FirstCoolTime: float;
	CoolTime: float;
	MultiAni: bool;
}

table ObstacleExcelTable {
	DataList: [ObstacleExcel];
}

table ObstacleExcel {
	Index: long;
	PrefabName: string;
	JumpAble: bool;
	SubOffset: [float];
	X: float;
	Z: float;
	Hp: long;
	MaxHp: long;
	BlockRate: int;
	EvasionRate: int;
	DestroyType: ObstacleDestroyType;
	Point1Offeset: [float];
	EnemyPoint1Osset: [float];
	Point2Offeset: [float];
	EnemyPoint2Osset: [float];
	SubObstacleID: [long];
}

table ObstacleFireLineCheckExcelTable {
	DataList: [ObstacleFireLineCheckExcel];
}

table ObstacleFireLineCheckExcel {
	MyObstacleFireLineCheck: bool;
	AllyObstacleFireLineCheck: bool;
	EnemyObstacleFireLineCheck: bool;
	EmptyObstacleFireLineCheck: bool;
}

table ObstacleStatExcelTable {
	DataList: [ObstacleStatExcel];
}

table ObstacleStatExcel {
	StringID: uint;
	Name: string;
	MaxHP1: long;
	MaxHP100: long;
	BlockRate: long;
	Dodge: long;
	CanNotStandRange: long;
	HighlightFloaterHeight: float;
}

table OpenConditionExcelTable {
	DataList: [OpenConditionExcel];
}

table OpenConditionExcel {
	OpenConditionContentType: OpenConditionContent;
	LockUI: [string];
	ShortcutPopupPriority: long;
	ShortcutUIName: [string];
	ShortcutParam: int;
	Scene: string;
	HideWhenLocked: bool;
	AccountLevel: long;
	ScenarioModeId: long;
	CampaignStageId: long;
	multipleConditionCheckType: MultipleConditionCheckType;
	OpenDayOfWeek: WeekDay;
	OpenHour: long;
	CloseDayOfWeek: WeekDay;
	CloseHour: long;
	OpenedCafeId: long;
	CafeIdforCafeRank: long;
	CafeRank: long;
	ContentsOpenShow: bool;
	ContentsOpenShortcutUI: string;
}

table ParcelAutoSynthExcelTable {
	DataList: [ParcelAutoSynthExcel];
}

table ParcelAutoSynthExcel {
	RequireParcelType: ParcelType;
	RequireParcelId: long;
	RequireParcelAmount: long;
	SynthStartAmount: long;
	SynthEndAmount: long;
	SynthMaxItem: bool;
	ResultParcelType: ParcelType;
	ResultParcelId: long;
	ResultParcelAmount: long;
}

table PersonalityExcelTable {
	DataList: [PersonalityExcel];
}

table PersonalityExcel {
	Id: long;
	Name: string;
}

table PickupDuplicateBonusExcelTable {
	DataList: [PickupDuplicateBonusExcel];
}

table PickupDuplicateBonusExcel {
	Id: long;
	shopCategoryType: ShopCategoryType;
	ShopId: long;
	PickupCharacterId: long;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
}

table PresetCharacterGroupExcelTable {
	DataList: [PresetCharacterGroupExcel];
}

table PresetCharacterGroupExcel {
	PresetCharacterGroupId: long;
	GetPresetType: string;
	Level: int;
	Exp: int;
	FavorExp: int;
	FavorRank: int;
	StarGrade: int;
	ExSkillLevel: int;
	PassiveSkillLevel: int;
	ExtraPassiveSkillLevel: int;
	CommonSkillLevel: int;
	LeaderSkillLevel: int;
	EquipSlot01: bool;
	EquipSlotTier01: int;
	EquipSlotLevel01: int;
	EquipSlot02: bool;
	EquipSlotTier02: int;
	EquipSlotLevel02: int;
	EquipSlot03: bool;
	EquipSlotTier03: int;
	EquipSlotLevel03: int;
	EquipCharacterWeapon: bool;
	EquipCharacterWeaponTier: int;
	EquipCharacterWeaponLevel: int;
	EquipCharacterGear: bool;
	EquipCharacterGearTier: int;
	EquipCharacterGearLevel: int;
	PotentialType01: PotentialStatBonusRateType;
	PotentialLevel01: int;
	PotentialType02: PotentialStatBonusRateType;
	PotentialLevel02: int;
	PotentialType03: PotentialStatBonusRateType;
	PotentialLevel03: int;
}

table PresetCharacterGroupSettingExcelTable {
	DataList: [PresetCharacterGroupSettingExcel];
}

table PresetCharacterGroupSettingExcel {
	CharacterId: long;
	ArenaSimulatorFixed: bool;
	PresetType: [string];
}

table PresetParcelsExcelTable {
	DataList: [PresetParcelsExcel];
}

table PresetParcelsExcel {
	parcelType: ParcelType;
	ParcelId: long;
	PresetGroupId: long;
	ParcelAmount: long;
}

table ProductExcelTable {
	DataList: [ProductExcel];
}

table ProductExcel {
	Id: long;
	ProductId: string;
	storeType: StoreType;
	Price: long;
	PriceReference: string;
	purchasePeriodType: PurchasePeriodType;
	PurchasePeriodLimit: long;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelAmount: [long];
}

table ProductMonthlyExcelTable {
	DataList: [ProductMonthlyExcel];
}

table ProductMonthlyExcel {
	Id: long;
	ProductId: string;
	storeType: StoreType;
	Price: long;
	PriceReference: string;
	productTagType: ProductTagType;
	MonthlyDays: long;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelAmount: [long];
	EnterCostReduceGroupId: long;
	DailyParcelType: [ParcelType];
	DailyParcelId: [long];
	DailyParcelAmount: [long];
}

table PropVector3 {
	X: float;
	Y: float;
	Z: float;
}

table PropMotion {
	Name: string;
	Positions: [PropVector3];
	Rotations: [PropVector3];
}

table PropRootMotionFlat {
	RootMotions: [PropMotion];
}

table ProtocolSettingExcelTable {
	DataList: [ProtocolSettingExcel];
}

table ProtocolSettingExcel {
	Protocol: string;
	openConditionContent: OpenConditionContent;
	Currency: bool;
	Inventory: bool;
	Mail: bool;
}

table RaidRankingRewardExcelTable {
	DataList: [RaidRankingRewardExcel];
}

table RaidRankingRewardExcel {
	RankingRewardGroupId: long;
	Id: long;
	RankStart: long;
	RankEnd: long;
	PercentRankStart: long;
	PercentRankEnd: long;
	Tier: int;
	RewardParcelType: [ParcelType];
	RewardParcelUniqueId: [long];
	RewardParcelUniqueName: [string];
	RewardParcelAmount: [long];
}

table RaidSeasonManageExcelTable {
	DataList: [RaidSeasonManageExcel];
}

table RaidSeasonManageExcel {
	SeasonId: long;
	SeasonDisplay: long;
	SeasonStartData: string;
	SeasonEndData: string;
	SettlementEndDate: string;
	OpenRaidBossGroup: [string];
	RankingRewardGroupId: long;
	MaxSeasonRewardGauage: int;
	StackedSeasonRewardGauge: [long];
	SeasonRewardId: [long];
}

table RaidStageExcelTable {
	DataList: [RaidStageExcel];
}

table RaidStageExcel {
	Id: long;
	UseBossIndex: bool;
	UseBossAIPhaseSync: bool;
	RaidBossGroup: string;
	PortraitPath: string;
	BGPath: string;
	RaidCharacterId: long;
	BossCharacterId: [long];
	difficulty: Difficulty;
	DifficultyOpenCondition: bool;
	MaxPlayerCount: long;
	RaidRoomLifeTime: int;
	BattleDuration: long;
	GroundId: long;
	GroundDevName: string;
	EnterTimeLine: string;
	tacticEnvironment: TacticEnvironment;
	DefaultClearScore: long;
	MaximumScore: long;
	PerSecondMinusScore: long;
	HPPercentScore: long;
	MinimumAcquisitionScore: long;
	MaximumAcquisitionScore: long;
	RaidRewardGroupId: long;
	BattleReadyTimelinePath: [string];
	BattleReadyTimelinePhaseStart: [int];
	BattleReadyTimelinePhaseEnd: [int];
	VictoryTimelinePath: string;
	PhaseChangeTimelinePath: string;
	TimeLinePhase: long;
	EnterScenarioKey: uint;
	ClearScenarioKey: uint;
	ShowSkillCard: bool;
	BossBGInfoKey: uint;
	echelonExtensionType: EchelonExtensionType;
}

table RaidStageRewardExcelTable {
	DataList: [RaidStageRewardExcel];
}

table RaidStageRewardExcel {
	GroupId: long;
	IsClearStageRewardHideInfo: bool;
	ClearStageRewardProb: long;
	ClearStageRewardParcelType: ParcelType;
	ClearStageRewardParcelUniqueID: long;
	ClearStageRewardParcelUniqueName: string;
	ClearStageRewardAmount: long;
}

table RaidStageSeasonRewardExcelTable {
	DataList: [RaidStageSeasonRewardExcel];
}

table RaidStageSeasonRewardExcel {
	SeasonRewardId: long;
	SeasonRewardParcelType: [ParcelType];
	SeasonRewardParcelUniqueId: [long];
	SeasonRewardParcelUniqueName: [string];
	SeasonRewardAmount: [long];
}

table RecipeCraftExcelTable {
	DataList: [RecipeCraftExcel];
}

table RecipeCraftExcel {
	Id: long;
	DevName: string;
	recipeType: RecipeType;
	RecipeIngredientId: long;
	RecipeIngredientDevName: string;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelDevName: [string];
	ResultAmountMin: [long];
	ResultAmountMax: [long];
}

table RecipeExcelTable {
	DataList: [RecipeExcel];
}

table RecipeExcel {
	Id: long;
	recipeType: RecipeType;
	RecipeIngredientId: long;
	RecipeSelectionGroupId: long;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ResultAmountMin: [long];
	ResultAmountMax: [long];
}

table RecipeIngredientExcelTable {
	DataList: [RecipeIngredientExcel];
}

table RecipeIngredientExcel {
	Id: long;
	recipeType: RecipeType;
	CostParcelType: [ParcelType];
	CostId: [long];
	CostAmount: [long];
	IngredientParcelType: [ParcelType];
	IngredientId: [long];
	IngredientAmount: [long];
	CostTimeInSecond: long;
}

table RecipeSelectionAutoUseExcelTable {
	DataList: [RecipeSelectionAutoUseExcel];
}

table RecipeSelectionAutoUseExcel {
	Id: long;
	parcelType: ParcelType;
	TargetItemId: long;
	Priority: [long];
}

table RecipeSelectionGroupExcelTable {
	DataList: [RecipeSelectionGroupExcel];
}

table RecipeSelectionGroupExcel {
	RecipeSelectionGroupId: long;
	RecipeSelectionGroupComponentId: long;
	parcelType: ParcelType;
	ParcelId: long;
	ResultAmountMin: long;
	ResultAmountMax: long;
}

table Position {
	X: float;
	Z: float;
}

table Motion {
	Name: string;
	Positions: [Position];
}

table MoveEnd {
	Normal: Motion;
	Stand: Motion;
	Kneel: Motion;
}

table Form {
	moveEnd: MoveEnd;
	PublicSkill: Motion;
}

table RootMotionFlat {
	Forms: [Form];
	ExSkills: [Motion];
	MoveLeft: Motion;
	MoveRight: Motion;
}

table ScenarioExcelTable {
	DataList: [ScenarioExcel];
}

table ScenarioExcel {
	None: [ScenarioBGType];
	Idle: [ScenarioCharacterAction];
	Cafe: DialogCategory;
	Talk: DialogType;
	Open: StoryCondition;
	EnterConver: EmojiEvent;
	Center: ScenarioZoomAnchors;
	Instant: ScenarioZoomType;
	Prologue: ScenarioContentType;
}

table ScenarioReplayExcelTable {
	DataList: [ScenarioReplayExcel];
}

table ScenarioReplayExcel {
	ModeId: long;
	VolumeId: long;
	ReplayType: ScenarioModeReplayTypes;
	ChapterId: long;
	EpisodeId: long;
	FrontScenarioGroupId: [long];
	GroundId: long;
	BattleDuration: long;
	BackScenarioGroupId: [long];
}

table ScenarioScriptField1ExcelTable {
	DataList: [ScenarioScriptField1Excel];
}

table ScenarioScriptField1Excel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	VoiceJp: string;
}

table SchoolDungeonRewardExcelTable {
	DataList: [SchoolDungeonRewardExcel];
}

table SchoolDungeonRewardExcel {
	GroupId: long;
	DungeonType: SchoolDungeonType;
	rewardTag: RewardTag;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
	RewardParcelProbability: long;
	IsDisplayed: bool;
}

table SchoolDungeonStageExcelTable {
	DataList: [SchoolDungeonStageExcel];
}

table SchoolDungeonStageExcel {
	StageId: long;
	DungeonType: SchoolDungeonType;
	Difficulty: int;
	BattleDuration: long;
	PrevStageId: long;
	StageEnterCostType: [ParcelType];
	StageEnterCostId: [long];
	StageEnterCostAmount: [long];
	StageEnterCostMinimumAmount: [long];
	GroundId: int;
	StarGoal: [StarGoalType];
	StarGoalAmount: [int];
	stageTopography: StageTopography;
	RecommandLevel: long;
	StageRewardId: long;
	PlayTimeLimitInSeconds: long;
	echelonExtensionType: EchelonExtensionType;
}

table ShiftingCraftRecipeExcelTable {
	DataList: [ShiftingCraftRecipeExcel];
}

table ShiftingCraftRecipeExcel {
	Id: long;
	DisplayOrder: long;
	NotificationId: int;
	ResultParcel: ParcelType;
	ResultId: long;
	ResultAmount: long;
	RequireItemId: long;
	RequireItemAmount: long;
	RequireGold: long;
	IngredientTag: [Tag];
	IngredientExp: long;
}

table ShopCashExcelTable {
	DataList: [ShopCashExcel];
}

table ShopCashExcel {
	Id: long;
	CashProductId: long;
	PackageType: PurchaseSourceType;
	LocalizeEtcId: uint;
	IconPath: string;
	DisplayOrder: long;
	RenewalDisplayOrder: long;
	CategoryType: ProductCategory;
	DisplayTag: ProductDisplayTag;
	SalePeriodFrom: string;
	SalePeriodTo: string;
	PeriodTag: bool;
	AccountLevelLimit: long;
	AccountLevelHide: bool;
	ClearMissionLimit: long;
	ClearMissionHide: bool;
	PurchaseReportEventName: string;
}

table ShopCashScenarioResourceInfoExcelTable {
	DataList: [ShopCashScenarioResourceInfoExcel];
}

table ShopCashScenarioResourceInfoExcel {
	ScenarioResrouceInfoId: long;
	ShopCashId: long;
	IconPath: string;
}

table ShopExcelTable {
	DataList: [ShopExcel];
}

table ShopExcel {
	Id: long;
	LocalizeEtcId: uint;
	CategoryType: ShopCategoryType;
	IsLegacy: bool;
	GoodsId: [long];
	DisplayOrder: long;
	SalePeriodFrom: string;
	SalePeriodTo: string;
	PurchaseCooltimeMin: long;
	PurchaseCountLimit: long;
	purchaseCountResetType: PurchaseCountResetType;
	BuyReportEventName: string;
	RestrictBuyWhenInventoryFull: bool;
	DisplayTag: ProductDisplayTag;
	ShopUpdateGroupId: int;
}

table ShopFilterClassifiedExcelTable {
	DataList: [ShopFilterClassifiedExcel];
}

table ShopFilterClassifiedExcel {
	Id: long;
	CategoryType: ShopCategoryType;
	ConsumeParcelType: ParcelType;
	ConsumeParcelId: long;
	shopFilterType: ShopFilterType;
	GoodsId: long;
}

table ShopFreeRecruitExcelTable {
	DataList: [ShopFreeRecruitExcel];
}

table ShopFreeRecruitExcel {
	Id: long;
	FreeRecruitPeriodFrom: string;
	FreeRecruitPeriodTo: string;
	FreeRecruitType: ShopFreeRecruitType;
	FreeRecruitDecorationImagePath: string;
	ShopRecruitId: [long];
}

table ShopFreeRecruitPeriodExcelTable {
	DataList: [ShopFreeRecruitPeriodExcel];
}

table ShopFreeRecruitPeriodExcel {
	ShopFreeRecruitId: long;
	ShopFreeRecruitIntervalId: long;
	IntervalDate: string;
	FreeRecruitCount: int;
}

table ShopInfoExcelTable {
	DataList: [ShopInfoExcel];
}

table ShopInfoExcel {
	CategoryType: ShopCategoryType;
	IsRefresh: bool;
	IsSoldOutDimmed: bool;
	CostParcelType: [ParcelType];
	CostParcelId: [long];
	AutoRefreshCoolTime: long;
	RefreshAbleCount: long;
	GoodsId: [long];
	OpenPeriodFrom: string;
	OpenPeriodTo: string;
	ShopProductUpdateTime: string;
	DisplayParcelType: ParcelType;
	DisplayParcelId: long;
	IsShopVisible: bool;
	DisplayOrder: int;
	ShopUpdateDate: int;
	ShopUpdateGroupId1: int;
	ShopUpdateGroupId2: int;
	ShopUpdateGroupId3: int;
	ShopUpdateGroupId4: int;
	ShopUpdateGroupId5: int;
	ShopUpdateGroupId6: int;
	ShopUpdateGroupId7: int;
	ShopUpdateGroupId8: int;
	ShopUpdateGroupId9: int;
	ShopUpdateGroupId10: int;
	ShopUpdateGroupId11: int;
	ShopUpdateGroupId12: int;
}

table ShopRecruitExcelTable {
	DataList: [ShopRecruitExcel];
}

table ShopRecruitExcel {
	Id: long;
	CategoryType: ShopCategoryType;
	IsLegacy: bool;
	OneGachaGoodsId: long;
	TenGachaGoodsId: long;
	GoodsDevName: string;
	DisplayTag: GachaDisplayTag;
	DisplayOrder: long;
	GachaBannerPath: string;
	VideoId: [long];
	LinkedRobbyBannerId: long;
	InfoCharacterId: [long];
	SalePeriodFrom: string;
	SalePeriodTo: string;
	RecruitCoinId: long;
	RecruitSellectionShopId: long;
	PurchaseCooltimeMin: long;
	PurchaseCountLimit: long;
	purchaseCountResetType: PurchaseCountResetType;
	IsNewbie: bool;
	IsSelectRecruit: bool;
	DirectPayInvisibleTokenId: long;
	DirectPayAndroidShopCashId: long;
	DirectPayAppleShopCashId: long;
}

table ShopRefreshExcelTable {
	DataList: [ShopRefreshExcel];
}

table ShopRefreshExcel {
	Id: long;
	LocalizeEtcId: uint;
	IsLegacy: bool;
	GoodsId: long;
	IsBundle: bool;
	VisibleAmount: long;
	DisplayOrder: long;
	CategoryType: ShopCategoryType;
	RefreshGroup: int;
	Prob: int;
	BuyReportEventName: string;
	DisplayTag: ProductDisplayTag;
}

table SkillExcelTable {
	DataList: [SkillExcel];
}

table SkillExcel {
	Id: long;
	LocalizeSkillId: uint;
	GroupId: string;
	SkillDataKey: string;
	VisualDataKey: string;
	Level: int;
	SkillCost: int;
	ExtraSkillCost: int;
	EnemySkillCost: int;
	ExtraEnemySkillCost: int;
	NPCSkillCost: int;
	ExtraNPCSkillCost: int;
	bulletType: BulletType;
	StartCoolTime: int;
	CoolTime: int;
	EnemyStartCoolTime: int;
	EnemyCoolTime: int;
	NPCStartCoolTime: int;
	NPCCoolTime: int;
	UseAtg: int;
	RequireCharacterLevel: int;
	RequireLevelUpMaterial: long;
	IconName: string;
	IsShowInfo: bool;
	IsShowSpeechbubble: bool;
	PublicSpeechDuration: int;
	AdditionalToolTipId: long;
	TextureSkillCardForFormConversion: string;
	SkillCardLabelPath: string;
}

table SpecialLobbyIllustExcelTable {
	DataList: [SpecialLobbyIllustExcel];
}

table SpecialLobbyIllustExcel {
	UniqueId: long;
	DevName: string;
	CharacterCostumeUniqueId: long;
	PrefabName: string;
	SlotTextureName: string;
	RewardTextureName: string;
}

table StatLevelInterpolationExcelTable {
	DataList: [StatLevelInterpolationExcel];
}

table StatLevelInterpolationExcel {
	Level: long;
	StatTypeIndex: [long];
}

table StickerGroupExcelTable {
	DataList: [StickerGroupExcel];
}

table StickerGroupExcel {
	Id: long;
	Layout: string;
	UniqueLayoutPath: string;
	StickerGroupIconpath: string;
	PageCompleteSlot: long;
	PageCompleteRewardParcelType: ParcelType;
	PageCompleteRewardParcelId: long;
	PageCompleteRewardAmount: int;
	LocalizeTitle: uint;
	LocalizeDescription: uint;
	StickerGroupCoverpath: string;
}

table StickerPageContentExcelTable {
	DataList: [StickerPageContentExcel];
}

table StickerPageContentExcel {
	Id: long;
	StickerGroupId: long;
	StickerPageId: long;
	StickerSlot: long;
	stickerGetConditionType: StickerGetConditionType;
	stickerCheckPassType: StickerCheckPassType;
	getStickerConditionType: GetStickerConditionType;
	StickerGetConditionCount: long;
	StickerGetConditionParameter: [long];
	StickerGetConditionParameterTag: [Tag];
	PackedStickerIconLocalizeEtcId: uint;
	PackedStickerIconPath: string;
	IconPath: string;
	StickerDetailPath: string;
}

table StrategyObjectBuffDefineExcelTable {
	DataList: [StrategyObjectBuffDefineExcel];
}

table StrategyObjectBuffDefineExcel {
	StrategyObjectBuffID: long;
	StrategyObjectTurn: int;
	SkillGroupId: string;
	LocalizeCodeId: uint;
	IconPath: string;
}

table StringTestExcelTable {
	DataList: [StringTestExcel];
}

table StringTestExcel {
	String: [string];
	Sentence1: string;
	Script: string;
}

table SystemMailExcelTable {
	DataList: [SystemMailExcel];
}

table SystemMailExcel {
	mailType: MailType;
	ExpiredDay: long;
	Sender: string;
	Comment: string;
}

table TacticalSupportSystemExcelTable {
	DataList: [TacticalSupportSystemExcel];
}

table TacticalSupportSystemExcel {
	Id: long;
	SummonedTime: long;
	DefaultPersonalityId: long;
	CanTargeting: bool;
	CanCover: bool;
	ObstacleUniqueName: string;
	ObstacleCoverRange: long;
	SummonSkilllGroupId: string;
	CrashObstacleOBBWidth: long;
	CrashObstacleOBBHeight: long;
	IsTSSBlockedNodeCheck: bool;
	NumberOfUses: int;
	InventoryOffsetX: float;
	InventoryOffsetY: float;
	InventoryOffsetZ: float;
	InteractionChar: long;
	CharacterInteractionStartDelay: long;
	GetOnStartEffectPath: string;
	GetOnEndEffectPath: string;
	SummonerCharacterId: long;
	InteractionFrame: int;
	TSAInteractionAddDuration: long;
	InteractionStudentExSkillGroupId: string;
	InteractionSkillCardTexture: string;
	InteractionSkillSpine: string;
	RetreatFrame: int;
	DestroyFrame: int;
}

table TacticArenaSimulatorSettingExcelTable {
	DataList: [TacticArenaSimulatorSettingExcel];
}

table TacticArenaSimulatorSettingExcel {
	Order: long;
	Repeat: long;
	AttackerFrom: ArenaSimulatorServer;
	AttackerUserArenaGroup: long;
	AttackerUserArenaRank: long;
	AttackerPresetGroupId: long;
	AttackerStrikerNum: long;
	AttackerSpecialNum: long;
	DefenderFrom: ArenaSimulatorServer;
	DefenderUserArenaGroup: long;
	DefenderUserArenaRank: long;
	DefenderPresetGroupId: long;
	DefenderStrikerNum: long;
	DefenderSpecialNum: long;
	GroundId: long;
}

table TacticDamageSimulatorSettingExcelTable {
	DataList: [TacticDamageSimulatorSettingExcel];
}

table TacticDamageSimulatorSettingExcel {
	Order: int;
	Repeat: int;
	TestPreset: long;
	TestBattleTime: long;
	StrikerSquard: long;
	SpecialSquard: long;
	ReplaceCharacterCostRegen: bool;
	ReplaceCostRegenValue: int;
	UseAutoSkill: bool;
	OverrideStreetAdaptation: TerrainAdaptationStat;
	OverrideOutdoorAdaptation: TerrainAdaptationStat;
	OverrideIndoorAdaptation: TerrainAdaptationStat;
	ApplyOverrideAdaptation: bool;
	OverrideFavorLevel: int;
	ApplyOverrideFavorLevel: bool;
	GroundId: long;
	FixedCharacter: [long];
}

table TacticEntityEffectFilterExcelTable {
	DataList: [TacticEntityEffectFilterExcel];
}

table TacticEntityEffectFilterExcel {
	TargetEffectName: string;
	ShowEffectToVehicle: bool;
	ShowEffectToBoss: bool;
}

table TacticSimulatorSettingExcelTable {
	DataList: [TacticSimulatorSettingExcel];
}

table TacticSimulatorSettingExcel {
	GroundId: long;
	GetExp: long;
	GetStarGrade: long;
	Equipment: long;
}

table TacticSkipExcelTable {
	DataList: [TacticSkipExcel];
}

table TacticSkipExcel {
	LevelDiff: int;
	HPResult: long;
}

table TacticTimeAttackSimulatorConfigExcelTable {
	DataList: [TacticTimeAttackSimulatorConfigExcel];
}

table TacticTimeAttackSimulatorConfigExcel {
	Order: long;
	Repeat: long;
	PresetGroupId: long;
	AttackStrikerNum: long;
	AttackSpecialNum: long;
	GeasId: long;
}

table TerrainAdaptationFactorExcelTable {
	DataList: [TerrainAdaptationFactorExcel];
}

table TerrainAdaptationFactorExcel {
	TerrainAdaptation: StageTopography;
	terrainAdaptationStat: TerrainAdaptationStat;
	ShotFactor: long;
	BlockFactor: long;
	AccuracyFactor: long;
	DodgeFactor: long;
	AttackPowerFactor: long;
}

table TimeAttackDungeonExcelTable {
	DataList: [TimeAttackDungeonExcel];
}

table TimeAttackDungeonExcel {
	Id: long;
	timeAttackDungeonType: TimeAttackDungeonType;
	LocalizeEtcKey: uint;
	IconPath: string;
	InformationGroupID: long;
}

table TimeAttackDungeonGeasExcelTable {
	DataList: [TimeAttackDungeonGeasExcel];
}

table TimeAttackDungeonGeasExcel {
	Id: long;
	timeAttackDungeonType: TimeAttackDungeonType;
	LocalizeEtcKey: uint;
	BattleDuration: long;
	ClearDefaultPoint: long;
	ClearTimeWeightPoint: long;
	TimeWeightConst: long;
	Difficulty: int;
	RecommandLevel: int;
	GroundId: long;
	AllyPassiveSkillId: [string];
	AllyPassiveSkillLevel: [int];
	EnemyPassiveSkillId: [string];
	EnemyPassiveSkillLevel: [int];
	GeasIconPath: [string];
	GeasLocalizeEtcKey: [uint];
}

table TimeAttackDungeonRewardExcelTable {
	DataList: [TimeAttackDungeonRewardExcel];
}

table TimeAttackDungeonRewardExcel {
	Id: long;
	RewardMaxPoint: long;
	RewardType: [TimeAttackDungeonRewardType];
	RewardMinPoint: [long];
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelDefaultAmount: [long];
	RewardParcelMaxAmount: [long];
}

table TimeAttackDungeonSeasonManageExcelTable {
	DataList: [TimeAttackDungeonSeasonManageExcel];
}

table TimeAttackDungeonSeasonManageExcel {
	Id: long;
	StartDate: string;
	EndDate: string;
	UISlot: long;
	DungeonId: long;
	DifficultyGeas: [long];
	TimeAttackDungeonRewardId: long;
	RoomLifeTimeInSeconds: long;
}

table TranscendenceRecipeExcelTable {
	DataList: [TranscendenceRecipeExcel];
}

table TranscendenceRecipeExcel {
	Id: long;
	DevName: string;
	CostCurrencyType: CurrencyTypes;
	CostCurrencyAmount: long;
	ParcelType: [ParcelType];
	ParcelId: [long];
	ParcelAmount: [int];
}

table TrophyCollectionExcelTable {
	DataList: [TrophyCollectionExcel];
}

table TrophyCollectionExcel {
	GroupId: long;
	LocalizeCodeId: uint;
	FurnitureId: [long];
}

table WeekDungeonExcelTable {
	DataList: [WeekDungeonExcel];
}

table WeekDungeonExcel {
	StageId: long;
	weekDungeonType: WeekDungeonType;
	Difficulty: int;
	BattleDuration: long;
	PrevStageId: long;
	StageEnterCostType: [ParcelType];
	StageEnterCostId: [long];
	StageEnterCostAmount: [int];
	GroundId: int;
	StarGoal: [StarGoalType];
	StarGoalAmount: [int];
	stageTopography: StageTopography;
	RecommandLevel: long;
	StageRewardId: long;
	PlayTimeLimitInSeconds: long;
	BattleRewardExp: long;
	BattleRewardPlayerExp: long;
	GroupBuffID: [long];
	echelonExtensionType: EchelonExtensionType;
}

table WeekDungeonFindGiftRewardExcelTable {
	DataList: [WeekDungeonFindGiftRewardExcel];
}

table WeekDungeonFindGiftRewardExcel {
	StageRewardId: long;
	DevName: string;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
	RewardParcelProbability: [long];
	DropItemModelPrefabPath: [string];
}

table WeekDungeonGroupBuffExcelTable {
	DataList: [WeekDungeonGroupBuffExcel];
}

table WeekDungeonGroupBuffExcel {
	WeekDungeonBuffId: long;
	school: School;
	RecommandLocalizeEtcId: uint;
	FormationLocalizeEtcId: uint;
	SkillGroupId: string;
}

table WeekDungeonOpenScheduleExcelTable {
	DataList: [WeekDungeonOpenScheduleExcel];
}

table WeekDungeonOpenScheduleExcel {
	weekDay: WeekDay;
	Open: [WeekDungeonType];
}

table WeekDungeonRewardExcelTable {
	DataList: [WeekDungeonRewardExcel];
}

table WeekDungeonRewardExcel {
	GroupId: long;
	DungeonType: WeekDungeonType;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
	RewardParcelProbability: long;
	IsDisplayed: bool;
	DropItemModelPrefabPath: string;
}

table WorldRaidBossGroupExcelTable {
	DataList: [WorldRaidBossGroupExcel];
}

table WorldRaidBossGroupExcel {
	Id: long;
	WorldRaidBossGroupId: long;
	WorldBossName: string;
	WorldBossPopupPortrait: string;
	WorldBossPopupBG: string;
	WorldBossParcelPortrait: string;
	WorldBossListParcel: string;
	WorldBossHP: long;
	UIHideBeforeSpawn: bool;
	HideAnotherBossKilled: bool;
	WorldBossClearRewardGroupId: long;
	AnotherBossKilled: [long];
	EchelonConstraintGroupId: long;
	ExclusiveOperatorBossSpawn: string;
	ExclusiveOperatorBossKill: string;
	ExclusiveOperatorScenarioBattle: string;
	ExclusiveOperatorBossDamaged: string;
	BossGroupOpenCondition: long;
}

table WorldRaidConditionExcelTable {
	DataList: [WorldRaidConditionExcel];
}

table WorldRaidConditionExcel {
	Id: long;
	LockUI: [string];
	HideWhenLocked: bool;
	AccountLevel: long;
	ScenarioModeId: [long];
	CampaignStageID: [long];
	multipleConditionCheckType: MultipleConditionCheckType;
	AfterWhenDate: string;
	WorldRaidBossKill: [long];
}

table WorldRaidFavorBuffExcelTable {
	DataList: [WorldRaidFavorBuffExcel];
}

table WorldRaidFavorBuffExcel {
	WorldRaidFavorRank: long;
	WorldRaidFavorRankBonus: long;
}

table WorldRaidSeasonManageExcelTable {
	DataList: [WorldRaidSeasonManageExcel];
}

table WorldRaidSeasonManageExcel {
	SeasonId: long;
	EventContentId: long;
	EnterTicket: CurrencyTypes;
	WorldRaidLobbyScene: string;
	WorldRaidLobbyBanner: string;
	WorldRaidLobbyBG: string;
	WorldRaidLobbyBannerShow: bool;
	SeasonOpenCondition: long;
	WorldRaidLobbyEnterScenario: long;
	CanPlayNotSeasonTime: bool;
	WorldRaidUniqueThemeLobbyUI: bool;
	WorldRaidUniqueThemeName: string;
	CanWorldRaidGemEnter: bool;
	HideWorldRaidTicketUI: bool;
	UseWorldRaidCommonToast: bool;
	OpenRaidBossGroupId: [long];
	BossSpawnTime: [string];
	EliminateTime: [string];
	ScenarioOutputConditionId: [long];
	ConditionScenarioGroupid: [long];
	WorldRaidMapEnterOperator: string;
	UseFavorRankBuff: bool;
}

table WorldRaidStageExcelTable {
	DataList: [WorldRaidStageExcel];
}

table WorldRaidStageExcel {
	Id: long;
	UseBossIndex: bool;
	UseBossAIPhaseSync: bool;
	WorldRaidBossGroupId: long;
	PortraitPath: string;
	BGPath: string;
	RaidCharacterId: long;
	BossCharacterId: [long];
	AssistCharacterLimitCount: long;
	worldRaidDifficulty: WorldRaidDifficulty;
	DifficultyOpenCondition: bool;
	RaidEnterAmount: long;
	ReEnterAmount: long;
	BattleDuration: long;
	GroundId: long;
	RaidBattleEndRewardGroupId: long;
	RaidRewardGroupId: long;
	BattleReadyTimelinePath: [string];
	BattleReadyTimelinePhaseStart: [int];
	BattleReadyTimelinePhaseEnd: [int];
	VictoryTimelinePath: string;
	PhaseChangeTimelinePath: string;
	TimeLinePhase: long;
	EnterScenarioKey: long;
	ClearScenarioKey: long;
	UseFixedEchelon: bool;
	FixedEchelonId: long;
	IsRaidScenarioBattle: bool;
	ShowSkillCard: bool;
	BossBGInfoKey: uint;
	DamageToWorldBoss: long;
	AllyPassiveSkill: [string];
	AllyPassiveSkillLevel: [int];
	SaveCurrentLocalBossHP: bool;
	echelonExtensionType: EchelonExtensionType;
}

table WorldRaidStageRewardExcelTable {
	DataList: [WorldRaidStageRewardExcel];
}

table WorldRaidStageRewardExcel {
	GroupId: long;
	IsClearStageRewardHideInfo: bool;
	ClearStageRewardProb: long;
	ClearStageRewardParcelType: ParcelType;
	ClearStageRewardParcelUniqueID: long;
	ClearStageRewardParcelUniqueName: string;
	ClearStageRewardAmount: long;
}

table AudioAnimatorExcel {
	ControllerNameHash: uint;
	VoiceNamePrefix: string;
	StateNameHash: uint;
	StateName: string;
	IgnoreInterruptDelay: bool;
	IgnoreInterruptPlay: bool;
	Volume: float;
	Delay: float;
	RandomPitchMin: int;
	RandomPitchMax: int;
	AudioPriority: int;
	AudioClipPath: [string];
	VoiceHash: [uint];
}

table BGMExcel {
	Id: long;
	Nation: [Nation];
	Path: [string];
	Volume: [float];
	LoopStartTime: [float];
	LoopEndTime: [float];
	LoopTranstionTime: [float];
	LoopOffsetTime: [float];
}

table BGMRaidExcel {
	StageId: long;
	PhaseIndex: long;
	BGMId: long;
}

table BGMUIExcel {
	UIPrefab: uint;
	BGMId: long;
	BGMId2nd: long;
	BGMId3rd: long;
	EventContentId: long;
}

table CameraExcel {
	UniqueId: long;
	MinDistance: float;
	MaxDistance: float;
	RotationX: float;
	RotationY: float;
	MoveInstantly: bool;
	MoveInstantlyRotationSave: bool;
	LeftMargin: float;
	BottomMargin: float;
	IgnoreEnemies: bool;
	UseRailPointCompensation: bool;
}

table CharacterDialogEventExcel {
	CostumeUniqueId: long;
	OriginalCharacterId: long;
	DisplayOrder: long;
	EventID: long;
	productionStep: ProductionStep;
	dialogCategory: DialogCategory;
	dialogCondition: DialogCondition;
	dialogConditionDetail: DialogConditionDetail;
	DialogConditionDetailValue: long;
	GroupId: long;
	dialogType: DialogType;
	ActionName: string;
	Duration: long;
	AnimationName: string;
	LocalizeKR: string;
	LocalizeJP: string;
	VoiceId: [uint];
	CollectionVisible: bool;
	cVCollectionType: CVCollectionType;
	UnlockEventSeason: long;
	ScenarioGroupId: long;
	LocalizeCVGroup: string;
}

table CharacterDialogExcel {
	CharacterId: long;
	CostumeUniqueId: long;
	DisplayOrder: long;
	productionStep: ProductionStep;
	dialogCategory: DialogCategory;
	dialogCondition: DialogCondition;
	anniversary: Anniversary;
	StartDate: string;
	EndDate: string;
	GroupId: long;
	dialogType: DialogType;
	ActionName: string;
	Duration: long;
	AnimationName: string;
	LocalizeKR: string;
	LocalizeJP: string;
	VoiceId: [uint];
	ApplyPosition: bool;
	PosX: float;
	PosY: float;
	CollectionVisible: bool;
	cVCollectionType: CVCollectionType;
	UnlockFavorRank: long;
	UnlockEquipWeapon: bool;
	LocalizeCVGroup: string;
}

table CharacterPotentialExcel {
	Id: long;
	PotentialStatGroupId: long;
	potentialStatBonusRateType: PotentialStatBonusRateType;
	IsUnnecessaryStat: bool;
}

table CharacterPotentialRewardExcel {
	Id: long;
	RequirePotentialStatType: [PotentialStatBonusRateType];
	RequirePotentialStatLevel: [long];
	RewardParcelType: ParcelType;
	RewardId: long;
	RewardAmount: int;
}

table CharacterPotentialStatExcel {
	PotentialStatGroupId: long;
	PotentialLevel: int;
	RecipeId: long;
	StatBonusRate: long;
}

table CharacterVoiceExcel {
	CharacterVoiceUniqueId: long;
	CharacterVoiceGroupId: long;
	VoiceHash: uint;
	OnlyOne: bool;
	Priority: int;
	DisplayOrder: long;
	CollectionVisible: bool;
	cVCollectionType: CVCollectionType;
	UnlockFavorRank: long;
	LocalizeCVGroup: string;
	Nation: [Nation];
	Volume: [float];
	Delay: [float];
	Path: [string];
}

table ClanChattingEmojiExcel {
	Id: long;
	TabGroupId: int;
	DisplayOrder: int;
	ImagePathKr: string;
	ImagePathJp: string;
}

table CombatEmojiExcel {
	UniqueId: long;
	emojiEvent: EmojiEvent;
	OrderOfPriority: int;
	EmojiDuration: bool;
	EmojiReversal: bool;
	EmojiTurnOn: bool;
	ShowEmojiDelay: int;
	ShowDefaultBG: bool;
}

table ContentsScenarioExcel {
	Id: uint;
	LocalizeId: uint;
	DisplayOrder: int;
	scenarioContentType: ScenarioContentType;
	ScenarioGroupId: [long];
}

table ContentsShortcutExcel {
	UniqueId: long;
	contentType: ContentType;
	EventContentId: long;
	ScenarioModeVolume: long;
	ScenarioModeChapter: long;
	ShortcutOpenTime: string;
	ShortcutCloseTime: string;
	ConditionContentId: long;
	ConquestMapDifficulty: StageDifficulty;
	ConquestStepIndex: int;
	ShortcutContentId: long;
	ShortcutUIName: [string];
	Localize: string;
}

table EventContentNotifyExcel {
	Id: int;
	LocalizeEtcId: uint;
	IconPath: string;
	eventNotifyType: EventNotifyType;
	eventTargetType: EventTargetType;
	ShortcutEventTargetType: EventTargetType;
	IsShortcutEnable: bool;
}

table EventContentTreasureCellRewardExcel {
	Id: long;
	LocalizeCodeID: string;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table EventContentTreasureExcel {
	EventContentId: long;
	TitleLocalize: string;
	LoopRound: int;
	UsePrefabName: string;
	TreasureBGImagePath: string;
}

table EventContentTreasureRewardExcel {
	Id: long;
	LocalizeCodeID: string;
	CellUnderImageWidth: int;
	CellUnderImageHeight: int;
	HiddenImage: bool;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
	CellUnderImagePath: string;
	TreasureSmallImagePath: string;
}

table EventContentTreasureRoundExcel {
	EventContentId: long;
	TreasureRound: int;
	TreasureRoundSize: [int];
	CellVisualSortUnstructed: bool;
	CellCheckGoodsId: long;
	CellRewardId: long;
	RewardID: [long];
	RewardAmount: [int];
	TreasureCellImagePath: string;
}

table IdCardBackgroundExcel {
	Id: long;
	rarity: Rarity;
	DisplayOrder: long;
	CollectionVisible: bool;
	IsDefault: bool;
	BgPath: string;
	LocalizeEtcId: uint;
	Icon: string;
}

table InformationExcel {
	GroupID: long;
	PageName: string;
	LocalizeCodeId: string;
	TutorialParentName: [string];
	UIName: [string];
}

table LoadingImageExcel {
	ID: long;
	ImagePathKr: string;
	ImagePathJp: string;
	DisplayWeight: int;
}

table LocalizeCharProfileChangeExcel {
	CharacterId: long;
	ScenarioModeId: long;
	ChangeCharacterID: long;
}

table LocalizeErrorExcel {
	Key: uint;
	ErrorLevel: WebAPIErrorLevel;
	Kr: string;
	Jp: string;
}

table LocalizeExcel {
	Key: uint;
	Kr: string;
	Jp: string;
}

table LocalizeSkillExcel {
	Key: uint;
	NameKr: string;
	DescriptionKr: string;
	SkillInvokeLocalizeKr: string;
	NameJp: string;
	DescriptionJp: string;
	SkillInvokeLocalizeJp: string;
}

table MemoryLobbyExcel {
	Id: long;
	productionStep: ProductionStep;
	LocalizeEtcId: uint;
	CharacterId: long;
	PrefabName: string;
	memoryLobbyCategory: MemoryLobbyCategory;
	SlotTextureName: string;
	RewardTextureName: string;
	BGMId: long;
	AudioClipJp: string;
	AudioClipKr: string;
}

table MessagePopupExcel {
	StringId: uint;
	messagePopupLayout: MessagePopupLayout;
	OrderType: MessagePopupImagePositionType;
	Image: string;
	TitleText: uint;
	SubTitleText: uint;
	MessageText: uint;
	ConditionText: [uint];
	DisplayXButton: bool;
	Button: [MessagePopupButtonType];
	ButtonText: [uint];
	ButtonCommand: [string];
	ButtonParameter: [string];
}

table MiniGameDreamCollectionScenarioExcel {
	Id: long;
	IsSkip: bool;
	EventContentId: long;
	Parameter: [DreamMakerParameterType];
	ParameterAmount: [long];
	ScenarioGroupId: long;
}

table MiniGameDreamDailyPointExcel {
	UniqueId: long;
	EventContentId: long;
	TotalParameterMin: long;
	TotalParameterMax: long;
	DailyPointCoefficient: long;
	DailyPointCorrectionValue: long;
}

table MiniGameDreamEndingExcel {
	EventContentId: long;
	EndingId: long;
	dreamMakerEndingType: DreamMakerEndingType;
	Order: int;
	ScenarioGroupId: long;
	EndingCondition: [DreamMakerEndingCondition];
	EndingConditionValue: [long];
}

table MiniGameDreamEndingRewardExcel {
	EventContentId: long;
	EndingId: long;
	LocalizeEtcId: uint;
	dreamMakerEndingRewardType: DreamMakerEndingRewardType;
	dreamMakerEndingType: DreamMakerEndingType;
	RewardParcelType: [ParcelType];
	RewardParcelId: [long];
	RewardParcelAmount: [long];
}

table MiniGameDreamInfoExcel {
	EventContentId: long;
	dreamMakerMultiplierCondition: DreamMakerMultiplierCondition;
	DreamMakerMultiplierConditionValue: long;
	DreamMakerMultiplierMax: long;
	DreamMakerDays: long;
	DreamMakerActionPoint: long;
	DreamMakerParcelType: ParcelType;
	DreamMakerParcelId: long;
	DreamMakerDailyPointParcelType: ParcelType;
	DreamMakerDailyPointId: long;
	DreamMakerParameterTransfer: long;
	ScheduleCostGoodsId: long;
	LobbyBGMChangeScenarioId: long;
}

table MiniGameDreamParameterExcel {
	Id: long;
	EventContentId: long;
	ParameterType: DreamMakerParameterType;
	LocalizeEtcId: uint;
	IconPath: string;
	ParameterBase: long;
	ParameterBaseMax: long;
	ParameterMin: long;
	ParameterMax: long;
}

table MiniGameDreamReplayScenarioExcel {
	EventContentId: long;
	ScenarioGroupId: long;
	Order: long;
	ReplaySummaryTitleLocalize: uint;
	ReplaySummaryLocalizeScenarioId: uint;
	ReplayScenarioResource: string;
	IsReplayScenarioHorizon: bool;
}

table MiniGameDreamScheduleExcel {
	EventContentId: long;
	DreamMakerScheduleGroupId: long;
	DisplayOrder: long;
	LocalizeEtcId: uint;
	IconPath: string;
	LoadingResource01: string;
	LoadingResource02: string;
	AnimationName: string;
}

table MiniGameDreamScheduleResultExcel {
	Id: long;
	EventContentId: long;
	dreamMakerResult: DreamMakerResult;
	DreamMakerScheduleGroup: long;
	Prob: int;
	RewardParameter: [DreamMakerParameterType];
	RewardParameterOperationType: [DreamMakerParamOperationType];
	RewardParameterAmount: [long];
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: long;
}

table MiniGameDreamTimelineExcel {
	Id: long;
	EventContentId: long;
	GroupId: long;
	DreamMakerDays: long;
	DreamMakerActionPoint: long;
	EnterScenarioGroupId: long;
	Bgm: long;
	ArtLevelPath: string;
	DesignLevelPath: string;
}

table MinigameDreamVoiceExcel {
	EventContentId: long;
	UniqueId: long;
	VoiceCondition: DreamMakerVoiceCondition;
	VoiceClip: uint;
}

table MissionEmergencyCompleteExcel {
	MissionId: long;
	EmergencyComplete: bool;
}

table MultiFloorRaidRewardExcel {
	RewardGroupId: long;
	ClearStageRewardProb: long;
	ClearStageRewardParcelType: ParcelType;
	ClearStageRewardParcelUniqueID: long;
	ClearStageRewardAmount: long;
}

table MultiFloorRaidSeasonManageExcel {
	SeasonId: long;
	LobbyEnterScenario: uint;
	ShowLobbyBanner: bool;
	SeasonStartDate: string;
	SeasonEndDate: string;
	SettlementEndDate: string;
	OpenRaidBossGroupId: string;
	EnterScenarioKey: uint;
	LobbyImgPath: string;
	LevelImgPath: string;
}

table MultiFloorRaidStageExcel {
	Id: long;
	echelonExtensionType: EchelonExtensionType;
	BossGroupId: string;
	AssistSlot: int;
	StageOpenCondition: long;
	FloorListSection: bool;
	FloorListSectionOpenCondition: long;
	FloorListSectionLabel: uint;
	Difficulty: int;
	UseBossIndex: bool;
	UseBossAIPhaseSync: bool;
	FloorListImgPath: string;
	FloorImgPath: string;
	RaidCharacterId: long;
	BossCharacterId: [long];
	StatChangeId: [long];
	BattleDuration: long;
	GroundId: long;
	RecommendLevel: long;
	RewardGroupId: long;
	BattleReadyTimelinePath: [string];
	BattleReadyTimelinePhaseStart: [int];
	BattleReadyTimelinePhaseEnd: [int];
	VictoryTimelinePath: string;
	ShowSkillCard: bool;
}

table MultiFloorRaidStatChangeExcel {
	StatChangeId: long;
	StatType: [StatType];
	StatAdd: [long];
	StatMultiply: [long];
	ApplyCharacterId: [long];
}

table OperatorExcel {
	UniqueId: long;
	GroupId: string;
	operatorCondition: OperatorCondition;
	OutputSequence: int;
	RandomWeight: int;
	OutputDelay: int;
	Duration: int;
	OperatorOutputPriority: int;
	PortraitPath: string;
	TextLocalizeKey: string;
	VoiceId: [uint];
	OperatorWaitQueue: bool;
}

table ScenarioBGEffectExcel {
	Name: uint;
	Effect: string;
	Scroll: ScenarioBGScroll;
	ScrollTime: long;
	ScrollFrom: long;
	ScrollTo: long;
}

table ScenarioBGNameExcel {
	Name: uint;
	productionStep: ProductionStep;
	BGFileName: string;
	BGType: ScenarioBGType;
	AnimationRoot: string;
	AnimationName: string;
	SpineScale: float;
	SpineLocalPosX: int;
	SpineLocalPosY: int;
}

table ScenarioCharacterEmotionExcel {
	EmoticonName: string;
	Name: uint;
}

table ScenarioCharacterNameExcel {
	CharacterName: uint;
	productionStep: ProductionStep;
	NameKR: string;
	NicknameKR: string;
	NameJP: string;
	NicknameJP: string;
	Shape: ScenarioCharacterShapes;
	SpinePrefabName: string;
	SmallPortrait: string;
}

table ScenarioCharacterSituationSetExcel {
	Name: uint;
	Face: string;
	Behavior: string;
	Action: string;
	Shape: string;
	Effect: uint;
	Emotion: uint;
}

table ScenarioContentCollectionExcel {
	Id: long;
	GroupId: long;
	UnlockConditionType: CollectionUnlockType;
	UnlockConditionParameter: [long];
	multipleConditionCheckType: MultipleConditionCheckType;
	UnlockConditionCount: long;
	IsObject: bool;
	IsHorizon: bool;
	EmblemResource: string;
	ThumbResource: string;
	FullResource: string;
	LocalizeEtcId: uint;
	SubNameLocalizeCodeId: string;
}

table ScenarioEffectExcel {
	EffectName: string;
	Name: uint;
}

table ScenarioModeExcel {
	ModeId: long;
	ModeType: ScenarioModeTypes;
	SubType: ScenarioModeSubTypes;
	VolumeId: long;
	ChapterId: long;
	EpisodeId: long;
	Hide: bool;
	Open: bool;
	IsContinue: bool;
	EpisodeContinueModeId: long;
	FrontScenarioGroupId: [long];
	StrategyId: long;
	GroundId: long;
	IsDefeatBattle: bool;
	BattleDuration: long;
	BackScenarioGroupId: [long];
	ClearedModeId: [long];
	ScenarioModeRewardId: long;
	IsScenarioSpecialReward: bool;
	AccountLevelLimit: long;
	ClearedStageId: long;
	NeedClub: Club;
	NeedClubStudentCount: int;
	EventContentId: long;
	eventContentType: EventContentType;
	EventContentCondition: long;
	EventContentConditionGroup: long;
	MapDifficulty: StageDifficulty;
	StepIndex: int;
	RecommendLevel: int;
	EventIconParcelPath: string;
	EventBannerTitle: uint;
	Lof: bool;
	stageTopography: StageTopography;
	FixedEchelonId: long;
	CompleteReportEventName: string;
	echelonExtensionType: EchelonExtensionType;
	CollectionGroupId: long;
}

table ScenarioModeRewardExcel {
	ScenarioModeRewardId: long;
	rewardTag: RewardTag;
	RewardProb: int;
	RewardParcelType: ParcelType;
	RewardParcelId: long;
	RewardParcelAmount: int;
	IsDisplayed: bool;
}

table ScenarioResourceInfoExcel {
	Id: long;
	ScenarioModeId: long;
	VideoId: long;
	BgmId: long;
	AudioName: string;
	SpinePath: string;
	Ratio: int;
	LobbyAniPath: string;
	MovieCGPath: string;
	LocalizeId: uint;
}

table ScenarioScriptExcel {
	GroupId: long;
	SelectionGroup: long;
	BGMId: long;
	Sound: string;
	Transition: uint;
	BGName: uint;
	BGEffect: uint;
	PopupFileName: string;
	ScriptKr: string;
	TextJp: string;
	VoiceId: uint;
}

table ScenarioTransitionExcel {
	Name: uint;
	TransitionOut: string;
	TransitionOutDuration: long;
	TransitionOutResource: string;
	TransitionIn: string;
	TransitionInDuration: long;
	TransitionInResource: string;
}

table ServiceActionExcel {
	serviceActionType: ServiceActionType;
	IsLegacy: bool;
	GoodsId: long;
}

table ShortcutTypeExcel {
	Id: long;
	IsAscending: bool;
	ContentType: [ShortcutContentType];
}

table SkillAdditionalTooltipExcel {
	GroupId: long;
	AdditionalSkillGroupId: string;
	ShowSkillSlot: string;
}

table SoundUIExcel {
	ID: long;
	SoundUniqueId: string;
	Path: string;
}

table SpineLipsyncExcel {
	VoiceId: uint;
	AnimJson: string;
}

table StageFileRefreshSettingExcel {
	GroundId: long;
	ForceSave: bool;
}

table StoryStrategyExcel {
	Id: long;
	Name: string;
	Localize: string;
	StageEnterEchelonCount: int;
	BattleDuration: long;
	WhiteListId: long;
	StrategyMap: string;
	StrategyMapBG: string;
	MaxTurn: int;
	stageTopography: StageTopography;
	strategyEnvironment: StrategyEnvironment;
	contentType: ContentType;
	BGMId: long;
	FirstClearReportEventName: string;
}

table ToastExcel {
	Id: uint;
	toastType: ToastType;
	MissionId: uint;
	TextId: uint;
	LifeTime: long;
}

table TutorialCharacterDialogExcel {
	TalkId: long;
	AnimationName: string;
	LocalizeKR: string;
	LocalizeJP: string;
	VoiceId: uint;
}

table TutorialExcel {
	ID: long;
	CompletionReportEventName: string;
	CompulsoryTutorial: bool;
	DescriptionTutorial: bool;
	TutorialStageId: long;
	UIName: [string];
	TutorialParentName: [string];
}

table TutorialFailureImageExcel {
	Id: long;
	Contents: TutorialFailureContentType;
	Type: string;
	ImagePathKr: string;
	ImagePathJp: string;
}

table VideoExcel {
	Id: long;
	Nation: [Nation];
	VideoPath: [string];
	SoundPath: [string];
	SoundVolume: [float];
}

table VoiceCommonExcel {
	voiceEvent: VoiceEvent;
	Rate: long;
	VoiceHash: [uint];
}

table VoiceExcel {
	UniqueId: long;
	Id: uint;
	Nation: [Nation];
	Path: [string];
	Volume: [float];
}

table VoiceLogicEffectExcel {
	LogicEffectNameHash: uint;
	Self: bool;
	Priority: int;
	VoiceHash: [uint];
	VoiceId: uint;
}

table VoiceRoomExceptionExcel {
	CostumeUniqueId: long;
	LinkedCharacterVoicePrintType: CVPrintType;
	LinkedCostumeUniqueId: long;
}

table VoiceSpineExcel {
	UniqueId: long;
	Id: uint;
	Nation: [Nation];
	Path: [string];
	SoundVolume: [float];
}

table VoiceTimelineExcel {
	UniqueId: long;
	Id: uint;
	Nation: [Nation];
	Path: [string];
	SoundVolume: [float];
}

