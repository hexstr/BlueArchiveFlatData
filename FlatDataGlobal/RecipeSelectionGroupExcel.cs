// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RecipeSelectionGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static RecipeSelectionGroupExcel GetRootAsRecipeSelectionGroupExcel(ByteBuffer _bb) { return GetRootAsRecipeSelectionGroupExcel(_bb, new RecipeSelectionGroupExcel()); }
  public static RecipeSelectionGroupExcel GetRootAsRecipeSelectionGroupExcel(ByteBuffer _bb, RecipeSelectionGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RecipeSelectionGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RecipeSelectionGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RecipeSelectionGroupComponentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType Parceltype { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long ParcelId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ResultAmountMin { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ResultAmountMax { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.RecipeSelectionGroupExcel> CreateRecipeSelectionGroupExcel(FlatBufferBuilder builder,
      long RecipeSelectionGroupId = 0,
      long RecipeSelectionGroupComponentId = 0,
      FlatDataGlobal.ParcelType parceltype = FlatDataGlobal.ParcelType.None,
      long ParcelId = 0,
      long ResultAmountMin = 0,
      long ResultAmountMax = 0) {
    builder.StartTable(6);
    RecipeSelectionGroupExcel.AddResultAmountMax(builder, ResultAmountMax);
    RecipeSelectionGroupExcel.AddResultAmountMin(builder, ResultAmountMin);
    RecipeSelectionGroupExcel.AddParcelId(builder, ParcelId);
    RecipeSelectionGroupExcel.AddRecipeSelectionGroupComponentId(builder, RecipeSelectionGroupComponentId);
    RecipeSelectionGroupExcel.AddRecipeSelectionGroupId(builder, RecipeSelectionGroupId);
    RecipeSelectionGroupExcel.AddParceltype(builder, parceltype);
    return RecipeSelectionGroupExcel.EndRecipeSelectionGroupExcel(builder);
  }

  public static void StartRecipeSelectionGroupExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddRecipeSelectionGroupId(FlatBufferBuilder builder, long RecipeSelectionGroupId) { builder.AddLong(0, RecipeSelectionGroupId, 0); }
  public static void AddRecipeSelectionGroupComponentId(FlatBufferBuilder builder, long RecipeSelectionGroupComponentId) { builder.AddLong(1, RecipeSelectionGroupComponentId, 0); }
  public static void AddParceltype(FlatBufferBuilder builder, FlatDataGlobal.ParcelType parceltype) { builder.AddInt(2, (int)parceltype, 0); }
  public static void AddParcelId(FlatBufferBuilder builder, long ParcelId) { builder.AddLong(3, ParcelId, 0); }
  public static void AddResultAmountMin(FlatBufferBuilder builder, long ResultAmountMin) { builder.AddLong(4, ResultAmountMin, 0); }
  public static void AddResultAmountMax(FlatBufferBuilder builder, long ResultAmountMax) { builder.AddLong(5, ResultAmountMax, 0); }
  public static Offset<FlatDataGlobal.RecipeSelectionGroupExcel> EndRecipeSelectionGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.RecipeSelectionGroupExcel>(o);
  }
}


}
