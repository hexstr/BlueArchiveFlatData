// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GachaGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static GachaGroupExcel GetRootAsGachaGroupExcel(ByteBuffer _bb) { return GetRootAsGachaGroupExcel(_bb, new GachaGroupExcel()); }
  public static GachaGroupExcel GetRootAsGachaGroupExcel(ByteBuffer _bb, GachaGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string NameKr { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameKrBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameKrBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameKrArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsRecursive { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FlatDataGlobal.GachaGroupType GroupType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.GachaGroupType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.GachaGroupType.None; } }

  public static Offset<FlatDataGlobal.GachaGroupExcel> CreateGachaGroupExcel(FlatBufferBuilder builder,
      long ID = 0,
      StringOffset NameKrOffset = default(StringOffset),
      bool IsRecursive = false,
      FlatDataGlobal.GachaGroupType GroupType = FlatDataGlobal.GachaGroupType.None) {
    builder.StartTable(4);
    GachaGroupExcel.AddID(builder, ID);
    GachaGroupExcel.AddGroupType(builder, GroupType);
    GachaGroupExcel.AddNameKr(builder, NameKrOffset);
    GachaGroupExcel.AddIsRecursive(builder, IsRecursive);
    return GachaGroupExcel.EndGachaGroupExcel(builder);
  }

  public static void StartGachaGroupExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddID(FlatBufferBuilder builder, long ID) { builder.AddLong(0, ID, 0); }
  public static void AddNameKr(FlatBufferBuilder builder, StringOffset NameKrOffset) { builder.AddOffset(1, NameKrOffset.Value, 0); }
  public static void AddIsRecursive(FlatBufferBuilder builder, bool IsRecursive) { builder.AddBool(2, IsRecursive, false); }
  public static void AddGroupType(FlatBufferBuilder builder, FlatDataGlobal.GachaGroupType GroupType) { builder.AddInt(3, (int)GroupType, 0); }
  public static Offset<FlatDataGlobal.GachaGroupExcel> EndGachaGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.GachaGroupExcel>(o);
  }
}


}
