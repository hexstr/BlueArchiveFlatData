// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameTBGItemExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameTBGItemExcel GetRootAsMinigameTBGItemExcel(ByteBuffer _bb) { return GetRootAsMinigameTBGItemExcel(_bb, new MinigameTBGItemExcel()); }
  public static MinigameTBGItemExcel GetRootAsMinigameTBGItemExcel(ByteBuffer _bb, MinigameTBGItemExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameTBGItemExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.TBGItemType ItemType { get { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.TBGItemType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.TBGItemType.None; } }
  public FlatDataGlobal.TBGItemEffectType TBGItemEffectType { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.TBGItemEffectType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.TBGItemEffectType.None; } }
  public int ItemParameter { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LocalizeETCId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeETCIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLocalizeETCIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLocalizeETCIdArray() { return __p.__vector_as_array<byte>(12); }
  public string Icon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(14); }
  public string BuffIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBuffIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBuffIconArray() { return __p.__vector_as_array<byte>(16); }
  public int EncounterCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DiceEffectAniClip { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiceEffectAniClipBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDiceEffectAniClipBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDiceEffectAniClipArray() { return __p.__vector_as_array<byte>(20); }
  public bool BuffIconHUDVisible { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.MinigameTBGItemExcel> CreateMinigameTBGItemExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      FlatDataGlobal.TBGItemType ItemType = FlatDataGlobal.TBGItemType.None,
      FlatDataGlobal.TBGItemEffectType tBGItemEffectType = FlatDataGlobal.TBGItemEffectType.None,
      int ItemParameter = 0,
      StringOffset LocalizeETCIdOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset BuffIconOffset = default(StringOffset),
      int EncounterCount = 0,
      StringOffset DiceEffectAniClipOffset = default(StringOffset),
      bool BuffIconHUDVisible = false) {
    builder.StartTable(10);
    MinigameTBGItemExcel.AddUniqueId(builder, UniqueId);
    MinigameTBGItemExcel.AddDiceEffectAniClip(builder, DiceEffectAniClipOffset);
    MinigameTBGItemExcel.AddEncounterCount(builder, EncounterCount);
    MinigameTBGItemExcel.AddBuffIcon(builder, BuffIconOffset);
    MinigameTBGItemExcel.AddIcon(builder, IconOffset);
    MinigameTBGItemExcel.AddLocalizeETCId(builder, LocalizeETCIdOffset);
    MinigameTBGItemExcel.AddItemParameter(builder, ItemParameter);
    MinigameTBGItemExcel.AddTBGItemEffectType(builder, tBGItemEffectType);
    MinigameTBGItemExcel.AddItemType(builder, ItemType);
    MinigameTBGItemExcel.AddBuffIconHUDVisible(builder, BuffIconHUDVisible);
    return MinigameTBGItemExcel.EndMinigameTBGItemExcel(builder);
  }

  public static void StartMinigameTBGItemExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddItemType(FlatBufferBuilder builder, FlatDataGlobal.TBGItemType ItemType) { builder.AddInt(1, (int)ItemType, 0); }
  public static void AddTBGItemEffectType(FlatBufferBuilder builder, FlatDataGlobal.TBGItemEffectType tBGItemEffectType) { builder.AddInt(2, (int)tBGItemEffectType, 0); }
  public static void AddItemParameter(FlatBufferBuilder builder, int ItemParameter) { builder.AddInt(3, ItemParameter, 0); }
  public static void AddLocalizeETCId(FlatBufferBuilder builder, StringOffset LocalizeETCIdOffset) { builder.AddOffset(4, LocalizeETCIdOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(5, IconOffset.Value, 0); }
  public static void AddBuffIcon(FlatBufferBuilder builder, StringOffset BuffIconOffset) { builder.AddOffset(6, BuffIconOffset.Value, 0); }
  public static void AddEncounterCount(FlatBufferBuilder builder, int EncounterCount) { builder.AddInt(7, EncounterCount, 0); }
  public static void AddDiceEffectAniClip(FlatBufferBuilder builder, StringOffset DiceEffectAniClipOffset) { builder.AddOffset(8, DiceEffectAniClipOffset.Value, 0); }
  public static void AddBuffIconHUDVisible(FlatBufferBuilder builder, bool BuffIconHUDVisible) { builder.AddBool(9, BuffIconHUDVisible, false); }
  public static Offset<FlatDataGlobal.MinigameTBGItemExcel> EndMinigameTBGItemExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MinigameTBGItemExcel>(o);
  }
}


}
