// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EquipmentGearExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static EquipmentGearExcel GetRootAsEquipmentGearExcel(ByteBuffer _bb) { return GetRootAsEquipmentGearExcel(_bb, new EquipmentGearExcel()); }
  public static EquipmentGearExcel GetRootAsEquipmentGearExcel(ByteBuffer _bb, EquipmentGearExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EquipmentGearExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.StatLevelUpType Statleveluptype { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.StatLevelUpType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StatLevelUpType.Standard; } }
  public long Tier { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NextTierEquipment { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RecipeId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenFavorLevel { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxLevel { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PreviousSkillGroupId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AfterSkillGroupId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.StatType Stattype { get { int o = __p.__offset(24); return o != 0 ? (FlatDataGlobal.StatType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StatType.None; } }
  public FlatDataGlobal.Tag Tags(int j) { int o = __p.__offset(26); return o != 0 ? (FlatDataGlobal.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.Tag)0; }
  public int TagsLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.Tag> GetTagsBytes() { return __p.__vector_as_span<FlatDataGlobal.Tag>(26, 4); }
#else
  public ArraySegment<byte>? GetTagsBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public FlatDataGlobal.Tag[] GetTagsArray() { int o = __p.__offset(26); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.Tag[] a = new FlatDataGlobal.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public long MinStatValue { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxStatValue { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Icon { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(32); }
  public string LocalizeEtcId { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeEtcIdBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetLocalizeEtcIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetLocalizeEtcIdArray() { return __p.__vector_as_array<byte>(34); }

  public static Offset<FlatDataGlobal.EquipmentGearExcel> CreateEquipmentGearExcel(FlatBufferBuilder builder,
      long Id = 0,
      long CharacterId = 0,
      FlatDataGlobal.StatLevelUpType statleveluptype = FlatDataGlobal.StatLevelUpType.Standard,
      long Tier = 0,
      long NextTierEquipment = 0,
      long RecipeId = 0,
      long OpenFavorLevel = 0,
      long MaxLevel = 0,
      long PreviousSkillGroupId = 0,
      long AfterSkillGroupId = 0,
      FlatDataGlobal.StatType stattype = FlatDataGlobal.StatType.None,
      VectorOffset TagsOffset = default(VectorOffset),
      long MinStatValue = 0,
      long MaxStatValue = 0,
      StringOffset IconOffset = default(StringOffset),
      StringOffset LocalizeEtcIdOffset = default(StringOffset)) {
    builder.StartTable(16);
    EquipmentGearExcel.AddMaxStatValue(builder, MaxStatValue);
    EquipmentGearExcel.AddMinStatValue(builder, MinStatValue);
    EquipmentGearExcel.AddAfterSkillGroupId(builder, AfterSkillGroupId);
    EquipmentGearExcel.AddPreviousSkillGroupId(builder, PreviousSkillGroupId);
    EquipmentGearExcel.AddMaxLevel(builder, MaxLevel);
    EquipmentGearExcel.AddOpenFavorLevel(builder, OpenFavorLevel);
    EquipmentGearExcel.AddRecipeId(builder, RecipeId);
    EquipmentGearExcel.AddNextTierEquipment(builder, NextTierEquipment);
    EquipmentGearExcel.AddTier(builder, Tier);
    EquipmentGearExcel.AddCharacterId(builder, CharacterId);
    EquipmentGearExcel.AddId(builder, Id);
    EquipmentGearExcel.AddLocalizeEtcId(builder, LocalizeEtcIdOffset);
    EquipmentGearExcel.AddIcon(builder, IconOffset);
    EquipmentGearExcel.AddTags(builder, TagsOffset);
    EquipmentGearExcel.AddStattype(builder, stattype);
    EquipmentGearExcel.AddStatleveluptype(builder, statleveluptype);
    return EquipmentGearExcel.EndEquipmentGearExcel(builder);
  }

  public static void StartEquipmentGearExcel(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long CharacterId) { builder.AddLong(1, CharacterId, 0); }
  public static void AddStatleveluptype(FlatBufferBuilder builder, FlatDataGlobal.StatLevelUpType statleveluptype) { builder.AddInt(2, (int)statleveluptype, 0); }
  public static void AddTier(FlatBufferBuilder builder, long Tier) { builder.AddLong(3, Tier, 0); }
  public static void AddNextTierEquipment(FlatBufferBuilder builder, long NextTierEquipment) { builder.AddLong(4, NextTierEquipment, 0); }
  public static void AddRecipeId(FlatBufferBuilder builder, long RecipeId) { builder.AddLong(5, RecipeId, 0); }
  public static void AddOpenFavorLevel(FlatBufferBuilder builder, long OpenFavorLevel) { builder.AddLong(6, OpenFavorLevel, 0); }
  public static void AddMaxLevel(FlatBufferBuilder builder, long MaxLevel) { builder.AddLong(7, MaxLevel, 0); }
  public static void AddPreviousSkillGroupId(FlatBufferBuilder builder, long PreviousSkillGroupId) { builder.AddLong(8, PreviousSkillGroupId, 0); }
  public static void AddAfterSkillGroupId(FlatBufferBuilder builder, long AfterSkillGroupId) { builder.AddLong(9, AfterSkillGroupId, 0); }
  public static void AddStattype(FlatBufferBuilder builder, FlatDataGlobal.StatType stattype) { builder.AddInt(10, (int)stattype, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset TagsOffset) { builder.AddOffset(11, TagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMinStatValue(FlatBufferBuilder builder, long MinStatValue) { builder.AddLong(12, MinStatValue, 0); }
  public static void AddMaxStatValue(FlatBufferBuilder builder, long MaxStatValue) { builder.AddLong(13, MaxStatValue, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(14, IconOffset.Value, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, StringOffset LocalizeEtcIdOffset) { builder.AddOffset(15, LocalizeEtcIdOffset.Value, 0); }
  public static Offset<FlatDataGlobal.EquipmentGearExcel> EndEquipmentGearExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.EquipmentGearExcel>(o);
  }
}


}
