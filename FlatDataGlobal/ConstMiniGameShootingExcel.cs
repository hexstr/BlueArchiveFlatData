// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConstMiniGameShootingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ConstMiniGameShootingExcel GetRootAsConstMiniGameShootingExcel(ByteBuffer _bb) { return GetRootAsConstMiniGameShootingExcel(_bb, new ConstMiniGameShootingExcel()); }
  public static ConstMiniGameShootingExcel GetRootAsConstMiniGameShootingExcel(ByteBuffer _bb, ConstMiniGameShootingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstMiniGameShootingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NormalStageId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int NormalSectionCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long HardStageId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int HardSectionCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long FreeStageId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int FreeSectionCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PlayerCharacterId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int PlayerCharacterIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetPlayerCharacterIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetPlayerCharacterIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetPlayerCharacterIdArray() { return __p.__vector_as_array<long>(16); }
  public long HiddenPlayerCharacterId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float CameraSmoothTime { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string SpawnEffectPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpawnEffectPathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSpawnEffectPathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSpawnEffectPathArray() { return __p.__vector_as_array<byte>(22); }
  public float WaitTimeAfterSpawn { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int FreeGearInterval { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatDataGlobal.ConstMiniGameShootingExcel> CreateConstMiniGameShootingExcel(FlatBufferBuilder builder,
      long NormalStageId = 0,
      int NormalSectionCount = 0,
      long HardStageId = 0,
      int HardSectionCount = 0,
      long FreeStageId = 0,
      int FreeSectionCount = 0,
      VectorOffset PlayerCharacterIdOffset = default(VectorOffset),
      long HiddenPlayerCharacterId = 0,
      float CameraSmoothTime = 0.0f,
      StringOffset SpawnEffectPathOffset = default(StringOffset),
      float WaitTimeAfterSpawn = 0.0f,
      int FreeGearInterval = 0) {
    builder.StartTable(12);
    ConstMiniGameShootingExcel.AddHiddenPlayerCharacterId(builder, HiddenPlayerCharacterId);
    ConstMiniGameShootingExcel.AddFreeStageId(builder, FreeStageId);
    ConstMiniGameShootingExcel.AddHardStageId(builder, HardStageId);
    ConstMiniGameShootingExcel.AddNormalStageId(builder, NormalStageId);
    ConstMiniGameShootingExcel.AddFreeGearInterval(builder, FreeGearInterval);
    ConstMiniGameShootingExcel.AddWaitTimeAfterSpawn(builder, WaitTimeAfterSpawn);
    ConstMiniGameShootingExcel.AddSpawnEffectPath(builder, SpawnEffectPathOffset);
    ConstMiniGameShootingExcel.AddCameraSmoothTime(builder, CameraSmoothTime);
    ConstMiniGameShootingExcel.AddPlayerCharacterId(builder, PlayerCharacterIdOffset);
    ConstMiniGameShootingExcel.AddFreeSectionCount(builder, FreeSectionCount);
    ConstMiniGameShootingExcel.AddHardSectionCount(builder, HardSectionCount);
    ConstMiniGameShootingExcel.AddNormalSectionCount(builder, NormalSectionCount);
    return ConstMiniGameShootingExcel.EndConstMiniGameShootingExcel(builder);
  }

  public static void StartConstMiniGameShootingExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddNormalStageId(FlatBufferBuilder builder, long NormalStageId) { builder.AddLong(0, NormalStageId, 0); }
  public static void AddNormalSectionCount(FlatBufferBuilder builder, int NormalSectionCount) { builder.AddInt(1, NormalSectionCount, 0); }
  public static void AddHardStageId(FlatBufferBuilder builder, long HardStageId) { builder.AddLong(2, HardStageId, 0); }
  public static void AddHardSectionCount(FlatBufferBuilder builder, int HardSectionCount) { builder.AddInt(3, HardSectionCount, 0); }
  public static void AddFreeStageId(FlatBufferBuilder builder, long FreeStageId) { builder.AddLong(4, FreeStageId, 0); }
  public static void AddFreeSectionCount(FlatBufferBuilder builder, int FreeSectionCount) { builder.AddInt(5, FreeSectionCount, 0); }
  public static void AddPlayerCharacterId(FlatBufferBuilder builder, VectorOffset PlayerCharacterIdOffset) { builder.AddOffset(6, PlayerCharacterIdOffset.Value, 0); }
  public static VectorOffset CreatePlayerCharacterIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePlayerCharacterIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerCharacterIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlayerCharacterIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlayerCharacterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddHiddenPlayerCharacterId(FlatBufferBuilder builder, long HiddenPlayerCharacterId) { builder.AddLong(7, HiddenPlayerCharacterId, 0); }
  public static void AddCameraSmoothTime(FlatBufferBuilder builder, float CameraSmoothTime) { builder.AddFloat(8, CameraSmoothTime, 0.0f); }
  public static void AddSpawnEffectPath(FlatBufferBuilder builder, StringOffset SpawnEffectPathOffset) { builder.AddOffset(9, SpawnEffectPathOffset.Value, 0); }
  public static void AddWaitTimeAfterSpawn(FlatBufferBuilder builder, float WaitTimeAfterSpawn) { builder.AddFloat(10, WaitTimeAfterSpawn, 0.0f); }
  public static void AddFreeGearInterval(FlatBufferBuilder builder, int FreeGearInterval) { builder.AddInt(11, FreeGearInterval, 0); }
  public static Offset<FlatDataGlobal.ConstMiniGameShootingExcel> EndConstMiniGameShootingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ConstMiniGameShootingExcel>(o);
  }
}


}
