// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MultiFloorRaidStatChangeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MultiFloorRaidStatChangeExcel GetRootAsMultiFloorRaidStatChangeExcel(ByteBuffer _bb) { return GetRootAsMultiFloorRaidStatChangeExcel(_bb, new MultiFloorRaidStatChangeExcel()); }
  public static MultiFloorRaidStatChangeExcel GetRootAsMultiFloorRaidStatChangeExcel(ByteBuffer _bb, MultiFloorRaidStatChangeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MultiFloorRaidStatChangeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long StatChangeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.StatType StatType(int j) { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.StatType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.StatType)0; }
  public int StatTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.StatType> GetStatTypeBytes() { return __p.__vector_as_span<FlatDataGlobal.StatType>(6, 4); }
#else
  public ArraySegment<byte>? GetStatTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public FlatDataGlobal.StatType[] GetStatTypeArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.StatType[] a = new FlatDataGlobal.StatType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.StatType)__p.bb.GetInt(p + i * 4); } return a; }
  public long StatAdd(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StatAddLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStatAddBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetStatAddBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetStatAddArray() { return __p.__vector_as_array<long>(8); }
  public long StatMultiply(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StatMultiplyLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStatMultiplyBytes() { return __p.__vector_as_span<long>(10, 8); }
#else
  public ArraySegment<byte>? GetStatMultiplyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetStatMultiplyArray() { return __p.__vector_as_array<long>(10); }
  public long ApplyCharacterId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ApplyCharacterIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetApplyCharacterIdBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetApplyCharacterIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetApplyCharacterIdArray() { return __p.__vector_as_array<long>(12); }

  public static Offset<FlatDataGlobal.MultiFloorRaidStatChangeExcel> CreateMultiFloorRaidStatChangeExcel(FlatBufferBuilder builder,
      long StatChangeId = 0,
      VectorOffset StatTypeOffset = default(VectorOffset),
      VectorOffset StatAddOffset = default(VectorOffset),
      VectorOffset StatMultiplyOffset = default(VectorOffset),
      VectorOffset ApplyCharacterIdOffset = default(VectorOffset)) {
    builder.StartTable(5);
    MultiFloorRaidStatChangeExcel.AddStatChangeId(builder, StatChangeId);
    MultiFloorRaidStatChangeExcel.AddApplyCharacterId(builder, ApplyCharacterIdOffset);
    MultiFloorRaidStatChangeExcel.AddStatMultiply(builder, StatMultiplyOffset);
    MultiFloorRaidStatChangeExcel.AddStatAdd(builder, StatAddOffset);
    MultiFloorRaidStatChangeExcel.AddStatType(builder, StatTypeOffset);
    return MultiFloorRaidStatChangeExcel.EndMultiFloorRaidStatChangeExcel(builder);
  }

  public static void StartMultiFloorRaidStatChangeExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStatChangeId(FlatBufferBuilder builder, long StatChangeId) { builder.AddLong(0, StatChangeId, 0); }
  public static void AddStatType(FlatBufferBuilder builder, VectorOffset StatTypeOffset) { builder.AddOffset(1, StatTypeOffset.Value, 0); }
  public static VectorOffset CreateStatTypeVector(FlatBufferBuilder builder, FlatDataGlobal.StatType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatTypeVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.StatType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.StatType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.StatType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStatAdd(FlatBufferBuilder builder, VectorOffset StatAddOffset) { builder.AddOffset(2, StatAddOffset.Value, 0); }
  public static VectorOffset CreateStatAddVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatAddVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatAddVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatAddVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatAddVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStatMultiply(FlatBufferBuilder builder, VectorOffset StatMultiplyOffset) { builder.AddOffset(3, StatMultiplyOffset.Value, 0); }
  public static VectorOffset CreateStatMultiplyVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatMultiplyVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatMultiplyVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatMultiplyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatMultiplyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddApplyCharacterId(FlatBufferBuilder builder, VectorOffset ApplyCharacterIdOffset) { builder.AddOffset(4, ApplyCharacterIdOffset.Value, 0); }
  public static VectorOffset CreateApplyCharacterIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateApplyCharacterIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplyCharacterIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateApplyCharacterIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartApplyCharacterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatDataGlobal.MultiFloorRaidStatChangeExcel> EndMultiFloorRaidStatChangeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MultiFloorRaidStatChangeExcel>(o);
  }
}


}
