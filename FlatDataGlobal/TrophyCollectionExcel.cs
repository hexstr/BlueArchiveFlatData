// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TrophyCollectionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static TrophyCollectionExcel GetRootAsTrophyCollectionExcel(ByteBuffer _bb) { return GetRootAsTrophyCollectionExcel(_bb, new TrophyCollectionExcel()); }
  public static TrophyCollectionExcel GetRootAsTrophyCollectionExcel(ByteBuffer _bb, TrophyCollectionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrophyCollectionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeCodeId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long FurnitureId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int FurnitureIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetFurnitureIdBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetFurnitureIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetFurnitureIdArray() { return __p.__vector_as_array<long>(8); }

  public static Offset<FlatDataGlobal.TrophyCollectionExcel> CreateTrophyCollectionExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      uint LocalizeCodeId = 0,
      VectorOffset FurnitureIdOffset = default(VectorOffset)) {
    builder.StartTable(3);
    TrophyCollectionExcel.AddGroupId(builder, GroupId);
    TrophyCollectionExcel.AddFurnitureId(builder, FurnitureIdOffset);
    TrophyCollectionExcel.AddLocalizeCodeId(builder, LocalizeCodeId);
    return TrophyCollectionExcel.EndTrophyCollectionExcel(builder);
  }

  public static void StartTrophyCollectionExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(0, GroupId, 0); }
  public static void AddLocalizeCodeId(FlatBufferBuilder builder, uint LocalizeCodeId) { builder.AddUint(1, LocalizeCodeId, 0); }
  public static void AddFurnitureId(FlatBufferBuilder builder, VectorOffset FurnitureIdOffset) { builder.AddOffset(2, FurnitureIdOffset.Value, 0); }
  public static VectorOffset CreateFurnitureIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFurnitureIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFurnitureIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFurnitureIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFurnitureIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatDataGlobal.TrophyCollectionExcel> EndTrophyCollectionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.TrophyCollectionExcel>(o);
  }
}


}
