// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConquestUnexpectedEventExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ConquestUnexpectedEventExcel GetRootAsConquestUnexpectedEventExcel(ByteBuffer _bb) { return GetRootAsConquestUnexpectedEventExcel(_bb, new ConquestUnexpectedEventExcel()); }
  public static ConquestUnexpectedEventExcel GetRootAsConquestUnexpectedEventExcel(ByteBuffer _bb, ConquestUnexpectedEventExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestUnexpectedEventExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType UnexpectedEventConditionType { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long UnexpectedEventConditionUniqueId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UnexpectedEventConditionAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int UnexpectedEventOccurDailyLimitCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnexpectedStep { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string UnexpectedEventPrefab(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UnexpectedEventPrefabLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long UnexpectedEventUnitId(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int UnexpectedEventUnitIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetUnexpectedEventUnitIdBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetUnexpectedEventUnitIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetUnexpectedEventUnitIdArray() { return __p.__vector_as_array<long>(20); }

  public static Offset<FlatDataGlobal.ConquestUnexpectedEventExcel> CreateConquestUnexpectedEventExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      long Id = 0,
      FlatDataGlobal.ParcelType UnexpectedEventConditionType = FlatDataGlobal.ParcelType.None,
      long UnexpectedEventConditionUniqueId = 0,
      long UnexpectedEventConditionAmount = 0,
      int UnexpectedEventOccurDailyLimitCount = 0,
      int UnexpectedStep = 0,
      VectorOffset UnexpectedEventPrefabOffset = default(VectorOffset),
      VectorOffset UnexpectedEventUnitIdOffset = default(VectorOffset)) {
    builder.StartTable(9);
    ConquestUnexpectedEventExcel.AddUnexpectedEventConditionAmount(builder, UnexpectedEventConditionAmount);
    ConquestUnexpectedEventExcel.AddUnexpectedEventConditionUniqueId(builder, UnexpectedEventConditionUniqueId);
    ConquestUnexpectedEventExcel.AddId(builder, Id);
    ConquestUnexpectedEventExcel.AddGroupId(builder, GroupId);
    ConquestUnexpectedEventExcel.AddUnexpectedEventUnitId(builder, UnexpectedEventUnitIdOffset);
    ConquestUnexpectedEventExcel.AddUnexpectedEventPrefab(builder, UnexpectedEventPrefabOffset);
    ConquestUnexpectedEventExcel.AddUnexpectedStep(builder, UnexpectedStep);
    ConquestUnexpectedEventExcel.AddUnexpectedEventOccurDailyLimitCount(builder, UnexpectedEventOccurDailyLimitCount);
    ConquestUnexpectedEventExcel.AddUnexpectedEventConditionType(builder, UnexpectedEventConditionType);
    return ConquestUnexpectedEventExcel.EndConquestUnexpectedEventExcel(builder);
  }

  public static void StartConquestUnexpectedEventExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(0, GroupId, 0); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(1, Id, 0); }
  public static void AddUnexpectedEventConditionType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType UnexpectedEventConditionType) { builder.AddInt(2, (int)UnexpectedEventConditionType, 0); }
  public static void AddUnexpectedEventConditionUniqueId(FlatBufferBuilder builder, long UnexpectedEventConditionUniqueId) { builder.AddLong(3, UnexpectedEventConditionUniqueId, 0); }
  public static void AddUnexpectedEventConditionAmount(FlatBufferBuilder builder, long UnexpectedEventConditionAmount) { builder.AddLong(4, UnexpectedEventConditionAmount, 0); }
  public static void AddUnexpectedEventOccurDailyLimitCount(FlatBufferBuilder builder, int UnexpectedEventOccurDailyLimitCount) { builder.AddInt(5, UnexpectedEventOccurDailyLimitCount, 0); }
  public static void AddUnexpectedStep(FlatBufferBuilder builder, int UnexpectedStep) { builder.AddInt(6, UnexpectedStep, 0); }
  public static void AddUnexpectedEventPrefab(FlatBufferBuilder builder, VectorOffset UnexpectedEventPrefabOffset) { builder.AddOffset(7, UnexpectedEventPrefabOffset.Value, 0); }
  public static VectorOffset CreateUnexpectedEventPrefabVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUnexpectedEventPrefabVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnexpectedEventPrefabVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnexpectedEventPrefabVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUnexpectedEventPrefabVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnexpectedEventUnitId(FlatBufferBuilder builder, VectorOffset UnexpectedEventUnitIdOffset) { builder.AddOffset(8, UnexpectedEventUnitIdOffset.Value, 0); }
  public static VectorOffset CreateUnexpectedEventUnitIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUnexpectedEventUnitIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnexpectedEventUnitIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnexpectedEventUnitIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUnexpectedEventUnitIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatDataGlobal.ConquestUnexpectedEventExcel> EndConquestUnexpectedEventExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ConquestUnexpectedEventExcel>(o);
  }
}


}
