// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CafeProductionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CafeProductionExcel GetRootAsCafeProductionExcel(ByteBuffer _bb) { return GetRootAsCafeProductionExcel(_bb, new CafeProductionExcel()); }
  public static CafeProductionExcel GetRootAsCafeProductionExcel(ByteBuffer _bb, CafeProductionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CafeProductionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CafeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Rank { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType CafeProductionParcelType { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long CafeProductionParcelId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ParcelProductionCoefficient { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ParcelProductionCorrectionValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ParcelStorageMax { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.CafeProductionExcel> CreateCafeProductionExcel(FlatBufferBuilder builder,
      long CafeId = 0,
      long Rank = 0,
      FlatDataGlobal.ParcelType CafeProductionParcelType = FlatDataGlobal.ParcelType.None,
      long CafeProductionParcelId = 0,
      long ParcelProductionCoefficient = 0,
      long ParcelProductionCorrectionValue = 0,
      long ParcelStorageMax = 0) {
    builder.StartTable(7);
    CafeProductionExcel.AddParcelStorageMax(builder, ParcelStorageMax);
    CafeProductionExcel.AddParcelProductionCorrectionValue(builder, ParcelProductionCorrectionValue);
    CafeProductionExcel.AddParcelProductionCoefficient(builder, ParcelProductionCoefficient);
    CafeProductionExcel.AddCafeProductionParcelId(builder, CafeProductionParcelId);
    CafeProductionExcel.AddRank(builder, Rank);
    CafeProductionExcel.AddCafeId(builder, CafeId);
    CafeProductionExcel.AddCafeProductionParcelType(builder, CafeProductionParcelType);
    return CafeProductionExcel.EndCafeProductionExcel(builder);
  }

  public static void StartCafeProductionExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddCafeId(FlatBufferBuilder builder, long CafeId) { builder.AddLong(0, CafeId, 0); }
  public static void AddRank(FlatBufferBuilder builder, long Rank) { builder.AddLong(1, Rank, 0); }
  public static void AddCafeProductionParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType CafeProductionParcelType) { builder.AddInt(2, (int)CafeProductionParcelType, 0); }
  public static void AddCafeProductionParcelId(FlatBufferBuilder builder, long CafeProductionParcelId) { builder.AddLong(3, CafeProductionParcelId, 0); }
  public static void AddParcelProductionCoefficient(FlatBufferBuilder builder, long ParcelProductionCoefficient) { builder.AddLong(4, ParcelProductionCoefficient, 0); }
  public static void AddParcelProductionCorrectionValue(FlatBufferBuilder builder, long ParcelProductionCorrectionValue) { builder.AddLong(5, ParcelProductionCorrectionValue, 0); }
  public static void AddParcelStorageMax(FlatBufferBuilder builder, long ParcelStorageMax) { builder.AddLong(6, ParcelStorageMax, 0); }
  public static Offset<FlatDataGlobal.CafeProductionExcel> EndCafeProductionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.CafeProductionExcel>(o);
  }
}


}
