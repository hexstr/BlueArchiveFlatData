// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldTutorialExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FieldTutorialExcel GetRootAsFieldTutorialExcel(ByteBuffer _bb) { return GetRootAsFieldTutorialExcel(_bb, new FieldTutorialExcel()); }
  public static FieldTutorialExcel GetRootAsFieldTutorialExcel(ByteBuffer _bb, FieldTutorialExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldTutorialExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long SeasonId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.FieldTutorialType TutorialType(int j) { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.FieldTutorialType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.FieldTutorialType)0; }
  public int TutorialTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.FieldTutorialType> GetTutorialTypeBytes() { return __p.__vector_as_span<FlatDataGlobal.FieldTutorialType>(6, 4); }
#else
  public ArraySegment<byte>? GetTutorialTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public FlatDataGlobal.FieldTutorialType[] GetTutorialTypeArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.FieldTutorialType[] a = new FlatDataGlobal.FieldTutorialType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.FieldTutorialType)__p.bb.GetInt(p + i * 4); } return a; }
  public FlatDataGlobal.FieldConditionType ConditionType(int j) { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.FieldConditionType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.FieldConditionType)0; }
  public int ConditionTypeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.FieldConditionType> GetConditionTypeBytes() { return __p.__vector_as_span<FlatDataGlobal.FieldConditionType>(8, 4); }
#else
  public ArraySegment<byte>? GetConditionTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public FlatDataGlobal.FieldConditionType[] GetConditionTypeArray() { int o = __p.__offset(8); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.FieldConditionType[] a = new FlatDataGlobal.FieldConditionType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.FieldConditionType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ConditionId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionIdBytes() { return __p.__vector_as_span<long>(10, 8); }
#else
  public ArraySegment<byte>? GetConditionIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetConditionIdArray() { return __p.__vector_as_array<long>(10); }

  public static Offset<FlatDataGlobal.FieldTutorialExcel> CreateFieldTutorialExcel(FlatBufferBuilder builder,
      long SeasonId = 0,
      VectorOffset TutorialTypeOffset = default(VectorOffset),
      VectorOffset ConditionTypeOffset = default(VectorOffset),
      VectorOffset ConditionIdOffset = default(VectorOffset)) {
    builder.StartTable(4);
    FieldTutorialExcel.AddSeasonId(builder, SeasonId);
    FieldTutorialExcel.AddConditionId(builder, ConditionIdOffset);
    FieldTutorialExcel.AddConditionType(builder, ConditionTypeOffset);
    FieldTutorialExcel.AddTutorialType(builder, TutorialTypeOffset);
    return FieldTutorialExcel.EndFieldTutorialExcel(builder);
  }

  public static void StartFieldTutorialExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddSeasonId(FlatBufferBuilder builder, long SeasonId) { builder.AddLong(0, SeasonId, 0); }
  public static void AddTutorialType(FlatBufferBuilder builder, VectorOffset TutorialTypeOffset) { builder.AddOffset(1, TutorialTypeOffset.Value, 0); }
  public static VectorOffset CreateTutorialTypeVector(FlatBufferBuilder builder, FlatDataGlobal.FieldTutorialType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTutorialTypeVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.FieldTutorialType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTutorialTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.FieldTutorialType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTutorialTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.FieldTutorialType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTutorialTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionType(FlatBufferBuilder builder, VectorOffset ConditionTypeOffset) { builder.AddOffset(2, ConditionTypeOffset.Value, 0); }
  public static VectorOffset CreateConditionTypeVector(FlatBufferBuilder builder, FlatDataGlobal.FieldConditionType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.FieldConditionType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.FieldConditionType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.FieldConditionType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionId(FlatBufferBuilder builder, VectorOffset ConditionIdOffset) { builder.AddOffset(3, ConditionIdOffset.Value, 0); }
  public static VectorOffset CreateConditionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatDataGlobal.FieldTutorialExcel> EndFieldTutorialExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.FieldTutorialExcel>(o);
  }
}


}
