// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GachaElementExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static GachaElementExcel GetRootAsGachaElementExcel(ByteBuffer _bb) { return GetRootAsGachaElementExcel(_bb, new GachaElementExcel()); }
  public static GachaElementExcel GetRootAsGachaElementExcel(ByteBuffer _bb, GachaElementExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaElementExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GachaGroupID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType ParcelType { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long ParcelID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.Rarity Rarity { get { int o = __p.__offset(12); return o != 0 ? (FlatDataGlobal.Rarity)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.Rarity.N; } }
  public int ParcelAmountMin { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ParcelAmountMax { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Prob { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int State { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatDataGlobal.GachaElementExcel> CreateGachaElementExcel(FlatBufferBuilder builder,
      long ID = 0,
      long GachaGroupID = 0,
      FlatDataGlobal.ParcelType ParcelType = FlatDataGlobal.ParcelType.None,
      long ParcelID = 0,
      FlatDataGlobal.Rarity Rarity = FlatDataGlobal.Rarity.N,
      int ParcelAmountMin = 0,
      int ParcelAmountMax = 0,
      int Prob = 0,
      int State = 0) {
    builder.StartTable(9);
    GachaElementExcel.AddParcelID(builder, ParcelID);
    GachaElementExcel.AddGachaGroupID(builder, GachaGroupID);
    GachaElementExcel.AddID(builder, ID);
    GachaElementExcel.AddState(builder, State);
    GachaElementExcel.AddProb(builder, Prob);
    GachaElementExcel.AddParcelAmountMax(builder, ParcelAmountMax);
    GachaElementExcel.AddParcelAmountMin(builder, ParcelAmountMin);
    GachaElementExcel.AddRarity(builder, Rarity);
    GachaElementExcel.AddParcelType(builder, ParcelType);
    return GachaElementExcel.EndGachaElementExcel(builder);
  }

  public static void StartGachaElementExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddID(FlatBufferBuilder builder, long ID) { builder.AddLong(0, ID, 0); }
  public static void AddGachaGroupID(FlatBufferBuilder builder, long GachaGroupID) { builder.AddLong(1, GachaGroupID, 0); }
  public static void AddParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType ParcelType) { builder.AddInt(2, (int)ParcelType, 0); }
  public static void AddParcelID(FlatBufferBuilder builder, long ParcelID) { builder.AddLong(3, ParcelID, 0); }
  public static void AddRarity(FlatBufferBuilder builder, FlatDataGlobal.Rarity Rarity) { builder.AddInt(4, (int)Rarity, 0); }
  public static void AddParcelAmountMin(FlatBufferBuilder builder, int ParcelAmountMin) { builder.AddInt(5, ParcelAmountMin, 0); }
  public static void AddParcelAmountMax(FlatBufferBuilder builder, int ParcelAmountMax) { builder.AddInt(6, ParcelAmountMax, 0); }
  public static void AddProb(FlatBufferBuilder builder, int Prob) { builder.AddInt(7, Prob, 0); }
  public static void AddState(FlatBufferBuilder builder, int State) { builder.AddInt(8, State, 0); }
  public static Offset<FlatDataGlobal.GachaElementExcel> EndGachaElementExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.GachaElementExcel>(o);
  }
}


}
