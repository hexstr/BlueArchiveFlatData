// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WorldRaidBossGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static WorldRaidBossGroupExcel GetRootAsWorldRaidBossGroupExcel(ByteBuffer _bb) { return GetRootAsWorldRaidBossGroupExcel(_bb, new WorldRaidBossGroupExcel()); }
  public static WorldRaidBossGroupExcel GetRootAsWorldRaidBossGroupExcel(ByteBuffer _bb, WorldRaidBossGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorldRaidBossGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidBossGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string WorldBossName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetWorldBossNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetWorldBossNameArray() { return __p.__vector_as_array<byte>(8); }
  public string WorldBossPopupPortrait { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossPopupPortraitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetWorldBossPopupPortraitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetWorldBossPopupPortraitArray() { return __p.__vector_as_array<byte>(10); }
  public string WorldBossPopupBG { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossPopupBGBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetWorldBossPopupBGBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetWorldBossPopupBGArray() { return __p.__vector_as_array<byte>(12); }
  public string WorldBossParcelPortrait { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorldBossParcelPortraitBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetWorldBossParcelPortraitBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetWorldBossParcelPortraitArray() { return __p.__vector_as_array<byte>(14); }
  public long WorldBossHP { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldBossHPTw { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldBossHPAsia { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldBossHPNa { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldBossHPGlobal { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool UIHideBeforeSpawn { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long WorldBossClearRewardGroupId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AnotherBossKilled(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int AnotherBossKilledLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetAnotherBossKilledBytes() { return __p.__vector_as_span<long>(30, 8); }
#else
  public ArraySegment<byte>? GetAnotherBossKilledBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public long[] GetAnotherBossKilledArray() { return __p.__vector_as_array<long>(30); }
  public long BlackListGroupId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.WorldRaidBossGroupExcel> CreateWorldRaidBossGroupExcel(FlatBufferBuilder builder,
      long Id = 0,
      long WorldRaidBossGroupId = 0,
      StringOffset WorldBossNameOffset = default(StringOffset),
      StringOffset WorldBossPopupPortraitOffset = default(StringOffset),
      StringOffset WorldBossPopupBGOffset = default(StringOffset),
      StringOffset WorldBossParcelPortraitOffset = default(StringOffset),
      long WorldBossHP = 0,
      long WorldBossHPTw = 0,
      long WorldBossHPAsia = 0,
      long WorldBossHPNa = 0,
      long WorldBossHPGlobal = 0,
      bool UIHideBeforeSpawn = false,
      long WorldBossClearRewardGroupId = 0,
      VectorOffset AnotherBossKilledOffset = default(VectorOffset),
      long BlackListGroupId = 0) {
    builder.StartTable(15);
    WorldRaidBossGroupExcel.AddBlackListGroupId(builder, BlackListGroupId);
    WorldRaidBossGroupExcel.AddWorldBossClearRewardGroupId(builder, WorldBossClearRewardGroupId);
    WorldRaidBossGroupExcel.AddWorldBossHPGlobal(builder, WorldBossHPGlobal);
    WorldRaidBossGroupExcel.AddWorldBossHPNa(builder, WorldBossHPNa);
    WorldRaidBossGroupExcel.AddWorldBossHPAsia(builder, WorldBossHPAsia);
    WorldRaidBossGroupExcel.AddWorldBossHPTw(builder, WorldBossHPTw);
    WorldRaidBossGroupExcel.AddWorldBossHP(builder, WorldBossHP);
    WorldRaidBossGroupExcel.AddWorldRaidBossGroupId(builder, WorldRaidBossGroupId);
    WorldRaidBossGroupExcel.AddId(builder, Id);
    WorldRaidBossGroupExcel.AddAnotherBossKilled(builder, AnotherBossKilledOffset);
    WorldRaidBossGroupExcel.AddWorldBossParcelPortrait(builder, WorldBossParcelPortraitOffset);
    WorldRaidBossGroupExcel.AddWorldBossPopupBG(builder, WorldBossPopupBGOffset);
    WorldRaidBossGroupExcel.AddWorldBossPopupPortrait(builder, WorldBossPopupPortraitOffset);
    WorldRaidBossGroupExcel.AddWorldBossName(builder, WorldBossNameOffset);
    WorldRaidBossGroupExcel.AddUIHideBeforeSpawn(builder, UIHideBeforeSpawn);
    return WorldRaidBossGroupExcel.EndWorldRaidBossGroupExcel(builder);
  }

  public static void StartWorldRaidBossGroupExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddWorldRaidBossGroupId(FlatBufferBuilder builder, long WorldRaidBossGroupId) { builder.AddLong(1, WorldRaidBossGroupId, 0); }
  public static void AddWorldBossName(FlatBufferBuilder builder, StringOffset WorldBossNameOffset) { builder.AddOffset(2, WorldBossNameOffset.Value, 0); }
  public static void AddWorldBossPopupPortrait(FlatBufferBuilder builder, StringOffset WorldBossPopupPortraitOffset) { builder.AddOffset(3, WorldBossPopupPortraitOffset.Value, 0); }
  public static void AddWorldBossPopupBG(FlatBufferBuilder builder, StringOffset WorldBossPopupBGOffset) { builder.AddOffset(4, WorldBossPopupBGOffset.Value, 0); }
  public static void AddWorldBossParcelPortrait(FlatBufferBuilder builder, StringOffset WorldBossParcelPortraitOffset) { builder.AddOffset(5, WorldBossParcelPortraitOffset.Value, 0); }
  public static void AddWorldBossHP(FlatBufferBuilder builder, long WorldBossHP) { builder.AddLong(6, WorldBossHP, 0); }
  public static void AddWorldBossHPTw(FlatBufferBuilder builder, long WorldBossHPTw) { builder.AddLong(7, WorldBossHPTw, 0); }
  public static void AddWorldBossHPAsia(FlatBufferBuilder builder, long WorldBossHPAsia) { builder.AddLong(8, WorldBossHPAsia, 0); }
  public static void AddWorldBossHPNa(FlatBufferBuilder builder, long WorldBossHPNa) { builder.AddLong(9, WorldBossHPNa, 0); }
  public static void AddWorldBossHPGlobal(FlatBufferBuilder builder, long WorldBossHPGlobal) { builder.AddLong(10, WorldBossHPGlobal, 0); }
  public static void AddUIHideBeforeSpawn(FlatBufferBuilder builder, bool UIHideBeforeSpawn) { builder.AddBool(11, UIHideBeforeSpawn, false); }
  public static void AddWorldBossClearRewardGroupId(FlatBufferBuilder builder, long WorldBossClearRewardGroupId) { builder.AddLong(12, WorldBossClearRewardGroupId, 0); }
  public static void AddAnotherBossKilled(FlatBufferBuilder builder, VectorOffset AnotherBossKilledOffset) { builder.AddOffset(13, AnotherBossKilledOffset.Value, 0); }
  public static VectorOffset CreateAnotherBossKilledVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAnotherBossKilledVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnotherBossKilledVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAnotherBossKilledVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAnotherBossKilledVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBlackListGroupId(FlatBufferBuilder builder, long BlackListGroupId) { builder.AddLong(14, BlackListGroupId, 0); }
  public static Offset<FlatDataGlobal.WorldRaidBossGroupExcel> EndWorldRaidBossGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.WorldRaidBossGroupExcel>(o);
  }
}


}
