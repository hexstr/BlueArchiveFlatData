// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameRoadPuzzleMapExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameRoadPuzzleMapExcel GetRootAsMinigameRoadPuzzleMapExcel(ByteBuffer _bb) { return GetRootAsMinigameRoadPuzzleMapExcel(_bb, new MinigameRoadPuzzleMapExcel()); }
  public static MinigameRoadPuzzleMapExcel GetRootAsMinigameRoadPuzzleMapExcel(ByteBuffer _bb, MinigameRoadPuzzleMapExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameRoadPuzzleMapExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MapGroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Map { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMapBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMapArray() { return __p.__vector_as_array<byte>(10); }
  public string MapBG { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapBGBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMapBGBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMapBGArray() { return __p.__vector_as_array<byte>(12); }
  public long BGMId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AvailableRailTile(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int AvailableRailTileLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetAvailableRailTileBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetAvailableRailTileBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetAvailableRailTileArray() { return __p.__vector_as_array<long>(16); }
  public long AvailableRailTileAmount(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int AvailableRailTileAmountLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetAvailableRailTileAmountBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetAvailableRailTileAmountBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetAvailableRailTileAmountArray() { return __p.__vector_as_array<long>(18); }
  public long OriginalTileCount(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int OriginalTileCountLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetOriginalTileCountBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetOriginalTileCountBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetOriginalTileCountArray() { return __p.__vector_as_array<long>(20); }
  public float TrainSpeed { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<FlatDataGlobal.MinigameRoadPuzzleMapExcel> CreateMinigameRoadPuzzleMapExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      long MapGroupId = 0,
      StringOffset MapOffset = default(StringOffset),
      StringOffset MapBGOffset = default(StringOffset),
      long BGMId = 0,
      VectorOffset AvailableRailTileOffset = default(VectorOffset),
      VectorOffset AvailableRailTileAmountOffset = default(VectorOffset),
      VectorOffset OriginalTileCountOffset = default(VectorOffset),
      float TrainSpeed = 0.0f) {
    builder.StartTable(10);
    MinigameRoadPuzzleMapExcel.AddBGMId(builder, BGMId);
    MinigameRoadPuzzleMapExcel.AddMapGroupId(builder, MapGroupId);
    MinigameRoadPuzzleMapExcel.AddUniqueId(builder, UniqueId);
    MinigameRoadPuzzleMapExcel.AddEventContentId(builder, EventContentId);
    MinigameRoadPuzzleMapExcel.AddTrainSpeed(builder, TrainSpeed);
    MinigameRoadPuzzleMapExcel.AddOriginalTileCount(builder, OriginalTileCountOffset);
    MinigameRoadPuzzleMapExcel.AddAvailableRailTileAmount(builder, AvailableRailTileAmountOffset);
    MinigameRoadPuzzleMapExcel.AddAvailableRailTile(builder, AvailableRailTileOffset);
    MinigameRoadPuzzleMapExcel.AddMapBG(builder, MapBGOffset);
    MinigameRoadPuzzleMapExcel.AddMap(builder, MapOffset);
    return MinigameRoadPuzzleMapExcel.EndMinigameRoadPuzzleMapExcel(builder);
  }

  public static void StartMinigameRoadPuzzleMapExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(1, UniqueId, 0); }
  public static void AddMapGroupId(FlatBufferBuilder builder, long MapGroupId) { builder.AddLong(2, MapGroupId, 0); }
  public static void AddMap(FlatBufferBuilder builder, StringOffset MapOffset) { builder.AddOffset(3, MapOffset.Value, 0); }
  public static void AddMapBG(FlatBufferBuilder builder, StringOffset MapBGOffset) { builder.AddOffset(4, MapBGOffset.Value, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long BGMId) { builder.AddLong(5, BGMId, 0); }
  public static void AddAvailableRailTile(FlatBufferBuilder builder, VectorOffset AvailableRailTileOffset) { builder.AddOffset(6, AvailableRailTileOffset.Value, 0); }
  public static VectorOffset CreateAvailableRailTileVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAvailableRailTileVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddAvailableRailTileAmount(FlatBufferBuilder builder, VectorOffset AvailableRailTileAmountOffset) { builder.AddOffset(7, AvailableRailTileAmountOffset.Value, 0); }
  public static VectorOffset CreateAvailableRailTileAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAvailableRailTileAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddOriginalTileCount(FlatBufferBuilder builder, VectorOffset OriginalTileCountOffset) { builder.AddOffset(8, OriginalTileCountOffset.Value, 0); }
  public static VectorOffset CreateOriginalTileCountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOriginalTileCountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOriginalTileCountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOriginalTileCountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOriginalTileCountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTrainSpeed(FlatBufferBuilder builder, float TrainSpeed) { builder.AddFloat(9, TrainSpeed, 0.0f); }
  public static Offset<FlatDataGlobal.MinigameRoadPuzzleMapExcel> EndMinigameRoadPuzzleMapExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MinigameRoadPuzzleMapExcel>(o);
  }
}


}
