// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ProductExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ProductExcel GetRootAsProductExcel(ByteBuffer _bb) { return GetRootAsProductExcel(_bb, new ProductExcel()); }
  public static ProductExcel GetRootAsProductExcel(ByteBuffer _bb, ProductExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProductExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ProductId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetProductIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetProductIdArray() { return __p.__vector_as_array<byte>(6); }
  public string TeenProductId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeenProductIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTeenProductIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTeenProductIdArray() { return __p.__vector_as_array<byte>(8); }
  public FlatDataGlobal.StoreType StoreType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.StoreType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StoreType.None; } }
  public long Price { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string PriceReference { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriceReferenceBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPriceReferenceBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPriceReferenceArray() { return __p.__vector_as_array<byte>(14); }
  public FlatDataGlobal.PurchasePeriodType PurchasePeriodType { get { int o = __p.__offset(16); return o != 0 ? (FlatDataGlobal.PurchasePeriodType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.PurchasePeriodType.None; } }
  public long PurchasePeriodLimit { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType ParcelType_(int j) { int o = __p.__offset(20); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.ParcelType)0; }
  public int ParcelType_Length { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.ParcelType> GetParcelType_Bytes() { return __p.__vector_as_span<FlatDataGlobal.ParcelType>(20, 4); }
#else
  public ArraySegment<byte>? GetParcelType_Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public FlatDataGlobal.ParcelType[] GetParcelType_Array() { int o = __p.__offset(20); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.ParcelType[] a = new FlatDataGlobal.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ParcelId(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ParcelIdLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetParcelIdBytes() { return __p.__vector_as_span<long>(22, 8); }
#else
  public ArraySegment<byte>? GetParcelIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public long[] GetParcelIdArray() { return __p.__vector_as_array<long>(22); }
  public long ParcelAmount(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ParcelAmountLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetParcelAmountBytes() { return __p.__vector_as_span<long>(24, 8); }
#else
  public ArraySegment<byte>? GetParcelAmountBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public long[] GetParcelAmountArray() { return __p.__vector_as_array<long>(24); }

  public static Offset<FlatDataGlobal.ProductExcel> CreateProductExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset ProductIdOffset = default(StringOffset),
      StringOffset TeenProductIdOffset = default(StringOffset),
      FlatDataGlobal.StoreType StoreType = FlatDataGlobal.StoreType.None,
      long Price = 0,
      StringOffset PriceReferenceOffset = default(StringOffset),
      FlatDataGlobal.PurchasePeriodType PurchasePeriodType = FlatDataGlobal.PurchasePeriodType.None,
      long PurchasePeriodLimit = 0,
      VectorOffset ParcelType_Offset = default(VectorOffset),
      VectorOffset ParcelIdOffset = default(VectorOffset),
      VectorOffset ParcelAmountOffset = default(VectorOffset)) {
    builder.StartTable(11);
    ProductExcel.AddPurchasePeriodLimit(builder, PurchasePeriodLimit);
    ProductExcel.AddPrice(builder, Price);
    ProductExcel.AddId(builder, Id);
    ProductExcel.AddParcelAmount(builder, ParcelAmountOffset);
    ProductExcel.AddParcelId(builder, ParcelIdOffset);
    ProductExcel.AddParcelType_(builder, ParcelType_Offset);
    ProductExcel.AddPurchasePeriodType(builder, PurchasePeriodType);
    ProductExcel.AddPriceReference(builder, PriceReferenceOffset);
    ProductExcel.AddStoreType(builder, StoreType);
    ProductExcel.AddTeenProductId(builder, TeenProductIdOffset);
    ProductExcel.AddProductId(builder, ProductIdOffset);
    return ProductExcel.EndProductExcel(builder);
  }

  public static void StartProductExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddProductId(FlatBufferBuilder builder, StringOffset ProductIdOffset) { builder.AddOffset(1, ProductIdOffset.Value, 0); }
  public static void AddTeenProductId(FlatBufferBuilder builder, StringOffset TeenProductIdOffset) { builder.AddOffset(2, TeenProductIdOffset.Value, 0); }
  public static void AddStoreType(FlatBufferBuilder builder, FlatDataGlobal.StoreType StoreType) { builder.AddInt(3, (int)StoreType, 0); }
  public static void AddPrice(FlatBufferBuilder builder, long Price) { builder.AddLong(4, Price, 0); }
  public static void AddPriceReference(FlatBufferBuilder builder, StringOffset PriceReferenceOffset) { builder.AddOffset(5, PriceReferenceOffset.Value, 0); }
  public static void AddPurchasePeriodType(FlatBufferBuilder builder, FlatDataGlobal.PurchasePeriodType PurchasePeriodType) { builder.AddInt(6, (int)PurchasePeriodType, 0); }
  public static void AddPurchasePeriodLimit(FlatBufferBuilder builder, long PurchasePeriodLimit) { builder.AddLong(7, PurchasePeriodLimit, 0); }
  public static void AddParcelType_(FlatBufferBuilder builder, VectorOffset ParcelType_Offset) { builder.AddOffset(8, ParcelType_Offset.Value, 0); }
  public static VectorOffset CreateParcelType_Vector(FlatBufferBuilder builder, FlatDataGlobal.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelType_VectorBlock(FlatBufferBuilder builder, FlatDataGlobal.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelType_VectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelType_VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelType_Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParcelId(FlatBufferBuilder builder, VectorOffset ParcelIdOffset) { builder.AddOffset(9, ParcelIdOffset.Value, 0); }
  public static VectorOffset CreateParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddParcelAmount(FlatBufferBuilder builder, VectorOffset ParcelAmountOffset) { builder.AddOffset(10, ParcelAmountOffset.Value, 0); }
  public static VectorOffset CreateParcelAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatDataGlobal.ProductExcel> EndProductExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ProductExcel>(o);
  }
}


}
