// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EliminateRaidRankingRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static EliminateRaidRankingRewardExcel GetRootAsEliminateRaidRankingRewardExcel(ByteBuffer _bb) { return GetRootAsEliminateRaidRankingRewardExcel(_bb, new EliminateRaidRankingRewardExcel()); }
  public static EliminateRaidRankingRewardExcel GetRootAsEliminateRaidRankingRewardExcel(ByteBuffer _bb, EliminateRaidRankingRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EliminateRaidRankingRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RankingRewardGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankStart { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankEnd { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankStartTw { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankEndTw { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankStartAsia { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankEndAsia { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankStartNa { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankEndNa { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankStartGlobal { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankEndGlobal { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PercentRankStart { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PercentRankEnd { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Tier { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.ParcelType RewardParcelType(int j) { int o = __p.__offset(34); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<FlatDataGlobal.ParcelType>(34, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public FlatDataGlobal.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(34); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.ParcelType[] a = new FlatDataGlobal.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParcelUniqueId(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelUniqueIdLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelUniqueIdBytes() { return __p.__vector_as_span<long>(36, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelUniqueIdBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public long[] GetRewardParcelUniqueIdArray() { return __p.__vector_as_array<long>(36); }
  public string RewardParcelUniqueName(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RewardParcelUniqueNameLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long RewardParcelAmount(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelAmountLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelAmountBytes() { return __p.__vector_as_span<long>(40, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelAmountBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public long[] GetRewardParcelAmountArray() { return __p.__vector_as_array<long>(40); }

  public static Offset<FlatDataGlobal.EliminateRaidRankingRewardExcel> CreateEliminateRaidRankingRewardExcel(FlatBufferBuilder builder,
      long RankingRewardGroupId = 0,
      long Id = 0,
      long RankStart = 0,
      long RankEnd = 0,
      long RankStartTw = 0,
      long RankEndTw = 0,
      long RankStartAsia = 0,
      long RankEndAsia = 0,
      long RankStartNa = 0,
      long RankEndNa = 0,
      long RankStartGlobal = 0,
      long RankEndGlobal = 0,
      long PercentRankStart = 0,
      long PercentRankEnd = 0,
      int Tier = 0,
      VectorOffset RewardParcelTypeOffset = default(VectorOffset),
      VectorOffset RewardParcelUniqueIdOffset = default(VectorOffset),
      VectorOffset RewardParcelUniqueNameOffset = default(VectorOffset),
      VectorOffset RewardParcelAmountOffset = default(VectorOffset)) {
    builder.StartTable(19);
    EliminateRaidRankingRewardExcel.AddPercentRankEnd(builder, PercentRankEnd);
    EliminateRaidRankingRewardExcel.AddPercentRankStart(builder, PercentRankStart);
    EliminateRaidRankingRewardExcel.AddRankEndGlobal(builder, RankEndGlobal);
    EliminateRaidRankingRewardExcel.AddRankStartGlobal(builder, RankStartGlobal);
    EliminateRaidRankingRewardExcel.AddRankEndNa(builder, RankEndNa);
    EliminateRaidRankingRewardExcel.AddRankStartNa(builder, RankStartNa);
    EliminateRaidRankingRewardExcel.AddRankEndAsia(builder, RankEndAsia);
    EliminateRaidRankingRewardExcel.AddRankStartAsia(builder, RankStartAsia);
    EliminateRaidRankingRewardExcel.AddRankEndTw(builder, RankEndTw);
    EliminateRaidRankingRewardExcel.AddRankStartTw(builder, RankStartTw);
    EliminateRaidRankingRewardExcel.AddRankEnd(builder, RankEnd);
    EliminateRaidRankingRewardExcel.AddRankStart(builder, RankStart);
    EliminateRaidRankingRewardExcel.AddId(builder, Id);
    EliminateRaidRankingRewardExcel.AddRankingRewardGroupId(builder, RankingRewardGroupId);
    EliminateRaidRankingRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmountOffset);
    EliminateRaidRankingRewardExcel.AddRewardParcelUniqueName(builder, RewardParcelUniqueNameOffset);
    EliminateRaidRankingRewardExcel.AddRewardParcelUniqueId(builder, RewardParcelUniqueIdOffset);
    EliminateRaidRankingRewardExcel.AddRewardParcelType(builder, RewardParcelTypeOffset);
    EliminateRaidRankingRewardExcel.AddTier(builder, Tier);
    return EliminateRaidRankingRewardExcel.EndEliminateRaidRankingRewardExcel(builder);
  }

  public static void StartEliminateRaidRankingRewardExcel(FlatBufferBuilder builder) { builder.StartTable(19); }
  public static void AddRankingRewardGroupId(FlatBufferBuilder builder, long RankingRewardGroupId) { builder.AddLong(0, RankingRewardGroupId, 0); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(1, Id, 0); }
  public static void AddRankStart(FlatBufferBuilder builder, long RankStart) { builder.AddLong(2, RankStart, 0); }
  public static void AddRankEnd(FlatBufferBuilder builder, long RankEnd) { builder.AddLong(3, RankEnd, 0); }
  public static void AddRankStartTw(FlatBufferBuilder builder, long RankStartTw) { builder.AddLong(4, RankStartTw, 0); }
  public static void AddRankEndTw(FlatBufferBuilder builder, long RankEndTw) { builder.AddLong(5, RankEndTw, 0); }
  public static void AddRankStartAsia(FlatBufferBuilder builder, long RankStartAsia) { builder.AddLong(6, RankStartAsia, 0); }
  public static void AddRankEndAsia(FlatBufferBuilder builder, long RankEndAsia) { builder.AddLong(7, RankEndAsia, 0); }
  public static void AddRankStartNa(FlatBufferBuilder builder, long RankStartNa) { builder.AddLong(8, RankStartNa, 0); }
  public static void AddRankEndNa(FlatBufferBuilder builder, long RankEndNa) { builder.AddLong(9, RankEndNa, 0); }
  public static void AddRankStartGlobal(FlatBufferBuilder builder, long RankStartGlobal) { builder.AddLong(10, RankStartGlobal, 0); }
  public static void AddRankEndGlobal(FlatBufferBuilder builder, long RankEndGlobal) { builder.AddLong(11, RankEndGlobal, 0); }
  public static void AddPercentRankStart(FlatBufferBuilder builder, long PercentRankStart) { builder.AddLong(12, PercentRankStart, 0); }
  public static void AddPercentRankEnd(FlatBufferBuilder builder, long PercentRankEnd) { builder.AddLong(13, PercentRankEnd, 0); }
  public static void AddTier(FlatBufferBuilder builder, int Tier) { builder.AddInt(14, Tier, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset RewardParcelTypeOffset) { builder.AddOffset(15, RewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, FlatDataGlobal.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParcelUniqueId(FlatBufferBuilder builder, VectorOffset RewardParcelUniqueIdOffset) { builder.AddOffset(16, RewardParcelUniqueIdOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelUniqueIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelUniqueIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelUniqueName(FlatBufferBuilder builder, VectorOffset RewardParcelUniqueNameOffset) { builder.AddOffset(17, RewardParcelUniqueNameOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelUniqueNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelUniqueNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, VectorOffset RewardParcelAmountOffset) { builder.AddOffset(18, RewardParcelAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatDataGlobal.EliminateRaidRankingRewardExcel> EndEliminateRaidRankingRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.EliminateRaidRankingRewardExcel>(o);
  }
}


}
