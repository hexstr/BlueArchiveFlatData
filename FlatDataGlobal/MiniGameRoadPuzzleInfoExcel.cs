// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameRoadPuzzleInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameRoadPuzzleInfoExcel GetRootAsMiniGameRoadPuzzleInfoExcel(ByteBuffer _bb) { return GetRootAsMiniGameRoadPuzzleInfoExcel(_bb, new MiniGameRoadPuzzleInfoExcel()); }
  public static MiniGameRoadPuzzleInfoExcel GetRootAsMiniGameRoadPuzzleInfoExcel(ByteBuffer _bb, MiniGameRoadPuzzleInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameRoadPuzzleInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType EventUseCostType { get { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long EventUseCostId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CostGoodsId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RailSetRewardId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int InstantClearRound { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatDataGlobal.MiniGameRoadPuzzleInfoExcel> CreateMiniGameRoadPuzzleInfoExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      FlatDataGlobal.ParcelType EventUseCostType = FlatDataGlobal.ParcelType.None,
      long EventUseCostId = 0,
      long CostGoodsId = 0,
      long RailSetRewardId = 0,
      int InstantClearRound = 0) {
    builder.StartTable(6);
    MiniGameRoadPuzzleInfoExcel.AddRailSetRewardId(builder, RailSetRewardId);
    MiniGameRoadPuzzleInfoExcel.AddCostGoodsId(builder, CostGoodsId);
    MiniGameRoadPuzzleInfoExcel.AddEventUseCostId(builder, EventUseCostId);
    MiniGameRoadPuzzleInfoExcel.AddEventContentId(builder, EventContentId);
    MiniGameRoadPuzzleInfoExcel.AddInstantClearRound(builder, InstantClearRound);
    MiniGameRoadPuzzleInfoExcel.AddEventUseCostType(builder, EventUseCostType);
    return MiniGameRoadPuzzleInfoExcel.EndMiniGameRoadPuzzleInfoExcel(builder);
  }

  public static void StartMiniGameRoadPuzzleInfoExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddEventUseCostType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType EventUseCostType) { builder.AddInt(1, (int)EventUseCostType, 0); }
  public static void AddEventUseCostId(FlatBufferBuilder builder, long EventUseCostId) { builder.AddLong(2, EventUseCostId, 0); }
  public static void AddCostGoodsId(FlatBufferBuilder builder, long CostGoodsId) { builder.AddLong(3, CostGoodsId, 0); }
  public static void AddRailSetRewardId(FlatBufferBuilder builder, long RailSetRewardId) { builder.AddLong(4, RailSetRewardId, 0); }
  public static void AddInstantClearRound(FlatBufferBuilder builder, int InstantClearRound) { builder.AddInt(5, InstantClearRound, 0); }
  public static Offset<FlatDataGlobal.MiniGameRoadPuzzleInfoExcel> EndMiniGameRoadPuzzleInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameRoadPuzzleInfoExcel>(o);
  }
}


}
