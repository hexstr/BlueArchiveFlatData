// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CharacterExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CharacterExcel GetRootAsCharacterExcel(ByteBuffer _bb) { return GetRootAsCharacterExcel(_bb, new CharacterExcel()); }
  public static CharacterExcel GetRootAsCharacterExcel(ByteBuffer _bb, CharacterExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DevName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDevNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDevNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDevNameArray() { return __p.__vector_as_array<byte>(6); }
  public FlatDataGlobal.ProductionStep Productionstep { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ProductionStep)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ProductionStep.ToDo; } }
  public bool CollectionVisible { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ReleaseDate { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReleaseDateBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetReleaseDateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetReleaseDateArray() { return __p.__vector_as_array<byte>(12); }
  public string CollectionVisibleStartDate { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionVisibleStartDateBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCollectionVisibleStartDateBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCollectionVisibleStartDateArray() { return __p.__vector_as_array<byte>(14); }
  public string CollectionVisibleEndDate { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionVisibleEndDateBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCollectionVisibleEndDateBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCollectionVisibleEndDateArray() { return __p.__vector_as_array<byte>(16); }
  public bool IsPlayableCharacter { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public FlatDataGlobal.Rarity Rarity { get { int o = __p.__offset(22); return o != 0 ? (FlatDataGlobal.Rarity)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.Rarity.N; } }
  public bool IsNPC { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FlatDataGlobal.TacticEntityType Tacticentitytype { get { int o = __p.__offset(26); return o != 0 ? (FlatDataGlobal.TacticEntityType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.TacticEntityType.None; } }
  public bool CanSurvive { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDummy { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SubPartsCount { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.TacticRole Tacticrole { get { int o = __p.__offset(34); return o != 0 ? (FlatDataGlobal.TacticRole)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.TacticRole.None; } }
  public FlatDataGlobal.WeaponType Weapontype { get { int o = __p.__offset(36); return o != 0 ? (FlatDataGlobal.WeaponType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.WeaponType.None; } }
  public FlatDataGlobal.TacticRange Tacticrange { get { int o = __p.__offset(38); return o != 0 ? (FlatDataGlobal.TacticRange)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.TacticRange.Back; } }
  public FlatDataGlobal.BulletType Bullettype { get { int o = __p.__offset(40); return o != 0 ? (FlatDataGlobal.BulletType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.BulletType.Normal; } }
  public FlatDataGlobal.ArmorType Armortype { get { int o = __p.__offset(42); return o != 0 ? (FlatDataGlobal.ArmorType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ArmorType.LightArmor; } }
  public FlatDataGlobal.AimIKType Aimiktype { get { int o = __p.__offset(44); return o != 0 ? (FlatDataGlobal.AimIKType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.AimIKType.None; } }
  public FlatDataGlobal.School School { get { int o = __p.__offset(46); return o != 0 ? (FlatDataGlobal.School)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.School.None; } }
  public FlatDataGlobal.Club Club { get { int o = __p.__offset(48); return o != 0 ? (FlatDataGlobal.Club)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.Club.None; } }
  public int DefaultStarGrade { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxStarGrade { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.StatLevelUpType Statleveluptype { get { int o = __p.__offset(54); return o != 0 ? (FlatDataGlobal.StatLevelUpType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StatLevelUpType.Standard; } }
  public FlatDataGlobal.SquadType Squadtype { get { int o = __p.__offset(56); return o != 0 ? (FlatDataGlobal.SquadType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.SquadType.None; } }
  public bool Jumpable { get { int o = __p.__offset(58); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long PersonalityId { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterAIId { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ScenarioCharacter { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenarioCharacterBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetScenarioCharacterBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetScenarioCharacterArray() { return __p.__vector_as_array<byte>(64); }
  public uint SpawnTemplateId { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int FavorLevelupType { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.EquipmentCategory EquipmentSlot(int j) { int o = __p.__offset(70); return o != 0 ? (FlatDataGlobal.EquipmentCategory)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.EquipmentCategory)0; }
  public int EquipmentSlotLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.EquipmentCategory> GetEquipmentSlotBytes() { return __p.__vector_as_span<FlatDataGlobal.EquipmentCategory>(70, 4); }
#else
  public ArraySegment<byte>? GetEquipmentSlotBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public FlatDataGlobal.EquipmentCategory[] GetEquipmentSlotArray() { int o = __p.__offset(70); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.EquipmentCategory[] a = new FlatDataGlobal.EquipmentCategory[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.EquipmentCategory)__p.bb.GetInt(p + i * 4); } return a; }
  public string SpineResourceName { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpineResourceNameBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetSpineResourceNameBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetSpineResourceNameArray() { return __p.__vector_as_array<byte>(72); }
  public string SpineResourceNameDiorama { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpineResourceNameDioramaBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetSpineResourceNameDioramaBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetSpineResourceNameDioramaArray() { return __p.__vector_as_array<byte>(74); }
  public FlatDataGlobal.EntityMaterialType Entitymaterialtype { get { int o = __p.__offset(76); return o != 0 ? (FlatDataGlobal.EntityMaterialType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.EntityMaterialType.Wood; } }
  public string ModelPrefabName { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelPrefabNameBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetModelPrefabNameBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetModelPrefabNameArray() { return __p.__vector_as_array<byte>(78); }
  public string TextureDir { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureDirBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetTextureDirBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetTextureDirArray() { return __p.__vector_as_array<byte>(80); }
  public string TextureEchelon { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureEchelonBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetTextureEchelonBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetTextureEchelonArray() { return __p.__vector_as_array<byte>(82); }
  public string CollectionTexturePath { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionTexturePathBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetCollectionTexturePathBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetCollectionTexturePathArray() { return __p.__vector_as_array<byte>(84); }
  public string CollectionBGTexturePath { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionBGTexturePathBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetCollectionBGTexturePathBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetCollectionBGTexturePathArray() { return __p.__vector_as_array<byte>(86); }
  public bool UseObjectHPBAR { get { int o = __p.__offset(88); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string TextureBoss { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureBossBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetTextureBossBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetTextureBossArray() { return __p.__vector_as_array<byte>(90); }
  public string TextureSkillCard(int j) { int o = __p.__offset(92); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TextureSkillCardLength { get { int o = __p.__offset(92); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string WeaponImagePath { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeaponImagePathBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetWeaponImagePathBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetWeaponImagePathArray() { return __p.__vector_as_array<byte>(94); }
  public uint WeaponLocalizeId { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool DisplayEnemyInfo { get { int o = __p.__offset(98); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long BodyRadius { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RandomEffectRadius { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool HPBarHide { get { int o = __p.__offset(104); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float HpBarHeight { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HighlightFloaterHeight { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmojiOffsetX { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmojiOffsetY { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int MoveStartFrame { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MoveEndFrame { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int JumpMotionFrame { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AppearFrame { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool CanMove { get { int o = __p.__offset(122); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanFix { get { int o = __p.__offset(124); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanCrowdControl { get { int o = __p.__offset(126); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanBattleItemMove { get { int o = __p.__offset(128); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsAirUnit { get { int o = __p.__offset(130); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long AirUnitHeight { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.Tag Tags(int j) { int o = __p.__offset(134); return o != 0 ? (FlatDataGlobal.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.Tag)0; }
  public int TagsLength { get { int o = __p.__offset(134); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.Tag> GetTagsBytes() { return __p.__vector_as_span<FlatDataGlobal.Tag>(134, 4); }
#else
  public ArraySegment<byte>? GetTagsBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public FlatDataGlobal.Tag[] GetTagsArray() { int o = __p.__offset(134); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.Tag[] a = new FlatDataGlobal.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public long SecretStoneItemId { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int SecretStoneItemAmount { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long CharacterPieceItemId { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CharacterPieceItemAmount { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long CombineRecipeId { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string InformationPacel { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInformationPacelBytes() { return __p.__vector_as_span<byte>(146, 1); }
#else
  public ArraySegment<byte>? GetInformationPacelBytes() { return __p.__vector_as_arraysegment(146); }
#endif
  public byte[] GetInformationPacelArray() { return __p.__vector_as_array<byte>(146); }
  public string AnimationSSR { get { int o = __p.__offset(148); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationSSRBytes() { return __p.__vector_as_span<byte>(148, 1); }
#else
  public ArraySegment<byte>? GetAnimationSSRBytes() { return __p.__vector_as_arraysegment(148); }
#endif
  public byte[] GetAnimationSSRArray() { return __p.__vector_as_array<byte>(148); }
  public string EnterStrategyAnimationName { get { int o = __p.__offset(150); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnterStrategyAnimationNameBytes() { return __p.__vector_as_span<byte>(150, 1); }
#else
  public ArraySegment<byte>? GetEnterStrategyAnimationNameBytes() { return __p.__vector_as_arraysegment(150); }
#endif
  public byte[] GetEnterStrategyAnimationNameArray() { return __p.__vector_as_array<byte>(150); }

  public static Offset<FlatDataGlobal.CharacterExcel> CreateCharacterExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset DevNameOffset = default(StringOffset),
      FlatDataGlobal.ProductionStep productionstep = FlatDataGlobal.ProductionStep.ToDo,
      bool CollectionVisible = false,
      StringOffset ReleaseDateOffset = default(StringOffset),
      StringOffset CollectionVisibleStartDateOffset = default(StringOffset),
      StringOffset CollectionVisibleEndDateOffset = default(StringOffset),
      bool IsPlayableCharacter = false,
      uint LocalizeEtcId = 0,
      FlatDataGlobal.Rarity rarity = FlatDataGlobal.Rarity.N,
      bool IsNPC = false,
      FlatDataGlobal.TacticEntityType tacticentitytype = FlatDataGlobal.TacticEntityType.None,
      bool CanSurvive = false,
      bool IsDummy = false,
      int SubPartsCount = 0,
      FlatDataGlobal.TacticRole tacticrole = FlatDataGlobal.TacticRole.None,
      FlatDataGlobal.WeaponType weapontype = FlatDataGlobal.WeaponType.None,
      FlatDataGlobal.TacticRange tacticrange = FlatDataGlobal.TacticRange.Back,
      FlatDataGlobal.BulletType bullettype = FlatDataGlobal.BulletType.Normal,
      FlatDataGlobal.ArmorType armortype = FlatDataGlobal.ArmorType.LightArmor,
      FlatDataGlobal.AimIKType aimiktype = FlatDataGlobal.AimIKType.None,
      FlatDataGlobal.School school = FlatDataGlobal.School.None,
      FlatDataGlobal.Club club = FlatDataGlobal.Club.None,
      int DefaultStarGrade = 0,
      int MaxStarGrade = 0,
      FlatDataGlobal.StatLevelUpType statleveluptype = FlatDataGlobal.StatLevelUpType.Standard,
      FlatDataGlobal.SquadType squadtype = FlatDataGlobal.SquadType.None,
      bool Jumpable = false,
      long PersonalityId = 0,
      long CharacterAIId = 0,
      StringOffset ScenarioCharacterOffset = default(StringOffset),
      uint SpawnTemplateId = 0,
      int FavorLevelupType = 0,
      VectorOffset EquipmentSlotOffset = default(VectorOffset),
      StringOffset SpineResourceNameOffset = default(StringOffset),
      StringOffset SpineResourceNameDioramaOffset = default(StringOffset),
      FlatDataGlobal.EntityMaterialType entitymaterialtype = FlatDataGlobal.EntityMaterialType.Wood,
      StringOffset ModelPrefabNameOffset = default(StringOffset),
      StringOffset TextureDirOffset = default(StringOffset),
      StringOffset TextureEchelonOffset = default(StringOffset),
      StringOffset CollectionTexturePathOffset = default(StringOffset),
      StringOffset CollectionBGTexturePathOffset = default(StringOffset),
      bool UseObjectHPBAR = false,
      StringOffset TextureBossOffset = default(StringOffset),
      VectorOffset TextureSkillCardOffset = default(VectorOffset),
      StringOffset WeaponImagePathOffset = default(StringOffset),
      uint WeaponLocalizeId = 0,
      bool DisplayEnemyInfo = false,
      long BodyRadius = 0,
      long RandomEffectRadius = 0,
      bool HPBarHide = false,
      float HpBarHeight = 0.0f,
      float HighlightFloaterHeight = 0.0f,
      float EmojiOffsetX = 0.0f,
      float EmojiOffsetY = 0.0f,
      int MoveStartFrame = 0,
      int MoveEndFrame = 0,
      int JumpMotionFrame = 0,
      int AppearFrame = 0,
      bool CanMove = false,
      bool CanFix = false,
      bool CanCrowdControl = false,
      bool CanBattleItemMove = false,
      bool IsAirUnit = false,
      long AirUnitHeight = 0,
      VectorOffset TagsOffset = default(VectorOffset),
      long SecretStoneItemId = 0,
      int SecretStoneItemAmount = 0,
      long CharacterPieceItemId = 0,
      int CharacterPieceItemAmount = 0,
      long CombineRecipeId = 0,
      StringOffset InformationPacelOffset = default(StringOffset),
      StringOffset AnimationSSROffset = default(StringOffset),
      StringOffset EnterStrategyAnimationNameOffset = default(StringOffset)) {
    builder.StartTable(74);
    CharacterExcel.AddCombineRecipeId(builder, CombineRecipeId);
    CharacterExcel.AddCharacterPieceItemId(builder, CharacterPieceItemId);
    CharacterExcel.AddSecretStoneItemId(builder, SecretStoneItemId);
    CharacterExcel.AddAirUnitHeight(builder, AirUnitHeight);
    CharacterExcel.AddRandomEffectRadius(builder, RandomEffectRadius);
    CharacterExcel.AddBodyRadius(builder, BodyRadius);
    CharacterExcel.AddCharacterAIId(builder, CharacterAIId);
    CharacterExcel.AddPersonalityId(builder, PersonalityId);
    CharacterExcel.AddId(builder, Id);
    CharacterExcel.AddEnterStrategyAnimationName(builder, EnterStrategyAnimationNameOffset);
    CharacterExcel.AddAnimationSSR(builder, AnimationSSROffset);
    CharacterExcel.AddInformationPacel(builder, InformationPacelOffset);
    CharacterExcel.AddCharacterPieceItemAmount(builder, CharacterPieceItemAmount);
    CharacterExcel.AddSecretStoneItemAmount(builder, SecretStoneItemAmount);
    CharacterExcel.AddTags(builder, TagsOffset);
    CharacterExcel.AddAppearFrame(builder, AppearFrame);
    CharacterExcel.AddJumpMotionFrame(builder, JumpMotionFrame);
    CharacterExcel.AddMoveEndFrame(builder, MoveEndFrame);
    CharacterExcel.AddMoveStartFrame(builder, MoveStartFrame);
    CharacterExcel.AddEmojiOffsetY(builder, EmojiOffsetY);
    CharacterExcel.AddEmojiOffsetX(builder, EmojiOffsetX);
    CharacterExcel.AddHighlightFloaterHeight(builder, HighlightFloaterHeight);
    CharacterExcel.AddHpBarHeight(builder, HpBarHeight);
    CharacterExcel.AddWeaponLocalizeId(builder, WeaponLocalizeId);
    CharacterExcel.AddWeaponImagePath(builder, WeaponImagePathOffset);
    CharacterExcel.AddTextureSkillCard(builder, TextureSkillCardOffset);
    CharacterExcel.AddTextureBoss(builder, TextureBossOffset);
    CharacterExcel.AddCollectionBGTexturePath(builder, CollectionBGTexturePathOffset);
    CharacterExcel.AddCollectionTexturePath(builder, CollectionTexturePathOffset);
    CharacterExcel.AddTextureEchelon(builder, TextureEchelonOffset);
    CharacterExcel.AddTextureDir(builder, TextureDirOffset);
    CharacterExcel.AddModelPrefabName(builder, ModelPrefabNameOffset);
    CharacterExcel.AddEntitymaterialtype(builder, entitymaterialtype);
    CharacterExcel.AddSpineResourceNameDiorama(builder, SpineResourceNameDioramaOffset);
    CharacterExcel.AddSpineResourceName(builder, SpineResourceNameOffset);
    CharacterExcel.AddEquipmentSlot(builder, EquipmentSlotOffset);
    CharacterExcel.AddFavorLevelupType(builder, FavorLevelupType);
    CharacterExcel.AddSpawnTemplateId(builder, SpawnTemplateId);
    CharacterExcel.AddScenarioCharacter(builder, ScenarioCharacterOffset);
    CharacterExcel.AddSquadtype(builder, squadtype);
    CharacterExcel.AddStatleveluptype(builder, statleveluptype);
    CharacterExcel.AddMaxStarGrade(builder, MaxStarGrade);
    CharacterExcel.AddDefaultStarGrade(builder, DefaultStarGrade);
    CharacterExcel.AddClub(builder, club);
    CharacterExcel.AddSchool(builder, school);
    CharacterExcel.AddAimiktype(builder, aimiktype);
    CharacterExcel.AddArmortype(builder, armortype);
    CharacterExcel.AddBullettype(builder, bullettype);
    CharacterExcel.AddTacticrange(builder, tacticrange);
    CharacterExcel.AddWeapontype(builder, weapontype);
    CharacterExcel.AddTacticrole(builder, tacticrole);
    CharacterExcel.AddSubPartsCount(builder, SubPartsCount);
    CharacterExcel.AddTacticentitytype(builder, tacticentitytype);
    CharacterExcel.AddRarity(builder, rarity);
    CharacterExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    CharacterExcel.AddCollectionVisibleEndDate(builder, CollectionVisibleEndDateOffset);
    CharacterExcel.AddCollectionVisibleStartDate(builder, CollectionVisibleStartDateOffset);
    CharacterExcel.AddReleaseDate(builder, ReleaseDateOffset);
    CharacterExcel.AddProductionstep(builder, productionstep);
    CharacterExcel.AddDevName(builder, DevNameOffset);
    CharacterExcel.AddIsAirUnit(builder, IsAirUnit);
    CharacterExcel.AddCanBattleItemMove(builder, CanBattleItemMove);
    CharacterExcel.AddCanCrowdControl(builder, CanCrowdControl);
    CharacterExcel.AddCanFix(builder, CanFix);
    CharacterExcel.AddCanMove(builder, CanMove);
    CharacterExcel.AddHPBarHide(builder, HPBarHide);
    CharacterExcel.AddDisplayEnemyInfo(builder, DisplayEnemyInfo);
    CharacterExcel.AddUseObjectHPBAR(builder, UseObjectHPBAR);
    CharacterExcel.AddJumpable(builder, Jumpable);
    CharacterExcel.AddIsDummy(builder, IsDummy);
    CharacterExcel.AddCanSurvive(builder, CanSurvive);
    CharacterExcel.AddIsNPC(builder, IsNPC);
    CharacterExcel.AddIsPlayableCharacter(builder, IsPlayableCharacter);
    CharacterExcel.AddCollectionVisible(builder, CollectionVisible);
    return CharacterExcel.EndCharacterExcel(builder);
  }

  public static void StartCharacterExcel(FlatBufferBuilder builder) { builder.StartTable(74); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddDevName(FlatBufferBuilder builder, StringOffset DevNameOffset) { builder.AddOffset(1, DevNameOffset.Value, 0); }
  public static void AddProductionstep(FlatBufferBuilder builder, FlatDataGlobal.ProductionStep productionstep) { builder.AddInt(2, (int)productionstep, 0); }
  public static void AddCollectionVisible(FlatBufferBuilder builder, bool CollectionVisible) { builder.AddBool(3, CollectionVisible, false); }
  public static void AddReleaseDate(FlatBufferBuilder builder, StringOffset ReleaseDateOffset) { builder.AddOffset(4, ReleaseDateOffset.Value, 0); }
  public static void AddCollectionVisibleStartDate(FlatBufferBuilder builder, StringOffset CollectionVisibleStartDateOffset) { builder.AddOffset(5, CollectionVisibleStartDateOffset.Value, 0); }
  public static void AddCollectionVisibleEndDate(FlatBufferBuilder builder, StringOffset CollectionVisibleEndDateOffset) { builder.AddOffset(6, CollectionVisibleEndDateOffset.Value, 0); }
  public static void AddIsPlayableCharacter(FlatBufferBuilder builder, bool IsPlayableCharacter) { builder.AddBool(7, IsPlayableCharacter, false); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint LocalizeEtcId) { builder.AddUint(8, LocalizeEtcId, 0); }
  public static void AddRarity(FlatBufferBuilder builder, FlatDataGlobal.Rarity rarity) { builder.AddInt(9, (int)rarity, 0); }
  public static void AddIsNPC(FlatBufferBuilder builder, bool IsNPC) { builder.AddBool(10, IsNPC, false); }
  public static void AddTacticentitytype(FlatBufferBuilder builder, FlatDataGlobal.TacticEntityType tacticentitytype) { builder.AddInt(11, (int)tacticentitytype, 0); }
  public static void AddCanSurvive(FlatBufferBuilder builder, bool CanSurvive) { builder.AddBool(12, CanSurvive, false); }
  public static void AddIsDummy(FlatBufferBuilder builder, bool IsDummy) { builder.AddBool(13, IsDummy, false); }
  public static void AddSubPartsCount(FlatBufferBuilder builder, int SubPartsCount) { builder.AddInt(14, SubPartsCount, 0); }
  public static void AddTacticrole(FlatBufferBuilder builder, FlatDataGlobal.TacticRole tacticrole) { builder.AddInt(15, (int)tacticrole, 0); }
  public static void AddWeapontype(FlatBufferBuilder builder, FlatDataGlobal.WeaponType weapontype) { builder.AddInt(16, (int)weapontype, 0); }
  public static void AddTacticrange(FlatBufferBuilder builder, FlatDataGlobal.TacticRange tacticrange) { builder.AddInt(17, (int)tacticrange, 0); }
  public static void AddBullettype(FlatBufferBuilder builder, FlatDataGlobal.BulletType bullettype) { builder.AddInt(18, (int)bullettype, 0); }
  public static void AddArmortype(FlatBufferBuilder builder, FlatDataGlobal.ArmorType armortype) { builder.AddInt(19, (int)armortype, 0); }
  public static void AddAimiktype(FlatBufferBuilder builder, FlatDataGlobal.AimIKType aimiktype) { builder.AddInt(20, (int)aimiktype, 0); }
  public static void AddSchool(FlatBufferBuilder builder, FlatDataGlobal.School school) { builder.AddInt(21, (int)school, 0); }
  public static void AddClub(FlatBufferBuilder builder, FlatDataGlobal.Club club) { builder.AddInt(22, (int)club, 0); }
  public static void AddDefaultStarGrade(FlatBufferBuilder builder, int DefaultStarGrade) { builder.AddInt(23, DefaultStarGrade, 0); }
  public static void AddMaxStarGrade(FlatBufferBuilder builder, int MaxStarGrade) { builder.AddInt(24, MaxStarGrade, 0); }
  public static void AddStatleveluptype(FlatBufferBuilder builder, FlatDataGlobal.StatLevelUpType statleveluptype) { builder.AddInt(25, (int)statleveluptype, 0); }
  public static void AddSquadtype(FlatBufferBuilder builder, FlatDataGlobal.SquadType squadtype) { builder.AddInt(26, (int)squadtype, 0); }
  public static void AddJumpable(FlatBufferBuilder builder, bool Jumpable) { builder.AddBool(27, Jumpable, false); }
  public static void AddPersonalityId(FlatBufferBuilder builder, long PersonalityId) { builder.AddLong(28, PersonalityId, 0); }
  public static void AddCharacterAIId(FlatBufferBuilder builder, long CharacterAIId) { builder.AddLong(29, CharacterAIId, 0); }
  public static void AddScenarioCharacter(FlatBufferBuilder builder, StringOffset ScenarioCharacterOffset) { builder.AddOffset(30, ScenarioCharacterOffset.Value, 0); }
  public static void AddSpawnTemplateId(FlatBufferBuilder builder, uint SpawnTemplateId) { builder.AddUint(31, SpawnTemplateId, 0); }
  public static void AddFavorLevelupType(FlatBufferBuilder builder, int FavorLevelupType) { builder.AddInt(32, FavorLevelupType, 0); }
  public static void AddEquipmentSlot(FlatBufferBuilder builder, VectorOffset EquipmentSlotOffset) { builder.AddOffset(33, EquipmentSlotOffset.Value, 0); }
  public static VectorOffset CreateEquipmentSlotVector(FlatBufferBuilder builder, FlatDataGlobal.EquipmentCategory[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.EquipmentCategory[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.EquipmentCategory> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.EquipmentCategory>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEquipmentSlotVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpineResourceName(FlatBufferBuilder builder, StringOffset SpineResourceNameOffset) { builder.AddOffset(34, SpineResourceNameOffset.Value, 0); }
  public static void AddSpineResourceNameDiorama(FlatBufferBuilder builder, StringOffset SpineResourceNameDioramaOffset) { builder.AddOffset(35, SpineResourceNameDioramaOffset.Value, 0); }
  public static void AddEntitymaterialtype(FlatBufferBuilder builder, FlatDataGlobal.EntityMaterialType entitymaterialtype) { builder.AddInt(36, (int)entitymaterialtype, 0); }
  public static void AddModelPrefabName(FlatBufferBuilder builder, StringOffset ModelPrefabNameOffset) { builder.AddOffset(37, ModelPrefabNameOffset.Value, 0); }
  public static void AddTextureDir(FlatBufferBuilder builder, StringOffset TextureDirOffset) { builder.AddOffset(38, TextureDirOffset.Value, 0); }
  public static void AddTextureEchelon(FlatBufferBuilder builder, StringOffset TextureEchelonOffset) { builder.AddOffset(39, TextureEchelonOffset.Value, 0); }
  public static void AddCollectionTexturePath(FlatBufferBuilder builder, StringOffset CollectionTexturePathOffset) { builder.AddOffset(40, CollectionTexturePathOffset.Value, 0); }
  public static void AddCollectionBGTexturePath(FlatBufferBuilder builder, StringOffset CollectionBGTexturePathOffset) { builder.AddOffset(41, CollectionBGTexturePathOffset.Value, 0); }
  public static void AddUseObjectHPBAR(FlatBufferBuilder builder, bool UseObjectHPBAR) { builder.AddBool(42, UseObjectHPBAR, false); }
  public static void AddTextureBoss(FlatBufferBuilder builder, StringOffset TextureBossOffset) { builder.AddOffset(43, TextureBossOffset.Value, 0); }
  public static void AddTextureSkillCard(FlatBufferBuilder builder, VectorOffset TextureSkillCardOffset) { builder.AddOffset(44, TextureSkillCardOffset.Value, 0); }
  public static VectorOffset CreateTextureSkillCardVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTextureSkillCardVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTextureSkillCardVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTextureSkillCardVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTextureSkillCardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeaponImagePath(FlatBufferBuilder builder, StringOffset WeaponImagePathOffset) { builder.AddOffset(45, WeaponImagePathOffset.Value, 0); }
  public static void AddWeaponLocalizeId(FlatBufferBuilder builder, uint WeaponLocalizeId) { builder.AddUint(46, WeaponLocalizeId, 0); }
  public static void AddDisplayEnemyInfo(FlatBufferBuilder builder, bool DisplayEnemyInfo) { builder.AddBool(47, DisplayEnemyInfo, false); }
  public static void AddBodyRadius(FlatBufferBuilder builder, long BodyRadius) { builder.AddLong(48, BodyRadius, 0); }
  public static void AddRandomEffectRadius(FlatBufferBuilder builder, long RandomEffectRadius) { builder.AddLong(49, RandomEffectRadius, 0); }
  public static void AddHPBarHide(FlatBufferBuilder builder, bool HPBarHide) { builder.AddBool(50, HPBarHide, false); }
  public static void AddHpBarHeight(FlatBufferBuilder builder, float HpBarHeight) { builder.AddFloat(51, HpBarHeight, 0.0f); }
  public static void AddHighlightFloaterHeight(FlatBufferBuilder builder, float HighlightFloaterHeight) { builder.AddFloat(52, HighlightFloaterHeight, 0.0f); }
  public static void AddEmojiOffsetX(FlatBufferBuilder builder, float EmojiOffsetX) { builder.AddFloat(53, EmojiOffsetX, 0.0f); }
  public static void AddEmojiOffsetY(FlatBufferBuilder builder, float EmojiOffsetY) { builder.AddFloat(54, EmojiOffsetY, 0.0f); }
  public static void AddMoveStartFrame(FlatBufferBuilder builder, int MoveStartFrame) { builder.AddInt(55, MoveStartFrame, 0); }
  public static void AddMoveEndFrame(FlatBufferBuilder builder, int MoveEndFrame) { builder.AddInt(56, MoveEndFrame, 0); }
  public static void AddJumpMotionFrame(FlatBufferBuilder builder, int JumpMotionFrame) { builder.AddInt(57, JumpMotionFrame, 0); }
  public static void AddAppearFrame(FlatBufferBuilder builder, int AppearFrame) { builder.AddInt(58, AppearFrame, 0); }
  public static void AddCanMove(FlatBufferBuilder builder, bool CanMove) { builder.AddBool(59, CanMove, false); }
  public static void AddCanFix(FlatBufferBuilder builder, bool CanFix) { builder.AddBool(60, CanFix, false); }
  public static void AddCanCrowdControl(FlatBufferBuilder builder, bool CanCrowdControl) { builder.AddBool(61, CanCrowdControl, false); }
  public static void AddCanBattleItemMove(FlatBufferBuilder builder, bool CanBattleItemMove) { builder.AddBool(62, CanBattleItemMove, false); }
  public static void AddIsAirUnit(FlatBufferBuilder builder, bool IsAirUnit) { builder.AddBool(63, IsAirUnit, false); }
  public static void AddAirUnitHeight(FlatBufferBuilder builder, long AirUnitHeight) { builder.AddLong(64, AirUnitHeight, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset TagsOffset) { builder.AddOffset(65, TagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSecretStoneItemId(FlatBufferBuilder builder, long SecretStoneItemId) { builder.AddLong(66, SecretStoneItemId, 0); }
  public static void AddSecretStoneItemAmount(FlatBufferBuilder builder, int SecretStoneItemAmount) { builder.AddInt(67, SecretStoneItemAmount, 0); }
  public static void AddCharacterPieceItemId(FlatBufferBuilder builder, long CharacterPieceItemId) { builder.AddLong(68, CharacterPieceItemId, 0); }
  public static void AddCharacterPieceItemAmount(FlatBufferBuilder builder, int CharacterPieceItemAmount) { builder.AddInt(69, CharacterPieceItemAmount, 0); }
  public static void AddCombineRecipeId(FlatBufferBuilder builder, long CombineRecipeId) { builder.AddLong(70, CombineRecipeId, 0); }
  public static void AddInformationPacel(FlatBufferBuilder builder, StringOffset InformationPacelOffset) { builder.AddOffset(71, InformationPacelOffset.Value, 0); }
  public static void AddAnimationSSR(FlatBufferBuilder builder, StringOffset AnimationSSROffset) { builder.AddOffset(72, AnimationSSROffset.Value, 0); }
  public static void AddEnterStrategyAnimationName(FlatBufferBuilder builder, StringOffset EnterStrategyAnimationNameOffset) { builder.AddOffset(73, EnterStrategyAnimationNameOffset.Value, 0); }
  public static Offset<FlatDataGlobal.CharacterExcel> EndCharacterExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.CharacterExcel>(o);
  }
}


}
