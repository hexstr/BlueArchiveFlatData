// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CharacterDialogFieldExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CharacterDialogFieldExcel GetRootAsCharacterDialogFieldExcel(ByteBuffer _bb) { return GetRootAsCharacterDialogFieldExcel(_bb, new CharacterDialogFieldExcel()); }
  public static CharacterDialogFieldExcel GetRootAsCharacterDialogFieldExcel(ByteBuffer _bb, CharacterDialogFieldExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterDialogFieldExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Phase { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TargetIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.FieldDialogType DialogType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.FieldDialogType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.FieldDialogType.None; } }
  public long Duration { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string MotionName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMotionNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMotionNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMotionNameArray() { return __p.__vector_as_array<byte>(14); }
  public bool IsInteractionDialog { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HideUI { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string LocalizeKR { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeKRBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetLocalizeKRBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetLocalizeKRArray() { return __p.__vector_as_array<byte>(20); }
  public string LocalizeJP { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeJPBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetLocalizeJPBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetLocalizeJPArray() { return __p.__vector_as_array<byte>(22); }
  public string LocalizeTH { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeTHBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetLocalizeTHBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetLocalizeTHArray() { return __p.__vector_as_array<byte>(24); }
  public string LocalizeTW { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeTWBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetLocalizeTWBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetLocalizeTWArray() { return __p.__vector_as_array<byte>(26); }
  public string LocalizeEN { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeENBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetLocalizeENBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetLocalizeENArray() { return __p.__vector_as_array<byte>(28); }

  public static Offset<FlatDataGlobal.CharacterDialogFieldExcel> CreateCharacterDialogFieldExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      int Phase = 0,
      int TargetIndex = 0,
      FlatDataGlobal.FieldDialogType DialogType = FlatDataGlobal.FieldDialogType.None,
      long Duration = 0,
      StringOffset MotionNameOffset = default(StringOffset),
      bool IsInteractionDialog = false,
      bool HideUI = false,
      StringOffset LocalizeKROffset = default(StringOffset),
      StringOffset LocalizeJPOffset = default(StringOffset),
      StringOffset LocalizeTHOffset = default(StringOffset),
      StringOffset LocalizeTWOffset = default(StringOffset),
      StringOffset LocalizeENOffset = default(StringOffset)) {
    builder.StartTable(13);
    CharacterDialogFieldExcel.AddDuration(builder, Duration);
    CharacterDialogFieldExcel.AddGroupId(builder, GroupId);
    CharacterDialogFieldExcel.AddLocalizeEN(builder, LocalizeENOffset);
    CharacterDialogFieldExcel.AddLocalizeTW(builder, LocalizeTWOffset);
    CharacterDialogFieldExcel.AddLocalizeTH(builder, LocalizeTHOffset);
    CharacterDialogFieldExcel.AddLocalizeJP(builder, LocalizeJPOffset);
    CharacterDialogFieldExcel.AddLocalizeKR(builder, LocalizeKROffset);
    CharacterDialogFieldExcel.AddMotionName(builder, MotionNameOffset);
    CharacterDialogFieldExcel.AddDialogType(builder, DialogType);
    CharacterDialogFieldExcel.AddTargetIndex(builder, TargetIndex);
    CharacterDialogFieldExcel.AddPhase(builder, Phase);
    CharacterDialogFieldExcel.AddHideUI(builder, HideUI);
    CharacterDialogFieldExcel.AddIsInteractionDialog(builder, IsInteractionDialog);
    return CharacterDialogFieldExcel.EndCharacterDialogFieldExcel(builder);
  }

  public static void StartCharacterDialogFieldExcel(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(0, GroupId, 0); }
  public static void AddPhase(FlatBufferBuilder builder, int Phase) { builder.AddInt(1, Phase, 0); }
  public static void AddTargetIndex(FlatBufferBuilder builder, int TargetIndex) { builder.AddInt(2, TargetIndex, 0); }
  public static void AddDialogType(FlatBufferBuilder builder, FlatDataGlobal.FieldDialogType DialogType) { builder.AddInt(3, (int)DialogType, 0); }
  public static void AddDuration(FlatBufferBuilder builder, long Duration) { builder.AddLong(4, Duration, 0); }
  public static void AddMotionName(FlatBufferBuilder builder, StringOffset MotionNameOffset) { builder.AddOffset(5, MotionNameOffset.Value, 0); }
  public static void AddIsInteractionDialog(FlatBufferBuilder builder, bool IsInteractionDialog) { builder.AddBool(6, IsInteractionDialog, false); }
  public static void AddHideUI(FlatBufferBuilder builder, bool HideUI) { builder.AddBool(7, HideUI, false); }
  public static void AddLocalizeKR(FlatBufferBuilder builder, StringOffset LocalizeKROffset) { builder.AddOffset(8, LocalizeKROffset.Value, 0); }
  public static void AddLocalizeJP(FlatBufferBuilder builder, StringOffset LocalizeJPOffset) { builder.AddOffset(9, LocalizeJPOffset.Value, 0); }
  public static void AddLocalizeTH(FlatBufferBuilder builder, StringOffset LocalizeTHOffset) { builder.AddOffset(10, LocalizeTHOffset.Value, 0); }
  public static void AddLocalizeTW(FlatBufferBuilder builder, StringOffset LocalizeTWOffset) { builder.AddOffset(11, LocalizeTWOffset.Value, 0); }
  public static void AddLocalizeEN(FlatBufferBuilder builder, StringOffset LocalizeENOffset) { builder.AddOffset(12, LocalizeENOffset.Value, 0); }
  public static Offset<FlatDataGlobal.CharacterDialogFieldExcel> EndCharacterDialogFieldExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.CharacterDialogFieldExcel>(o);
  }
}


}
