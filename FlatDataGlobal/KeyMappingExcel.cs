// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct KeyMappingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static KeyMappingExcel GetRootAsKeyMappingExcel(ByteBuffer _bb) { return GetRootAsKeyMappingExcel(_bb, new KeyMappingExcel()); }
  public static KeyMappingExcel GetRootAsKeyMappingExcel(ByteBuffer _bb, KeyMappingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyMappingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string TargetKeyCode { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetKeyCodeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTargetKeyCodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTargetKeyCodeArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsDisplay { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsUsed { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsLongPress { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IgnorePosCheck { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float IconPositionX { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float IconPositionY { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float IconScaleX { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float IconScaleY { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<FlatDataGlobal.KeyMappingExcel> CreateKeyMappingExcel(FlatBufferBuilder builder,
      StringOffset IdOffset = default(StringOffset),
      StringOffset TargetKeyCodeOffset = default(StringOffset),
      bool IsDisplay = false,
      bool IsUsed = false,
      bool IsLongPress = false,
      bool IgnorePosCheck = false,
      float IconPositionX = 0.0f,
      float IconPositionY = 0.0f,
      float IconScaleX = 0.0f,
      float IconScaleY = 0.0f) {
    builder.StartTable(10);
    KeyMappingExcel.AddIconScaleY(builder, IconScaleY);
    KeyMappingExcel.AddIconScaleX(builder, IconScaleX);
    KeyMappingExcel.AddIconPositionY(builder, IconPositionY);
    KeyMappingExcel.AddIconPositionX(builder, IconPositionX);
    KeyMappingExcel.AddTargetKeyCode(builder, TargetKeyCodeOffset);
    KeyMappingExcel.AddId(builder, IdOffset);
    KeyMappingExcel.AddIgnorePosCheck(builder, IgnorePosCheck);
    KeyMappingExcel.AddIsLongPress(builder, IsLongPress);
    KeyMappingExcel.AddIsUsed(builder, IsUsed);
    KeyMappingExcel.AddIsDisplay(builder, IsDisplay);
    return KeyMappingExcel.EndKeyMappingExcel(builder);
  }

  public static void StartKeyMappingExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, StringOffset IdOffset) { builder.AddOffset(0, IdOffset.Value, 0); }
  public static void AddTargetKeyCode(FlatBufferBuilder builder, StringOffset TargetKeyCodeOffset) { builder.AddOffset(1, TargetKeyCodeOffset.Value, 0); }
  public static void AddIsDisplay(FlatBufferBuilder builder, bool IsDisplay) { builder.AddBool(2, IsDisplay, false); }
  public static void AddIsUsed(FlatBufferBuilder builder, bool IsUsed) { builder.AddBool(3, IsUsed, false); }
  public static void AddIsLongPress(FlatBufferBuilder builder, bool IsLongPress) { builder.AddBool(4, IsLongPress, false); }
  public static void AddIgnorePosCheck(FlatBufferBuilder builder, bool IgnorePosCheck) { builder.AddBool(5, IgnorePosCheck, false); }
  public static void AddIconPositionX(FlatBufferBuilder builder, float IconPositionX) { builder.AddFloat(6, IconPositionX, 0.0f); }
  public static void AddIconPositionY(FlatBufferBuilder builder, float IconPositionY) { builder.AddFloat(7, IconPositionY, 0.0f); }
  public static void AddIconScaleX(FlatBufferBuilder builder, float IconScaleX) { builder.AddFloat(8, IconScaleX, 0.0f); }
  public static void AddIconScaleY(FlatBufferBuilder builder, float IconScaleY) { builder.AddFloat(9, IconScaleY, 0.0f); }
  public static Offset<FlatDataGlobal.KeyMappingExcel> EndKeyMappingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.KeyMappingExcel>(o);
  }
}


}
