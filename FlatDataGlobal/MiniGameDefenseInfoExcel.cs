// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDefenseInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDefenseInfoExcel GetRootAsMiniGameDefenseInfoExcel(ByteBuffer _bb) { return GetRootAsMiniGameDefenseInfoExcel(_bb, new MiniGameDefenseInfoExcel()); }
  public static MiniGameDefenseInfoExcel GetRootAsMiniGameDefenseInfoExcel(ByteBuffer _bb, MiniGameDefenseInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDefenseInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType DefenseBattleParcelType { get { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long DefenseBattleParcelId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenseBattleMultiplierMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool DisableRootMotion { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.MiniGameDefenseInfoExcel> CreateMiniGameDefenseInfoExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      FlatDataGlobal.ParcelType DefenseBattleParcelType = FlatDataGlobal.ParcelType.None,
      long DefenseBattleParcelId = 0,
      long DefenseBattleMultiplierMax = 0,
      bool DisableRootMotion = false) {
    builder.StartTable(5);
    MiniGameDefenseInfoExcel.AddDefenseBattleMultiplierMax(builder, DefenseBattleMultiplierMax);
    MiniGameDefenseInfoExcel.AddDefenseBattleParcelId(builder, DefenseBattleParcelId);
    MiniGameDefenseInfoExcel.AddEventContentId(builder, EventContentId);
    MiniGameDefenseInfoExcel.AddDefenseBattleParcelType(builder, DefenseBattleParcelType);
    MiniGameDefenseInfoExcel.AddDisableRootMotion(builder, DisableRootMotion);
    return MiniGameDefenseInfoExcel.EndMiniGameDefenseInfoExcel(builder);
  }

  public static void StartMiniGameDefenseInfoExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddDefenseBattleParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType DefenseBattleParcelType) { builder.AddInt(1, (int)DefenseBattleParcelType, 0); }
  public static void AddDefenseBattleParcelId(FlatBufferBuilder builder, long DefenseBattleParcelId) { builder.AddLong(2, DefenseBattleParcelId, 0); }
  public static void AddDefenseBattleMultiplierMax(FlatBufferBuilder builder, long DefenseBattleMultiplierMax) { builder.AddLong(3, DefenseBattleMultiplierMax, 0); }
  public static void AddDisableRootMotion(FlatBufferBuilder builder, bool DisableRootMotion) { builder.AddBool(4, DisableRootMotion, false); }
  public static Offset<FlatDataGlobal.MiniGameDefenseInfoExcel> EndMiniGameDefenseInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameDefenseInfoExcel>(o);
  }
}


}
