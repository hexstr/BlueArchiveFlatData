// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UnderCoverStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static UnderCoverStageExcel GetRootAsUnderCoverStageExcel(ByteBuffer _bb) { return GetRootAsUnderCoverStageExcel(_bb, new UnderCoverStageExcel()); }
  public static UnderCoverStageExcel GetRootAsUnderCoverStageExcel(ByteBuffer _bb, UnderCoverStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnderCoverStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StageNameFile { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageNameFileBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStageNameFileBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStageNameFileArray() { return __p.__vector_as_array<byte>(6); }
  public int StageTryCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ApplySkip { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SkipCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowClearScene { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint StageTips { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint StageName { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatDataGlobal.UnderCoverStageExcel> CreateUnderCoverStageExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      StringOffset StageNameFileOffset = default(StringOffset),
      int StageTryCount = 0,
      bool ApplySkip = false,
      int SkipCount = 0,
      bool ShowClearScene = false,
      uint StageTips = 0,
      uint StageName = 0) {
    builder.StartTable(8);
    UnderCoverStageExcel.AddGroupId(builder, GroupId);
    UnderCoverStageExcel.AddStageName(builder, StageName);
    UnderCoverStageExcel.AddStageTips(builder, StageTips);
    UnderCoverStageExcel.AddSkipCount(builder, SkipCount);
    UnderCoverStageExcel.AddStageTryCount(builder, StageTryCount);
    UnderCoverStageExcel.AddStageNameFile(builder, StageNameFileOffset);
    UnderCoverStageExcel.AddShowClearScene(builder, ShowClearScene);
    UnderCoverStageExcel.AddApplySkip(builder, ApplySkip);
    return UnderCoverStageExcel.EndUnderCoverStageExcel(builder);
  }

  public static void StartUnderCoverStageExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(0, GroupId, 0); }
  public static void AddStageNameFile(FlatBufferBuilder builder, StringOffset StageNameFileOffset) { builder.AddOffset(1, StageNameFileOffset.Value, 0); }
  public static void AddStageTryCount(FlatBufferBuilder builder, int StageTryCount) { builder.AddInt(2, StageTryCount, 0); }
  public static void AddApplySkip(FlatBufferBuilder builder, bool ApplySkip) { builder.AddBool(3, ApplySkip, false); }
  public static void AddSkipCount(FlatBufferBuilder builder, int SkipCount) { builder.AddInt(4, SkipCount, 0); }
  public static void AddShowClearScene(FlatBufferBuilder builder, bool ShowClearScene) { builder.AddBool(5, ShowClearScene, false); }
  public static void AddStageTips(FlatBufferBuilder builder, uint StageTips) { builder.AddUint(6, StageTips, 0); }
  public static void AddStageName(FlatBufferBuilder builder, uint StageName) { builder.AddUint(7, StageName, 0); }
  public static Offset<FlatDataGlobal.UnderCoverStageExcel> EndUnderCoverStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.UnderCoverStageExcel>(o);
  }
}


}
