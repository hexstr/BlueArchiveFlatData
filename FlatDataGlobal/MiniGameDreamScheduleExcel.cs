// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDreamScheduleExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDreamScheduleExcel GetRootAsMiniGameDreamScheduleExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamScheduleExcel(_bb, new MiniGameDreamScheduleExcel()); }
  public static MiniGameDreamScheduleExcel GetRootAsMiniGameDreamScheduleExcel(ByteBuffer _bb, MiniGameDreamScheduleExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamScheduleExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerScheduleGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DisplayOrder { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string IconPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(12); }
  public string LoadingResource01 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingResource01Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLoadingResource01Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLoadingResource01Array() { return __p.__vector_as_array<byte>(14); }
  public string LoadingResource02 { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingResource02Bytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLoadingResource02Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLoadingResource02Array() { return __p.__vector_as_array<byte>(16); }
  public string AnimationName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAnimationNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAnimationNameArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<FlatDataGlobal.MiniGameDreamScheduleExcel> CreateMiniGameDreamScheduleExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long DreamMakerScheduleGroupId = 0,
      long DisplayOrder = 0,
      uint LocalizeEtcId = 0,
      StringOffset IconPathOffset = default(StringOffset),
      StringOffset LoadingResource01Offset = default(StringOffset),
      StringOffset LoadingResource02Offset = default(StringOffset),
      StringOffset AnimationNameOffset = default(StringOffset)) {
    builder.StartTable(8);
    MiniGameDreamScheduleExcel.AddDisplayOrder(builder, DisplayOrder);
    MiniGameDreamScheduleExcel.AddDreamMakerScheduleGroupId(builder, DreamMakerScheduleGroupId);
    MiniGameDreamScheduleExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamScheduleExcel.AddAnimationName(builder, AnimationNameOffset);
    MiniGameDreamScheduleExcel.AddLoadingResource02(builder, LoadingResource02Offset);
    MiniGameDreamScheduleExcel.AddLoadingResource01(builder, LoadingResource01Offset);
    MiniGameDreamScheduleExcel.AddIconPath(builder, IconPathOffset);
    MiniGameDreamScheduleExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    return MiniGameDreamScheduleExcel.EndMiniGameDreamScheduleExcel(builder);
  }

  public static void StartMiniGameDreamScheduleExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddDreamMakerScheduleGroupId(FlatBufferBuilder builder, long DreamMakerScheduleGroupId) { builder.AddLong(1, DreamMakerScheduleGroupId, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long DisplayOrder) { builder.AddLong(2, DisplayOrder, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint LocalizeEtcId) { builder.AddUint(3, LocalizeEtcId, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset IconPathOffset) { builder.AddOffset(4, IconPathOffset.Value, 0); }
  public static void AddLoadingResource01(FlatBufferBuilder builder, StringOffset LoadingResource01Offset) { builder.AddOffset(5, LoadingResource01Offset.Value, 0); }
  public static void AddLoadingResource02(FlatBufferBuilder builder, StringOffset LoadingResource02Offset) { builder.AddOffset(6, LoadingResource02Offset.Value, 0); }
  public static void AddAnimationName(FlatBufferBuilder builder, StringOffset AnimationNameOffset) { builder.AddOffset(7, AnimationNameOffset.Value, 0); }
  public static Offset<FlatDataGlobal.MiniGameDreamScheduleExcel> EndMiniGameDreamScheduleExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameDreamScheduleExcel>(o);
  }
}


}
