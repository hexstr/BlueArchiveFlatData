// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SoundUIExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static SoundUIExcel GetRootAsSoundUIExcel(ByteBuffer _bb) { return GetRootAsSoundUIExcel(_bb, new SoundUIExcel()); }
  public static SoundUIExcel GetRootAsSoundUIExcel(ByteBuffer _bb, SoundUIExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SoundUIExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string SoundUniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoundUniqueIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSoundUniqueIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSoundUniqueIdArray() { return __p.__vector_as_array<byte>(6); }
  public string Path { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<FlatDataGlobal.SoundUIExcel> CreateSoundUIExcel(FlatBufferBuilder builder,
      long ID = 0,
      StringOffset SoundUniqueIdOffset = default(StringOffset),
      StringOffset PathOffset = default(StringOffset)) {
    builder.StartTable(3);
    SoundUIExcel.AddID(builder, ID);
    SoundUIExcel.AddPath(builder, PathOffset);
    SoundUIExcel.AddSoundUniqueId(builder, SoundUniqueIdOffset);
    return SoundUIExcel.EndSoundUIExcel(builder);
  }

  public static void StartSoundUIExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddID(FlatBufferBuilder builder, long ID) { builder.AddLong(0, ID, 0); }
  public static void AddSoundUniqueId(FlatBufferBuilder builder, StringOffset SoundUniqueIdOffset) { builder.AddOffset(1, SoundUniqueIdOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset PathOffset) { builder.AddOffset(2, PathOffset.Value, 0); }
  public static Offset<FlatDataGlobal.SoundUIExcel> EndSoundUIExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.SoundUIExcel>(o);
  }
}


}
