// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConquestProgressResourceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ConquestProgressResourceExcel GetRootAsConquestProgressResourceExcel(ByteBuffer _bb) { return GetRootAsConquestProgressResourceExcel(_bb, new ConquestProgressResourceExcel()); }
  public static ConquestProgressResourceExcel GetRootAsConquestProgressResourceExcel(ByteBuffer _bb, ConquestProgressResourceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestProgressResourceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ConquestProgressType Group { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ConquestProgressType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ConquestProgressType.None; } }
  public string ProgressResource { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProgressResourceBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetProgressResourceBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetProgressResourceArray() { return __p.__vector_as_array<byte>(10); }
  public uint VoiceId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int VoiceIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetVoiceIdBytes() { return __p.__vector_as_span<uint>(12, 4); }
#else
  public ArraySegment<byte>? GetVoiceIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public uint[] GetVoiceIdArray() { return __p.__vector_as_array<uint>(12); }
  public string ProgressLocalizeCode { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProgressLocalizeCodeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetProgressLocalizeCodeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetProgressLocalizeCodeArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<FlatDataGlobal.ConquestProgressResourceExcel> CreateConquestProgressResourceExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      FlatDataGlobal.ConquestProgressType Group = FlatDataGlobal.ConquestProgressType.None,
      StringOffset ProgressResourceOffset = default(StringOffset),
      VectorOffset VoiceIdOffset = default(VectorOffset),
      StringOffset ProgressLocalizeCodeOffset = default(StringOffset)) {
    builder.StartTable(6);
    ConquestProgressResourceExcel.AddEventContentId(builder, EventContentId);
    ConquestProgressResourceExcel.AddId(builder, Id);
    ConquestProgressResourceExcel.AddProgressLocalizeCode(builder, ProgressLocalizeCodeOffset);
    ConquestProgressResourceExcel.AddVoiceId(builder, VoiceIdOffset);
    ConquestProgressResourceExcel.AddProgressResource(builder, ProgressResourceOffset);
    ConquestProgressResourceExcel.AddGroup(builder, Group);
    return ConquestProgressResourceExcel.EndConquestProgressResourceExcel(builder);
  }

  public static void StartConquestProgressResourceExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(1, EventContentId, 0); }
  public static void AddGroup(FlatBufferBuilder builder, FlatDataGlobal.ConquestProgressType Group) { builder.AddInt(2, (int)Group, 0); }
  public static void AddProgressResource(FlatBufferBuilder builder, StringOffset ProgressResourceOffset) { builder.AddOffset(3, ProgressResourceOffset.Value, 0); }
  public static void AddVoiceId(FlatBufferBuilder builder, VectorOffset VoiceIdOffset) { builder.AddOffset(4, VoiceIdOffset.Value, 0); }
  public static VectorOffset CreateVoiceIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVoiceIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProgressLocalizeCode(FlatBufferBuilder builder, StringOffset ProgressLocalizeCodeOffset) { builder.AddOffset(5, ProgressLocalizeCodeOffset.Value, 0); }
  public static Offset<FlatDataGlobal.ConquestProgressResourceExcel> EndConquestProgressResourceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ConquestProgressResourceExcel>(o);
  }
}


}
