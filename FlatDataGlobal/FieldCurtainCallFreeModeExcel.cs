// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldCurtainCallFreeModeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FieldCurtainCallFreeModeExcel GetRootAsFieldCurtainCallFreeModeExcel(ByteBuffer _bb) { return GetRootAsFieldCurtainCallFreeModeExcel(_bb, new FieldCurtainCallFreeModeExcel()); }
  public static FieldCurtainCallFreeModeExcel GetRootAsFieldCurtainCallFreeModeExcel(ByteBuffer _bb, FieldCurtainCallFreeModeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldCurtainCallFreeModeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenDate { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SetFieldDateID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SetFieldQuestOpenDate { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.FieldCurtainCallFreeModeExcel> CreateFieldCurtainCallFreeModeExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long OpenDate = 0,
      long SetFieldDateID = 0,
      long SetFieldQuestOpenDate = 0) {
    builder.StartTable(4);
    FieldCurtainCallFreeModeExcel.AddSetFieldQuestOpenDate(builder, SetFieldQuestOpenDate);
    FieldCurtainCallFreeModeExcel.AddSetFieldDateID(builder, SetFieldDateID);
    FieldCurtainCallFreeModeExcel.AddOpenDate(builder, OpenDate);
    FieldCurtainCallFreeModeExcel.AddUniqueId(builder, UniqueId);
    return FieldCurtainCallFreeModeExcel.EndFieldCurtainCallFreeModeExcel(builder);
  }

  public static void StartFieldCurtainCallFreeModeExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddOpenDate(FlatBufferBuilder builder, long OpenDate) { builder.AddLong(1, OpenDate, 0); }
  public static void AddSetFieldDateID(FlatBufferBuilder builder, long SetFieldDateID) { builder.AddLong(2, SetFieldDateID, 0); }
  public static void AddSetFieldQuestOpenDate(FlatBufferBuilder builder, long SetFieldQuestOpenDate) { builder.AddLong(3, SetFieldQuestOpenDate, 0); }
  public static Offset<FlatDataGlobal.FieldCurtainCallFreeModeExcel> EndFieldCurtainCallFreeModeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.FieldCurtainCallFreeModeExcel>(o);
  }
}


}
