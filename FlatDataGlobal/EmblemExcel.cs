// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EmblemExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static EmblemExcel GetRootAsEmblemExcel(ByteBuffer _bb) { return GetRootAsEmblemExcel(_bb, new EmblemExcel()); }
  public static EmblemExcel GetRootAsEmblemExcel(ByteBuffer _bb, EmblemExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmblemExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LoczlizeEtcId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public FlatDataGlobal.EmblemCategory Category { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.EmblemCategory)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.EmblemCategory.None; } }
  public FlatDataGlobal.Rarity Rarity { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.Rarity)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.Rarity.N; } }
  public string IconPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(12); }
  public string EmblemPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEmblemPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEmblemPathArray() { return __p.__vector_as_array<byte>(14); }
  public uint EmblemTextLocalizeId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float EmblemTextOffsetX { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmblemTextOffsetY { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public FlatDataGlobal.EmblemDisplayType DisplayType { get { int o = __p.__offset(22); return o != 0 ? (FlatDataGlobal.EmblemDisplayType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.EmblemDisplayType.Always; } }
  public string DisplayStartDate { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayStartDateBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetDisplayStartDateBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetDisplayStartDateArray() { return __p.__vector_as_array<byte>(24); }
  public string DisplayEndDate { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayEndDateBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetDisplayEndDateBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetDisplayEndDateArray() { return __p.__vector_as_array<byte>(26); }
  public int DislpayFavorLevel { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.EmblemCheckPassType CheckPassType { get { int o = __p.__offset(30); return o != 0 ? (FlatDataGlobal.EmblemCheckPassType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.EmblemCheckPassType.None; } }
  public long CheckPassParameter { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CheckPassCount { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.EmblemExcel> CreateEmblemExcel(FlatBufferBuilder builder,
      long Id = 0,
      uint LoczlizeEtcId = 0,
      FlatDataGlobal.EmblemCategory Category = FlatDataGlobal.EmblemCategory.None,
      FlatDataGlobal.Rarity rarity = FlatDataGlobal.Rarity.N,
      StringOffset IconPathOffset = default(StringOffset),
      StringOffset EmblemPathOffset = default(StringOffset),
      uint EmblemTextLocalizeId = 0,
      float EmblemTextOffsetX = 0.0f,
      float EmblemTextOffsetY = 0.0f,
      FlatDataGlobal.EmblemDisplayType DisplayType = FlatDataGlobal.EmblemDisplayType.Always,
      StringOffset DisplayStartDateOffset = default(StringOffset),
      StringOffset DisplayEndDateOffset = default(StringOffset),
      int DislpayFavorLevel = 0,
      FlatDataGlobal.EmblemCheckPassType CheckPassType = FlatDataGlobal.EmblemCheckPassType.None,
      long CheckPassParameter = 0,
      long CheckPassCount = 0) {
    builder.StartTable(16);
    EmblemExcel.AddCheckPassCount(builder, CheckPassCount);
    EmblemExcel.AddCheckPassParameter(builder, CheckPassParameter);
    EmblemExcel.AddId(builder, Id);
    EmblemExcel.AddCheckPassType(builder, CheckPassType);
    EmblemExcel.AddDislpayFavorLevel(builder, DislpayFavorLevel);
    EmblemExcel.AddDisplayEndDate(builder, DisplayEndDateOffset);
    EmblemExcel.AddDisplayStartDate(builder, DisplayStartDateOffset);
    EmblemExcel.AddDisplayType(builder, DisplayType);
    EmblemExcel.AddEmblemTextOffsetY(builder, EmblemTextOffsetY);
    EmblemExcel.AddEmblemTextOffsetX(builder, EmblemTextOffsetX);
    EmblemExcel.AddEmblemTextLocalizeId(builder, EmblemTextLocalizeId);
    EmblemExcel.AddEmblemPath(builder, EmblemPathOffset);
    EmblemExcel.AddIconPath(builder, IconPathOffset);
    EmblemExcel.AddRarity(builder, rarity);
    EmblemExcel.AddCategory(builder, Category);
    EmblemExcel.AddLoczlizeEtcId(builder, LoczlizeEtcId);
    return EmblemExcel.EndEmblemExcel(builder);
  }

  public static void StartEmblemExcel(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddLoczlizeEtcId(FlatBufferBuilder builder, uint LoczlizeEtcId) { builder.AddUint(1, LoczlizeEtcId, 0); }
  public static void AddCategory(FlatBufferBuilder builder, FlatDataGlobal.EmblemCategory Category) { builder.AddInt(2, (int)Category, 0); }
  public static void AddRarity(FlatBufferBuilder builder, FlatDataGlobal.Rarity rarity) { builder.AddInt(3, (int)rarity, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset IconPathOffset) { builder.AddOffset(4, IconPathOffset.Value, 0); }
  public static void AddEmblemPath(FlatBufferBuilder builder, StringOffset EmblemPathOffset) { builder.AddOffset(5, EmblemPathOffset.Value, 0); }
  public static void AddEmblemTextLocalizeId(FlatBufferBuilder builder, uint EmblemTextLocalizeId) { builder.AddUint(6, EmblemTextLocalizeId, 0); }
  public static void AddEmblemTextOffsetX(FlatBufferBuilder builder, float EmblemTextOffsetX) { builder.AddFloat(7, EmblemTextOffsetX, 0.0f); }
  public static void AddEmblemTextOffsetY(FlatBufferBuilder builder, float EmblemTextOffsetY) { builder.AddFloat(8, EmblemTextOffsetY, 0.0f); }
  public static void AddDisplayType(FlatBufferBuilder builder, FlatDataGlobal.EmblemDisplayType DisplayType) { builder.AddInt(9, (int)DisplayType, 0); }
  public static void AddDisplayStartDate(FlatBufferBuilder builder, StringOffset DisplayStartDateOffset) { builder.AddOffset(10, DisplayStartDateOffset.Value, 0); }
  public static void AddDisplayEndDate(FlatBufferBuilder builder, StringOffset DisplayEndDateOffset) { builder.AddOffset(11, DisplayEndDateOffset.Value, 0); }
  public static void AddDislpayFavorLevel(FlatBufferBuilder builder, int DislpayFavorLevel) { builder.AddInt(12, DislpayFavorLevel, 0); }
  public static void AddCheckPassType(FlatBufferBuilder builder, FlatDataGlobal.EmblemCheckPassType CheckPassType) { builder.AddInt(13, (int)CheckPassType, 0); }
  public static void AddCheckPassParameter(FlatBufferBuilder builder, long CheckPassParameter) { builder.AddLong(14, CheckPassParameter, 0); }
  public static void AddCheckPassCount(FlatBufferBuilder builder, long CheckPassCount) { builder.AddLong(15, CheckPassCount, 0); }
  public static Offset<FlatDataGlobal.EmblemExcel> EndEmblemExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.EmblemExcel>(o);
  }
}


}
