// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDreamParameterExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDreamParameterExcel GetRootAsMiniGameDreamParameterExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamParameterExcel(_bb, new MiniGameDreamParameterExcel()); }
  public static MiniGameDreamParameterExcel GetRootAsMiniGameDreamParameterExcel(ByteBuffer _bb, MiniGameDreamParameterExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamParameterExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.DreamMakerParameterType ParameterType { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.DreamMakerParameterType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.DreamMakerParameterType.None; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string IconPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(12); }
  public long ParameterBase { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ParameterBaseMax { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ParameterMin { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ParameterMax { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.MiniGameDreamParameterExcel> CreateMiniGameDreamParameterExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      FlatDataGlobal.DreamMakerParameterType ParameterType = FlatDataGlobal.DreamMakerParameterType.None,
      uint LocalizeEtcId = 0,
      StringOffset IconPathOffset = default(StringOffset),
      long ParameterBase = 0,
      long ParameterBaseMax = 0,
      long ParameterMin = 0,
      long ParameterMax = 0) {
    builder.StartTable(9);
    MiniGameDreamParameterExcel.AddParameterMax(builder, ParameterMax);
    MiniGameDreamParameterExcel.AddParameterMin(builder, ParameterMin);
    MiniGameDreamParameterExcel.AddParameterBaseMax(builder, ParameterBaseMax);
    MiniGameDreamParameterExcel.AddParameterBase(builder, ParameterBase);
    MiniGameDreamParameterExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamParameterExcel.AddId(builder, Id);
    MiniGameDreamParameterExcel.AddIconPath(builder, IconPathOffset);
    MiniGameDreamParameterExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    MiniGameDreamParameterExcel.AddParameterType(builder, ParameterType);
    return MiniGameDreamParameterExcel.EndMiniGameDreamParameterExcel(builder);
  }

  public static void StartMiniGameDreamParameterExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(1, EventContentId, 0); }
  public static void AddParameterType(FlatBufferBuilder builder, FlatDataGlobal.DreamMakerParameterType ParameterType) { builder.AddInt(2, (int)ParameterType, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint LocalizeEtcId) { builder.AddUint(3, LocalizeEtcId, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset IconPathOffset) { builder.AddOffset(4, IconPathOffset.Value, 0); }
  public static void AddParameterBase(FlatBufferBuilder builder, long ParameterBase) { builder.AddLong(5, ParameterBase, 0); }
  public static void AddParameterBaseMax(FlatBufferBuilder builder, long ParameterBaseMax) { builder.AddLong(6, ParameterBaseMax, 0); }
  public static void AddParameterMin(FlatBufferBuilder builder, long ParameterMin) { builder.AddLong(7, ParameterMin, 0); }
  public static void AddParameterMax(FlatBufferBuilder builder, long ParameterMax) { builder.AddLong(8, ParameterMax, 0); }
  public static Offset<FlatDataGlobal.MiniGameDreamParameterExcel> EndMiniGameDreamParameterExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameDreamParameterExcel>(o);
  }
}


}
