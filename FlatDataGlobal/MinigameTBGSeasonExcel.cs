// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameTBGSeasonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameTBGSeasonExcel GetRootAsMinigameTBGSeasonExcel(ByteBuffer _bb) { return GetRootAsMinigameTBGSeasonExcel(_bb, new MinigameTBGSeasonExcel()); }
  public static MinigameTBGSeasonExcel GetRootAsMinigameTBGSeasonExcel(ByteBuffer _bb, MinigameTBGSeasonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameTBGSeasonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ItemSlot { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DefaultEchelonHp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long DefaultItemDiceId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonSlot1CharacterId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonSlot2CharacterId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonSlot3CharacterId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonSlot4CharacterId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType EchelonRevivalCostType { get { int o = __p.__offset(20); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long EchelonRevivalCostId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int EchelonRevivalCostAmount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnemyBossHP { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnemyMinionHP { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackDamage { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CriticalAttackDamage { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoundItemSelectLimit { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstantClearRound { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MapImagePath { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapImagePathBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetMapImagePathBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetMapImagePathArray() { return __p.__vector_as_array<byte>(38); }
  public string MapNameLocalize { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapNameLocalizeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetMapNameLocalizeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetMapNameLocalizeArray() { return __p.__vector_as_array<byte>(40); }

  public static Offset<FlatDataGlobal.MinigameTBGSeasonExcel> CreateMinigameTBGSeasonExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      int ItemSlot = 0,
      int DefaultEchelonHp = 0,
      long DefaultItemDiceId = 0,
      long EchelonSlot1CharacterId = 0,
      long EchelonSlot2CharacterId = 0,
      long EchelonSlot3CharacterId = 0,
      long EchelonSlot4CharacterId = 0,
      FlatDataGlobal.ParcelType EchelonRevivalCostType = FlatDataGlobal.ParcelType.None,
      long EchelonRevivalCostId = 0,
      int EchelonRevivalCostAmount = 0,
      int EnemyBossHP = 0,
      int EnemyMinionHP = 0,
      int AttackDamage = 0,
      int CriticalAttackDamage = 0,
      int RoundItemSelectLimit = 0,
      int InstantClearRound = 0,
      StringOffset MapImagePathOffset = default(StringOffset),
      StringOffset MapNameLocalizeOffset = default(StringOffset)) {
    builder.StartTable(19);
    MinigameTBGSeasonExcel.AddEchelonRevivalCostId(builder, EchelonRevivalCostId);
    MinigameTBGSeasonExcel.AddEchelonSlot4CharacterId(builder, EchelonSlot4CharacterId);
    MinigameTBGSeasonExcel.AddEchelonSlot3CharacterId(builder, EchelonSlot3CharacterId);
    MinigameTBGSeasonExcel.AddEchelonSlot2CharacterId(builder, EchelonSlot2CharacterId);
    MinigameTBGSeasonExcel.AddEchelonSlot1CharacterId(builder, EchelonSlot1CharacterId);
    MinigameTBGSeasonExcel.AddDefaultItemDiceId(builder, DefaultItemDiceId);
    MinigameTBGSeasonExcel.AddEventContentId(builder, EventContentId);
    MinigameTBGSeasonExcel.AddMapNameLocalize(builder, MapNameLocalizeOffset);
    MinigameTBGSeasonExcel.AddMapImagePath(builder, MapImagePathOffset);
    MinigameTBGSeasonExcel.AddInstantClearRound(builder, InstantClearRound);
    MinigameTBGSeasonExcel.AddRoundItemSelectLimit(builder, RoundItemSelectLimit);
    MinigameTBGSeasonExcel.AddCriticalAttackDamage(builder, CriticalAttackDamage);
    MinigameTBGSeasonExcel.AddAttackDamage(builder, AttackDamage);
    MinigameTBGSeasonExcel.AddEnemyMinionHP(builder, EnemyMinionHP);
    MinigameTBGSeasonExcel.AddEnemyBossHP(builder, EnemyBossHP);
    MinigameTBGSeasonExcel.AddEchelonRevivalCostAmount(builder, EchelonRevivalCostAmount);
    MinigameTBGSeasonExcel.AddEchelonRevivalCostType(builder, EchelonRevivalCostType);
    MinigameTBGSeasonExcel.AddDefaultEchelonHp(builder, DefaultEchelonHp);
    MinigameTBGSeasonExcel.AddItemSlot(builder, ItemSlot);
    return MinigameTBGSeasonExcel.EndMinigameTBGSeasonExcel(builder);
  }

  public static void StartMinigameTBGSeasonExcel(FlatBufferBuilder builder) { builder.StartTable(19); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddItemSlot(FlatBufferBuilder builder, int ItemSlot) { builder.AddInt(1, ItemSlot, 0); }
  public static void AddDefaultEchelonHp(FlatBufferBuilder builder, int DefaultEchelonHp) { builder.AddInt(2, DefaultEchelonHp, 0); }
  public static void AddDefaultItemDiceId(FlatBufferBuilder builder, long DefaultItemDiceId) { builder.AddLong(3, DefaultItemDiceId, 0); }
  public static void AddEchelonSlot1CharacterId(FlatBufferBuilder builder, long EchelonSlot1CharacterId) { builder.AddLong(4, EchelonSlot1CharacterId, 0); }
  public static void AddEchelonSlot2CharacterId(FlatBufferBuilder builder, long EchelonSlot2CharacterId) { builder.AddLong(5, EchelonSlot2CharacterId, 0); }
  public static void AddEchelonSlot3CharacterId(FlatBufferBuilder builder, long EchelonSlot3CharacterId) { builder.AddLong(6, EchelonSlot3CharacterId, 0); }
  public static void AddEchelonSlot4CharacterId(FlatBufferBuilder builder, long EchelonSlot4CharacterId) { builder.AddLong(7, EchelonSlot4CharacterId, 0); }
  public static void AddEchelonRevivalCostType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType EchelonRevivalCostType) { builder.AddInt(8, (int)EchelonRevivalCostType, 0); }
  public static void AddEchelonRevivalCostId(FlatBufferBuilder builder, long EchelonRevivalCostId) { builder.AddLong(9, EchelonRevivalCostId, 0); }
  public static void AddEchelonRevivalCostAmount(FlatBufferBuilder builder, int EchelonRevivalCostAmount) { builder.AddInt(10, EchelonRevivalCostAmount, 0); }
  public static void AddEnemyBossHP(FlatBufferBuilder builder, int EnemyBossHP) { builder.AddInt(11, EnemyBossHP, 0); }
  public static void AddEnemyMinionHP(FlatBufferBuilder builder, int EnemyMinionHP) { builder.AddInt(12, EnemyMinionHP, 0); }
  public static void AddAttackDamage(FlatBufferBuilder builder, int AttackDamage) { builder.AddInt(13, AttackDamage, 0); }
  public static void AddCriticalAttackDamage(FlatBufferBuilder builder, int CriticalAttackDamage) { builder.AddInt(14, CriticalAttackDamage, 0); }
  public static void AddRoundItemSelectLimit(FlatBufferBuilder builder, int RoundItemSelectLimit) { builder.AddInt(15, RoundItemSelectLimit, 0); }
  public static void AddInstantClearRound(FlatBufferBuilder builder, int InstantClearRound) { builder.AddInt(16, InstantClearRound, 0); }
  public static void AddMapImagePath(FlatBufferBuilder builder, StringOffset MapImagePathOffset) { builder.AddOffset(17, MapImagePathOffset.Value, 0); }
  public static void AddMapNameLocalize(FlatBufferBuilder builder, StringOffset MapNameLocalizeOffset) { builder.AddOffset(18, MapNameLocalizeOffset.Value, 0); }
  public static Offset<FlatDataGlobal.MinigameTBGSeasonExcel> EndMinigameTBGSeasonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MinigameTBGSeasonExcel>(o);
  }
}


}
