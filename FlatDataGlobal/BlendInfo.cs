// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BlendInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static BlendInfo GetRootAsBlendInfo(ByteBuffer _bb) { return GetRootAsBlendInfo(_bb, new BlendInfo()); }
  public static BlendInfo GetRootAsBlendInfo(ByteBuffer _bb, BlendInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlendInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int From { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int To { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Blend { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<FlatDataGlobal.BlendInfo> CreateBlendInfo(FlatBufferBuilder builder,
      int From = 0,
      int To = 0,
      float Blend = 0.0f) {
    builder.StartTable(3);
    BlendInfo.AddBlend(builder, Blend);
    BlendInfo.AddTo(builder, To);
    BlendInfo.AddFrom(builder, From);
    return BlendInfo.EndBlendInfo(builder);
  }

  public static void StartBlendInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFrom(FlatBufferBuilder builder, int From) { builder.AddInt(0, From, 0); }
  public static void AddTo(FlatBufferBuilder builder, int To) { builder.AddInt(1, To, 0); }
  public static void AddBlend(FlatBufferBuilder builder, float Blend) { builder.AddFloat(2, Blend, 0.0f); }
  public static Offset<FlatDataGlobal.BlendInfo> EndBlendInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.BlendInfo>(o);
  }
}


}
