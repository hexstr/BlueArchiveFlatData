// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventContentZoneExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static EventContentZoneExcel GetRootAsEventContentZoneExcel(ByteBuffer _bb) { return GetRootAsEventContentZoneExcel(_bb, new EventContentZoneExcel()); }
  public static EventContentZoneExcel GetRootAsEventContentZoneExcel(ByteBuffer _bb, EventContentZoneExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentZoneExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LocationId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LocationRank { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventPointForLocationRank { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long StudentVisitProb(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StudentVisitProbLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStudentVisitProbBytes() { return __p.__vector_as_span<long>(14, 8); }
#else
  public ArraySegment<byte>? GetStudentVisitProbBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public long[] GetStudentVisitProbArray() { return __p.__vector_as_array<long>(14); }
  public long RewardGroupId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.Tag Tags(int j) { int o = __p.__offset(18); return o != 0 ? (FlatDataGlobal.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.Tag)0; }
  public int TagsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.Tag> GetTagsBytes() { return __p.__vector_as_span<FlatDataGlobal.Tag>(18, 4); }
#else
  public ArraySegment<byte>? GetTagsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public FlatDataGlobal.Tag[] GetTagsArray() { int o = __p.__offset(18); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.Tag[] a = new FlatDataGlobal.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public FlatDataGlobal.Tag WhiteListTags(int j) { int o = __p.__offset(20); return o != 0 ? (FlatDataGlobal.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.Tag)0; }
  public int WhiteListTagsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.Tag> GetWhiteListTagsBytes() { return __p.__vector_as_span<FlatDataGlobal.Tag>(20, 4); }
#else
  public ArraySegment<byte>? GetWhiteListTagsBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public FlatDataGlobal.Tag[] GetWhiteListTagsArray() { int o = __p.__offset(20); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.Tag[] a = new FlatDataGlobal.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.Tag)__p.bb.GetInt(p + i * 4); } return a; }

  public static Offset<FlatDataGlobal.EventContentZoneExcel> CreateEventContentZoneExcel(FlatBufferBuilder builder,
      long Id = 0,
      long LocationId = 0,
      long LocationRank = 0,
      long EventPointForLocationRank = 0,
      uint LocalizeEtcId = 0,
      VectorOffset StudentVisitProbOffset = default(VectorOffset),
      long RewardGroupId = 0,
      VectorOffset TagsOffset = default(VectorOffset),
      VectorOffset WhiteListTagsOffset = default(VectorOffset)) {
    builder.StartTable(9);
    EventContentZoneExcel.AddRewardGroupId(builder, RewardGroupId);
    EventContentZoneExcel.AddEventPointForLocationRank(builder, EventPointForLocationRank);
    EventContentZoneExcel.AddLocationRank(builder, LocationRank);
    EventContentZoneExcel.AddLocationId(builder, LocationId);
    EventContentZoneExcel.AddId(builder, Id);
    EventContentZoneExcel.AddWhiteListTags(builder, WhiteListTagsOffset);
    EventContentZoneExcel.AddTags(builder, TagsOffset);
    EventContentZoneExcel.AddStudentVisitProb(builder, StudentVisitProbOffset);
    EventContentZoneExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    return EventContentZoneExcel.EndEventContentZoneExcel(builder);
  }

  public static void StartEventContentZoneExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddLocationId(FlatBufferBuilder builder, long LocationId) { builder.AddLong(1, LocationId, 0); }
  public static void AddLocationRank(FlatBufferBuilder builder, long LocationRank) { builder.AddLong(2, LocationRank, 0); }
  public static void AddEventPointForLocationRank(FlatBufferBuilder builder, long EventPointForLocationRank) { builder.AddLong(3, EventPointForLocationRank, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint LocalizeEtcId) { builder.AddUint(4, LocalizeEtcId, 0); }
  public static void AddStudentVisitProb(FlatBufferBuilder builder, VectorOffset StudentVisitProbOffset) { builder.AddOffset(5, StudentVisitProbOffset.Value, 0); }
  public static VectorOffset CreateStudentVisitProbVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStudentVisitProbVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStudentVisitProbVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStudentVisitProbVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStudentVisitProbVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardGroupId(FlatBufferBuilder builder, long RewardGroupId) { builder.AddLong(6, RewardGroupId, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset TagsOffset) { builder.AddOffset(7, TagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWhiteListTags(FlatBufferBuilder builder, VectorOffset WhiteListTagsOffset) { builder.AddOffset(8, WhiteListTagsOffset.Value, 0); }
  public static VectorOffset CreateWhiteListTagsVector(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWhiteListTagsVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWhiteListTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWhiteListTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWhiteListTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatDataGlobal.EventContentZoneExcel> EndEventContentZoneExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.EventContentZoneExcel>(o);
  }
}


}
