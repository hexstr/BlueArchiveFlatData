// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDreamDailyPointExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDreamDailyPointExcel GetRootAsMiniGameDreamDailyPointExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamDailyPointExcel(_bb, new MiniGameDreamDailyPointExcel()); }
  public static MiniGameDreamDailyPointExcel GetRootAsMiniGameDreamDailyPointExcel(ByteBuffer _bb, MiniGameDreamDailyPointExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamDailyPointExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TotalParameterMin { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TotalParameterMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DailyPointCoefficient { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DailyPointCorrectionValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.MiniGameDreamDailyPointExcel> CreateMiniGameDreamDailyPointExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long EventContentId = 0,
      long TotalParameterMin = 0,
      long TotalParameterMax = 0,
      long DailyPointCoefficient = 0,
      long DailyPointCorrectionValue = 0) {
    builder.StartTable(6);
    MiniGameDreamDailyPointExcel.AddDailyPointCorrectionValue(builder, DailyPointCorrectionValue);
    MiniGameDreamDailyPointExcel.AddDailyPointCoefficient(builder, DailyPointCoefficient);
    MiniGameDreamDailyPointExcel.AddTotalParameterMax(builder, TotalParameterMax);
    MiniGameDreamDailyPointExcel.AddTotalParameterMin(builder, TotalParameterMin);
    MiniGameDreamDailyPointExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamDailyPointExcel.AddUniqueId(builder, UniqueId);
    return MiniGameDreamDailyPointExcel.EndMiniGameDreamDailyPointExcel(builder);
  }

  public static void StartMiniGameDreamDailyPointExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(1, EventContentId, 0); }
  public static void AddTotalParameterMin(FlatBufferBuilder builder, long TotalParameterMin) { builder.AddLong(2, TotalParameterMin, 0); }
  public static void AddTotalParameterMax(FlatBufferBuilder builder, long TotalParameterMax) { builder.AddLong(3, TotalParameterMax, 0); }
  public static void AddDailyPointCoefficient(FlatBufferBuilder builder, long DailyPointCoefficient) { builder.AddLong(4, DailyPointCoefficient, 0); }
  public static void AddDailyPointCorrectionValue(FlatBufferBuilder builder, long DailyPointCorrectionValue) { builder.AddLong(5, DailyPointCorrectionValue, 0); }
  public static Offset<FlatDataGlobal.MiniGameDreamDailyPointExcel> EndMiniGameDreamDailyPointExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameDreamDailyPointExcel>(o);
  }
}


}
