// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldQuestExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FieldQuestExcel GetRootAsFieldQuestExcel(ByteBuffer _bb) { return GetRootAsFieldQuestExcel(_bb, new FieldQuestExcel()); }
  public static FieldQuestExcel GetRootAsFieldQuestExcel(ByteBuffer _bb, FieldQuestExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldQuestExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long FieldSeasonId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsDaily { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long FieldDateId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Opendate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string AssetPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAssetPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAssetPathArray() { return __p.__vector_as_array<byte>(14); }
  public long RewardId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Prob { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint QuestNamKey { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint QuestDescKey { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatDataGlobal.FieldQuestExcel> CreateFieldQuestExcel(FlatBufferBuilder builder,
      long FieldSeasonId = 0,
      long UniqueId = 0,
      bool IsDaily = false,
      long FieldDateId = 0,
      long Opendate = 0,
      StringOffset AssetPathOffset = default(StringOffset),
      long RewardId = 0,
      int Prob = 0,
      uint QuestNamKey = 0,
      uint QuestDescKey = 0) {
    builder.StartTable(10);
    FieldQuestExcel.AddRewardId(builder, RewardId);
    FieldQuestExcel.AddOpendate(builder, Opendate);
    FieldQuestExcel.AddFieldDateId(builder, FieldDateId);
    FieldQuestExcel.AddUniqueId(builder, UniqueId);
    FieldQuestExcel.AddFieldSeasonId(builder, FieldSeasonId);
    FieldQuestExcel.AddQuestDescKey(builder, QuestDescKey);
    FieldQuestExcel.AddQuestNamKey(builder, QuestNamKey);
    FieldQuestExcel.AddProb(builder, Prob);
    FieldQuestExcel.AddAssetPath(builder, AssetPathOffset);
    FieldQuestExcel.AddIsDaily(builder, IsDaily);
    return FieldQuestExcel.EndFieldQuestExcel(builder);
  }

  public static void StartFieldQuestExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddFieldSeasonId(FlatBufferBuilder builder, long FieldSeasonId) { builder.AddLong(0, FieldSeasonId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(1, UniqueId, 0); }
  public static void AddIsDaily(FlatBufferBuilder builder, bool IsDaily) { builder.AddBool(2, IsDaily, false); }
  public static void AddFieldDateId(FlatBufferBuilder builder, long FieldDateId) { builder.AddLong(3, FieldDateId, 0); }
  public static void AddOpendate(FlatBufferBuilder builder, long Opendate) { builder.AddLong(4, Opendate, 0); }
  public static void AddAssetPath(FlatBufferBuilder builder, StringOffset AssetPathOffset) { builder.AddOffset(5, AssetPathOffset.Value, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, long RewardId) { builder.AddLong(6, RewardId, 0); }
  public static void AddProb(FlatBufferBuilder builder, int Prob) { builder.AddInt(7, Prob, 0); }
  public static void AddQuestNamKey(FlatBufferBuilder builder, uint QuestNamKey) { builder.AddUint(8, QuestNamKey, 0); }
  public static void AddQuestDescKey(FlatBufferBuilder builder, uint QuestDescKey) { builder.AddUint(9, QuestDescKey, 0); }
  public static Offset<FlatDataGlobal.FieldQuestExcel> EndFieldQuestExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.FieldQuestExcel>(o);
  }
}


}
