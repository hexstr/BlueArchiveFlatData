// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameRoadPuzzleVoiceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameRoadPuzzleVoiceExcel GetRootAsMiniGameRoadPuzzleVoiceExcel(ByteBuffer _bb) { return GetRootAsMiniGameRoadPuzzleVoiceExcel(_bb, new MiniGameRoadPuzzleVoiceExcel()); }
  public static MiniGameRoadPuzzleVoiceExcel GetRootAsMiniGameRoadPuzzleVoiceExcel(ByteBuffer _bb, MiniGameRoadPuzzleVoiceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameRoadPuzzleVoiceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.RoadPuzzleVoiceCondition VoiceCondition { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.RoadPuzzleVoiceCondition)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.RoadPuzzleVoiceCondition.None; } }
  public uint VoiceClip { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatDataGlobal.MiniGameRoadPuzzleVoiceExcel> CreateMiniGameRoadPuzzleVoiceExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      FlatDataGlobal.RoadPuzzleVoiceCondition VoiceCondition = FlatDataGlobal.RoadPuzzleVoiceCondition.None,
      uint VoiceClip = 0) {
    builder.StartTable(4);
    MiniGameRoadPuzzleVoiceExcel.AddUniqueId(builder, UniqueId);
    MiniGameRoadPuzzleVoiceExcel.AddEventContentId(builder, EventContentId);
    MiniGameRoadPuzzleVoiceExcel.AddVoiceClip(builder, VoiceClip);
    MiniGameRoadPuzzleVoiceExcel.AddVoiceCondition(builder, VoiceCondition);
    return MiniGameRoadPuzzleVoiceExcel.EndMiniGameRoadPuzzleVoiceExcel(builder);
  }

  public static void StartMiniGameRoadPuzzleVoiceExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(1, UniqueId, 0); }
  public static void AddVoiceCondition(FlatBufferBuilder builder, FlatDataGlobal.RoadPuzzleVoiceCondition VoiceCondition) { builder.AddInt(2, (int)VoiceCondition, 0); }
  public static void AddVoiceClip(FlatBufferBuilder builder, uint VoiceClip) { builder.AddUint(3, VoiceClip, 0); }
  public static Offset<FlatDataGlobal.MiniGameRoadPuzzleVoiceExcel> EndMiniGameRoadPuzzleVoiceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameRoadPuzzleVoiceExcel>(o);
  }
}


}
