// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConstKeyMappingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ConstKeyMappingExcel GetRootAsConstKeyMappingExcel(ByteBuffer _bb) { return GetRootAsConstKeyMappingExcel(_bb, new ConstKeyMappingExcel()); }
  public static ConstKeyMappingExcel GetRootAsConstKeyMappingExcel(ByteBuffer _bb, ConstKeyMappingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstKeyMappingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float DragSensitivity { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long PcInformationGroupID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float ScrollWheelFactor { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string RemoveKeycodeWord { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRemoveKeycodeWordBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRemoveKeycodeWordBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRemoveKeycodeWordArray() { return __p.__vector_as_array<byte>(10); }
  public string TutorialDialogTouchKey { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTutorialDialogTouchKeyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTutorialDialogTouchKeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTutorialDialogTouchKeyArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<FlatDataGlobal.ConstKeyMappingExcel> CreateConstKeyMappingExcel(FlatBufferBuilder builder,
      float DragSensitivity = 0.0f,
      long PcInformationGroupID = 0,
      float ScrollWheelFactor = 0.0f,
      StringOffset RemoveKeycodeWordOffset = default(StringOffset),
      StringOffset TutorialDialogTouchKeyOffset = default(StringOffset)) {
    builder.StartTable(5);
    ConstKeyMappingExcel.AddPcInformationGroupID(builder, PcInformationGroupID);
    ConstKeyMappingExcel.AddTutorialDialogTouchKey(builder, TutorialDialogTouchKeyOffset);
    ConstKeyMappingExcel.AddRemoveKeycodeWord(builder, RemoveKeycodeWordOffset);
    ConstKeyMappingExcel.AddScrollWheelFactor(builder, ScrollWheelFactor);
    ConstKeyMappingExcel.AddDragSensitivity(builder, DragSensitivity);
    return ConstKeyMappingExcel.EndConstKeyMappingExcel(builder);
  }

  public static void StartConstKeyMappingExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddDragSensitivity(FlatBufferBuilder builder, float DragSensitivity) { builder.AddFloat(0, DragSensitivity, 0.0f); }
  public static void AddPcInformationGroupID(FlatBufferBuilder builder, long PcInformationGroupID) { builder.AddLong(1, PcInformationGroupID, 0); }
  public static void AddScrollWheelFactor(FlatBufferBuilder builder, float ScrollWheelFactor) { builder.AddFloat(2, ScrollWheelFactor, 0.0f); }
  public static void AddRemoveKeycodeWord(FlatBufferBuilder builder, StringOffset RemoveKeycodeWordOffset) { builder.AddOffset(3, RemoveKeycodeWordOffset.Value, 0); }
  public static void AddTutorialDialogTouchKey(FlatBufferBuilder builder, StringOffset TutorialDialogTouchKeyOffset) { builder.AddOffset(4, TutorialDialogTouchKeyOffset.Value, 0); }
  public static Offset<FlatDataGlobal.ConstKeyMappingExcel> EndConstKeyMappingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ConstKeyMappingExcel>(o);
  }
}


}
