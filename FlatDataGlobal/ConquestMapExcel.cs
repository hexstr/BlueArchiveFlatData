// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConquestMapExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ConquestMapExcel GetRootAsConquestMapExcel(ByteBuffer _bb) { return GetRootAsConquestMapExcel(_bb, new ConquestMapExcel()); }
  public static ConquestMapExcel GetRootAsConquestMapExcel(ByteBuffer _bb, ConquestMapExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestMapExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DevName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDevNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDevNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDevNameArray() { return __p.__vector_as_array<byte>(6); }
  public FlatDataGlobal.StageDifficulty MapDifficulty { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StageDifficulty.None; } }
  public int StepCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ConquestMap { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConquestMapBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetConquestMapBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetConquestMapArray() { return __p.__vector_as_array<byte>(12); }
  public long OpenDateOffset { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string MapGoalLocalize { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapGoalLocalizeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMapGoalLocalizeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMapGoalLocalizeArray() { return __p.__vector_as_array<byte>(16); }
  public string MapNameLocalize { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapNameLocalizeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMapNameLocalizeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMapNameLocalizeArray() { return __p.__vector_as_array<byte>(18); }
  public long MapEnterScenarioGroupId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ConquestMapBG { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConquestMapBGBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetConquestMapBGBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetConquestMapBGArray() { return __p.__vector_as_array<byte>(22); }
  public string MapScenarioBG { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapScenarioBGBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetMapScenarioBGBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetMapScenarioBGArray() { return __p.__vector_as_array<byte>(24); }
  public long BgmId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CameraSettingId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.ConquestMapExcel> CreateConquestMapExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      StringOffset DevNameOffset = default(StringOffset),
      FlatDataGlobal.StageDifficulty MapDifficulty = FlatDataGlobal.StageDifficulty.None,
      int StepCount = 0,
      StringOffset ConquestMapOffset = default(StringOffset),
      long OpenDateOffset = 0,
      StringOffset MapGoalLocalizeOffset = default(StringOffset),
      StringOffset MapNameLocalizeOffset = default(StringOffset),
      long MapEnterScenarioGroupId = 0,
      StringOffset ConquestMapBGOffset = default(StringOffset),
      StringOffset MapScenarioBGOffset = default(StringOffset),
      long BgmId = 0,
      long CameraSettingId = 0) {
    builder.StartTable(13);
    ConquestMapExcel.AddCameraSettingId(builder, CameraSettingId);
    ConquestMapExcel.AddBgmId(builder, BgmId);
    ConquestMapExcel.AddMapEnterScenarioGroupId(builder, MapEnterScenarioGroupId);
    ConquestMapExcel.AddOpenDateOffset(builder, OpenDateOffset);
    ConquestMapExcel.AddEventContentId(builder, EventContentId);
    ConquestMapExcel.AddMapScenarioBG(builder, MapScenarioBGOffset);
    ConquestMapExcel.AddConquestMapBG(builder, ConquestMapBGOffset);
    ConquestMapExcel.AddMapNameLocalize(builder, MapNameLocalizeOffset);
    ConquestMapExcel.AddMapGoalLocalize(builder, MapGoalLocalizeOffset);
    ConquestMapExcel.AddConquestMap(builder, ConquestMapOffset);
    ConquestMapExcel.AddStepCount(builder, StepCount);
    ConquestMapExcel.AddMapDifficulty(builder, MapDifficulty);
    ConquestMapExcel.AddDevName(builder, DevNameOffset);
    return ConquestMapExcel.EndConquestMapExcel(builder);
  }

  public static void StartConquestMapExcel(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddDevName(FlatBufferBuilder builder, StringOffset DevNameOffset) { builder.AddOffset(1, DevNameOffset.Value, 0); }
  public static void AddMapDifficulty(FlatBufferBuilder builder, FlatDataGlobal.StageDifficulty MapDifficulty) { builder.AddInt(2, (int)MapDifficulty, 0); }
  public static void AddStepCount(FlatBufferBuilder builder, int StepCount) { builder.AddInt(3, StepCount, 0); }
  public static void AddConquestMap(FlatBufferBuilder builder, StringOffset ConquestMapOffset) { builder.AddOffset(4, ConquestMapOffset.Value, 0); }
  public static void AddOpenDateOffset(FlatBufferBuilder builder, long OpenDateOffset) { builder.AddLong(5, OpenDateOffset, 0); }
  public static void AddMapGoalLocalize(FlatBufferBuilder builder, StringOffset MapGoalLocalizeOffset) { builder.AddOffset(6, MapGoalLocalizeOffset.Value, 0); }
  public static void AddMapNameLocalize(FlatBufferBuilder builder, StringOffset MapNameLocalizeOffset) { builder.AddOffset(7, MapNameLocalizeOffset.Value, 0); }
  public static void AddMapEnterScenarioGroupId(FlatBufferBuilder builder, long MapEnterScenarioGroupId) { builder.AddLong(8, MapEnterScenarioGroupId, 0); }
  public static void AddConquestMapBG(FlatBufferBuilder builder, StringOffset ConquestMapBGOffset) { builder.AddOffset(9, ConquestMapBGOffset.Value, 0); }
  public static void AddMapScenarioBG(FlatBufferBuilder builder, StringOffset MapScenarioBGOffset) { builder.AddOffset(10, MapScenarioBGOffset.Value, 0); }
  public static void AddBgmId(FlatBufferBuilder builder, long BgmId) { builder.AddLong(11, BgmId, 0); }
  public static void AddCameraSettingId(FlatBufferBuilder builder, long CameraSettingId) { builder.AddLong(12, CameraSettingId, 0); }
  public static Offset<FlatDataGlobal.ConquestMapExcel> EndConquestMapExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ConquestMapExcel>(o);
  }
}


}
