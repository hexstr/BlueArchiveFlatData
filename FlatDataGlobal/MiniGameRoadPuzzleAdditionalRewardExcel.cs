// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameRoadPuzzleAdditionalRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameRoadPuzzleAdditionalRewardExcel GetRootAsMiniGameRoadPuzzleAdditionalRewardExcel(ByteBuffer _bb) { return GetRootAsMiniGameRoadPuzzleAdditionalRewardExcel(_bb, new MiniGameRoadPuzzleAdditionalRewardExcel()); }
  public static MiniGameRoadPuzzleAdditionalRewardExcel GetRootAsMiniGameRoadPuzzleAdditionalRewardExcel(ByteBuffer _bb, MiniGameRoadPuzzleAdditionalRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameRoadPuzzleAdditionalRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType RewardParcelType { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.MiniGameRoadPuzzleAdditionalRewardExcel> CreateMiniGameRoadPuzzleAdditionalRewardExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      FlatDataGlobal.ParcelType RewardParcelType = FlatDataGlobal.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0) {
    builder.StartTable(5);
    MiniGameRoadPuzzleAdditionalRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    MiniGameRoadPuzzleAdditionalRewardExcel.AddRewardParcelId(builder, RewardParcelId);
    MiniGameRoadPuzzleAdditionalRewardExcel.AddUniqueId(builder, UniqueId);
    MiniGameRoadPuzzleAdditionalRewardExcel.AddEventContentId(builder, EventContentId);
    MiniGameRoadPuzzleAdditionalRewardExcel.AddRewardParcelType(builder, RewardParcelType);
    return MiniGameRoadPuzzleAdditionalRewardExcel.EndMiniGameRoadPuzzleAdditionalRewardExcel(builder);
  }

  public static void StartMiniGameRoadPuzzleAdditionalRewardExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(1, UniqueId, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType RewardParcelType) { builder.AddInt(2, (int)RewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long RewardParcelId) { builder.AddLong(3, RewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long RewardParcelAmount) { builder.AddLong(4, RewardParcelAmount, 0); }
  public static Offset<FlatDataGlobal.MiniGameRoadPuzzleAdditionalRewardExcel> EndMiniGameRoadPuzzleAdditionalRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameRoadPuzzleAdditionalRewardExcel>(o);
  }
}


}
