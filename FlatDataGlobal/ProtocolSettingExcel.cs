// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ProtocolSettingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ProtocolSettingExcel GetRootAsProtocolSettingExcel(ByteBuffer _bb) { return GetRootAsProtocolSettingExcel(_bb, new ProtocolSettingExcel()); }
  public static ProtocolSettingExcel GetRootAsProtocolSettingExcel(ByteBuffer _bb, ProtocolSettingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProtocolSettingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Protocol { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProtocolBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetProtocolBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetProtocolArray() { return __p.__vector_as_array<byte>(4); }
  public FlatDataGlobal.OpenConditionContent OpenConditionContent { get { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.OpenConditionContent)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.OpenConditionContent.Shop; } }
  public bool Currency { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Inventory { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Mail { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.ProtocolSettingExcel> CreateProtocolSettingExcel(FlatBufferBuilder builder,
      StringOffset ProtocolOffset = default(StringOffset),
      FlatDataGlobal.OpenConditionContent openConditionContent = FlatDataGlobal.OpenConditionContent.Shop,
      bool Currency = false,
      bool Inventory = false,
      bool Mail = false) {
    builder.StartTable(5);
    ProtocolSettingExcel.AddOpenConditionContent(builder, openConditionContent);
    ProtocolSettingExcel.AddProtocol(builder, ProtocolOffset);
    ProtocolSettingExcel.AddMail(builder, Mail);
    ProtocolSettingExcel.AddInventory(builder, Inventory);
    ProtocolSettingExcel.AddCurrency(builder, Currency);
    return ProtocolSettingExcel.EndProtocolSettingExcel(builder);
  }

  public static void StartProtocolSettingExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddProtocol(FlatBufferBuilder builder, StringOffset ProtocolOffset) { builder.AddOffset(0, ProtocolOffset.Value, 0); }
  public static void AddOpenConditionContent(FlatBufferBuilder builder, FlatDataGlobal.OpenConditionContent openConditionContent) { builder.AddInt(1, (int)openConditionContent, 0); }
  public static void AddCurrency(FlatBufferBuilder builder, bool Currency) { builder.AddBool(2, Currency, false); }
  public static void AddInventory(FlatBufferBuilder builder, bool Inventory) { builder.AddBool(3, Inventory, false); }
  public static void AddMail(FlatBufferBuilder builder, bool Mail) { builder.AddBool(4, Mail, false); }
  public static Offset<FlatDataGlobal.ProtocolSettingExcel> EndProtocolSettingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ProtocolSettingExcel>(o);
  }
}


}
