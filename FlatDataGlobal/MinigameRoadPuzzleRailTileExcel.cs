// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameRoadPuzzleRailTileExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameRoadPuzzleRailTileExcel GetRootAsMinigameRoadPuzzleRailTileExcel(ByteBuffer _bb) { return GetRootAsMinigameRoadPuzzleRailTileExcel(_bb, new MinigameRoadPuzzleRailTileExcel()); }
  public static MinigameRoadPuzzleRailTileExcel GetRootAsMinigameRoadPuzzleRailTileExcel(ByteBuffer _bb, MinigameRoadPuzzleRailTileExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameRoadPuzzleRailTileExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool OriginalTile { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string PrefabName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(12); }
  public FlatDataGlobal.RoadPuzzleRailTileType RailTileType { get { int o = __p.__offset(14); return o != 0 ? (FlatDataGlobal.RoadPuzzleRailTileType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.RoadPuzzleRailTileType.None; } }

  public static Offset<FlatDataGlobal.MinigameRoadPuzzleRailTileExcel> CreateMinigameRoadPuzzleRailTileExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      long GroupId = 0,
      bool OriginalTile = false,
      StringOffset PrefabNameOffset = default(StringOffset),
      FlatDataGlobal.RoadPuzzleRailTileType RailTileType = FlatDataGlobal.RoadPuzzleRailTileType.None) {
    builder.StartTable(6);
    MinigameRoadPuzzleRailTileExcel.AddGroupId(builder, GroupId);
    MinigameRoadPuzzleRailTileExcel.AddUniqueId(builder, UniqueId);
    MinigameRoadPuzzleRailTileExcel.AddEventContentId(builder, EventContentId);
    MinigameRoadPuzzleRailTileExcel.AddRailTileType(builder, RailTileType);
    MinigameRoadPuzzleRailTileExcel.AddPrefabName(builder, PrefabNameOffset);
    MinigameRoadPuzzleRailTileExcel.AddOriginalTile(builder, OriginalTile);
    return MinigameRoadPuzzleRailTileExcel.EndMinigameRoadPuzzleRailTileExcel(builder);
  }

  public static void StartMinigameRoadPuzzleRailTileExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(1, UniqueId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(2, GroupId, 0); }
  public static void AddOriginalTile(FlatBufferBuilder builder, bool OriginalTile) { builder.AddBool(3, OriginalTile, false); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(4, PrefabNameOffset.Value, 0); }
  public static void AddRailTileType(FlatBufferBuilder builder, FlatDataGlobal.RoadPuzzleRailTileType RailTileType) { builder.AddInt(5, (int)RailTileType, 0); }
  public static Offset<FlatDataGlobal.MinigameRoadPuzzleRailTileExcel> EndMinigameRoadPuzzleRailTileExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MinigameRoadPuzzleRailTileExcel>(o);
  }
}


}
