// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDreamTimelineExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDreamTimelineExcel GetRootAsMiniGameDreamTimelineExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamTimelineExcel(_bb, new MiniGameDreamTimelineExcel()); }
  public static MiniGameDreamTimelineExcel GetRootAsMiniGameDreamTimelineExcel(ByteBuffer _bb, MiniGameDreamTimelineExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamTimelineExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerDays { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerActionPoint { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnterScenarioGroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Bgm { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ArtLevelPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArtLevelPathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetArtLevelPathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetArtLevelPathArray() { return __p.__vector_as_array<byte>(18); }
  public string DesignLevelPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesignLevelPathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDesignLevelPathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDesignLevelPathArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<FlatDataGlobal.MiniGameDreamTimelineExcel> CreateMiniGameDreamTimelineExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      long GroupId = 0,
      long DreamMakerDays = 0,
      long DreamMakerActionPoint = 0,
      long EnterScenarioGroupId = 0,
      long Bgm = 0,
      StringOffset ArtLevelPathOffset = default(StringOffset),
      StringOffset DesignLevelPathOffset = default(StringOffset)) {
    builder.StartTable(9);
    MiniGameDreamTimelineExcel.AddBgm(builder, Bgm);
    MiniGameDreamTimelineExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId);
    MiniGameDreamTimelineExcel.AddDreamMakerActionPoint(builder, DreamMakerActionPoint);
    MiniGameDreamTimelineExcel.AddDreamMakerDays(builder, DreamMakerDays);
    MiniGameDreamTimelineExcel.AddGroupId(builder, GroupId);
    MiniGameDreamTimelineExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamTimelineExcel.AddId(builder, Id);
    MiniGameDreamTimelineExcel.AddDesignLevelPath(builder, DesignLevelPathOffset);
    MiniGameDreamTimelineExcel.AddArtLevelPath(builder, ArtLevelPathOffset);
    return MiniGameDreamTimelineExcel.EndMiniGameDreamTimelineExcel(builder);
  }

  public static void StartMiniGameDreamTimelineExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(1, EventContentId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(2, GroupId, 0); }
  public static void AddDreamMakerDays(FlatBufferBuilder builder, long DreamMakerDays) { builder.AddLong(3, DreamMakerDays, 0); }
  public static void AddDreamMakerActionPoint(FlatBufferBuilder builder, long DreamMakerActionPoint) { builder.AddLong(4, DreamMakerActionPoint, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, long EnterScenarioGroupId) { builder.AddLong(5, EnterScenarioGroupId, 0); }
  public static void AddBgm(FlatBufferBuilder builder, long Bgm) { builder.AddLong(6, Bgm, 0); }
  public static void AddArtLevelPath(FlatBufferBuilder builder, StringOffset ArtLevelPathOffset) { builder.AddOffset(7, ArtLevelPathOffset.Value, 0); }
  public static void AddDesignLevelPath(FlatBufferBuilder builder, StringOffset DesignLevelPathOffset) { builder.AddOffset(8, DesignLevelPathOffset.Value, 0); }
  public static Offset<FlatDataGlobal.MiniGameDreamTimelineExcel> EndMiniGameDreamTimelineExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameDreamTimelineExcel>(o);
  }
}


}
