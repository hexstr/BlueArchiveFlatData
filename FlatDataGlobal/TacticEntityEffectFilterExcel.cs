// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TacticEntityEffectFilterExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static TacticEntityEffectFilterExcel GetRootAsTacticEntityEffectFilterExcel(ByteBuffer _bb) { return GetRootAsTacticEntityEffectFilterExcel(_bb, new TacticEntityEffectFilterExcel()); }
  public static TacticEntityEffectFilterExcel GetRootAsTacticEntityEffectFilterExcel(ByteBuffer _bb, TacticEntityEffectFilterExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TacticEntityEffectFilterExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TargetEffectName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetEffectNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTargetEffectNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTargetEffectNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool ShowEffectToVehicle { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowEffectToBoss { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.TacticEntityEffectFilterExcel> CreateTacticEntityEffectFilterExcel(FlatBufferBuilder builder,
      StringOffset TargetEffectNameOffset = default(StringOffset),
      bool ShowEffectToVehicle = false,
      bool ShowEffectToBoss = false) {
    builder.StartTable(3);
    TacticEntityEffectFilterExcel.AddTargetEffectName(builder, TargetEffectNameOffset);
    TacticEntityEffectFilterExcel.AddShowEffectToBoss(builder, ShowEffectToBoss);
    TacticEntityEffectFilterExcel.AddShowEffectToVehicle(builder, ShowEffectToVehicle);
    return TacticEntityEffectFilterExcel.EndTacticEntityEffectFilterExcel(builder);
  }

  public static void StartTacticEntityEffectFilterExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTargetEffectName(FlatBufferBuilder builder, StringOffset TargetEffectNameOffset) { builder.AddOffset(0, TargetEffectNameOffset.Value, 0); }
  public static void AddShowEffectToVehicle(FlatBufferBuilder builder, bool ShowEffectToVehicle) { builder.AddBool(1, ShowEffectToVehicle, false); }
  public static void AddShowEffectToBoss(FlatBufferBuilder builder, bool ShowEffectToBoss) { builder.AddBool(2, ShowEffectToBoss, false); }
  public static Offset<FlatDataGlobal.TacticEntityEffectFilterExcel> EndTacticEntityEffectFilterExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.TacticEntityEffectFilterExcel>(o);
  }
}


}
