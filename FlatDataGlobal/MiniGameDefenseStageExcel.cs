// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDefenseStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDefenseStageExcel GetRootAsMiniGameDefenseStageExcel(ByteBuffer _bb) { return GetRootAsMiniGameDefenseStageExcel(_bb, new MiniGameDefenseStageExcel()); }
  public static MiniGameDefenseStageExcel GetRootAsMiniGameDefenseStageExcel(ByteBuffer _bb, MiniGameDefenseStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDefenseStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public long EventContentId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.StageDifficulty StageDifficulty { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StageDifficulty.None; } }
  public uint StageDifficultyLocalize { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int StageNumber { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageDisplay { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PrevStageId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(20); return o != 0 ? (FlatDataGlobal.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.EchelonExtensionType.Base; } }
  public long BattleDuration { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType StageEnterCostType { get { int o = __p.__offset(24); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EventContentStageRewardId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnterScenarioGroupId(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int EnterScenarioGroupIdLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetEnterScenarioGroupIdBytes() { return __p.__vector_as_span<long>(32, 8); }
#else
  public ArraySegment<byte>? GetEnterScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public long[] GetEnterScenarioGroupIdArray() { return __p.__vector_as_array<long>(32); }
  public long ClearScenarioGroupId(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ClearScenarioGroupIdLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetClearScenarioGroupIdBytes() { return __p.__vector_as_span<long>(34, 8); }
#else
  public ArraySegment<byte>? GetClearScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public long[] GetClearScenarioGroupIdArray() { return __p.__vector_as_array<long>(34); }
  public FlatDataGlobal.StageTopography StageTopography { get { int o = __p.__offset(36); return o != 0 ? (FlatDataGlobal.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long GroundID { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ContentType ContentType { get { int o = __p.__offset(42); return o != 0 ? (FlatDataGlobal.ContentType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ContentType.None; } }
  public FlatDataGlobal.StarGoalType StarGoal(int j) { int o = __p.__offset(44); return o != 0 ? (FlatDataGlobal.StarGoalType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.StarGoalType)0; }
  public int StarGoalLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.StarGoalType> GetStarGoalBytes() { return __p.__vector_as_span<FlatDataGlobal.StarGoalType>(44, 4); }
#else
  public ArraySegment<byte>? GetStarGoalBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public FlatDataGlobal.StarGoalType[] GetStarGoalArray() { int o = __p.__offset(44); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.StarGoalType[] a = new FlatDataGlobal.StarGoalType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.StarGoalType)__p.bb.GetInt(p + i * 4); } return a; }
  public int StarGoalAmount(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StarGoalAmountLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStarGoalAmountBytes() { return __p.__vector_as_span<int>(46, 4); }
#else
  public ArraySegment<byte>? GetStarGoalAmountBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public int[] GetStarGoalAmountArray() { return __p.__vector_as_array<int>(46); }
  public string DefenseFormationBGPrefab { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefenseFormationBGPrefabBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetDefenseFormationBGPrefabBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetDefenseFormationBGPrefabArray() { return __p.__vector_as_array<byte>(48); }
  public float DefenseFormationBGPrefabScale { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long FixedEchelon { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MininageDefenseFixedStatId { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint StageHint { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatDataGlobal.MiniGameDefenseStageExcel> CreateMiniGameDefenseStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset NameOffset = default(StringOffset),
      long EventContentId = 0,
      FlatDataGlobal.StageDifficulty stageDifficulty = FlatDataGlobal.StageDifficulty.None,
      uint StageDifficultyLocalize = 0,
      int StageNumber = 0,
      int StageDisplay = 0,
      long PrevStageId = 0,
      FlatDataGlobal.EchelonExtensionType echelonExtensionType = FlatDataGlobal.EchelonExtensionType.Base,
      long BattleDuration = 0,
      FlatDataGlobal.ParcelType StageEnterCostType = FlatDataGlobal.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      long EventContentStageRewardId = 0,
      VectorOffset EnterScenarioGroupIdOffset = default(VectorOffset),
      VectorOffset ClearScenarioGroupIdOffset = default(VectorOffset),
      FlatDataGlobal.StageTopography stageTopography = FlatDataGlobal.StageTopography.Street,
      int RecommandLevel = 0,
      long GroundID = 0,
      FlatDataGlobal.ContentType contentType = FlatDataGlobal.ContentType.None,
      VectorOffset StarGoalOffset = default(VectorOffset),
      VectorOffset StarGoalAmountOffset = default(VectorOffset),
      StringOffset DefenseFormationBGPrefabOffset = default(StringOffset),
      float DefenseFormationBGPrefabScale = 0.0f,
      long FixedEchelon = 0,
      long MininageDefenseFixedStatId = 0,
      uint StageHint = 0) {
    builder.StartTable(27);
    MiniGameDefenseStageExcel.AddMininageDefenseFixedStatId(builder, MininageDefenseFixedStatId);
    MiniGameDefenseStageExcel.AddFixedEchelon(builder, FixedEchelon);
    MiniGameDefenseStageExcel.AddGroundID(builder, GroundID);
    MiniGameDefenseStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId);
    MiniGameDefenseStageExcel.AddStageEnterCostId(builder, StageEnterCostId);
    MiniGameDefenseStageExcel.AddBattleDuration(builder, BattleDuration);
    MiniGameDefenseStageExcel.AddPrevStageId(builder, PrevStageId);
    MiniGameDefenseStageExcel.AddEventContentId(builder, EventContentId);
    MiniGameDefenseStageExcel.AddId(builder, Id);
    MiniGameDefenseStageExcel.AddStageHint(builder, StageHint);
    MiniGameDefenseStageExcel.AddDefenseFormationBGPrefabScale(builder, DefenseFormationBGPrefabScale);
    MiniGameDefenseStageExcel.AddDefenseFormationBGPrefab(builder, DefenseFormationBGPrefabOffset);
    MiniGameDefenseStageExcel.AddStarGoalAmount(builder, StarGoalAmountOffset);
    MiniGameDefenseStageExcel.AddStarGoal(builder, StarGoalOffset);
    MiniGameDefenseStageExcel.AddContentType(builder, contentType);
    MiniGameDefenseStageExcel.AddRecommandLevel(builder, RecommandLevel);
    MiniGameDefenseStageExcel.AddStageTopography(builder, stageTopography);
    MiniGameDefenseStageExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupIdOffset);
    MiniGameDefenseStageExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupIdOffset);
    MiniGameDefenseStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    MiniGameDefenseStageExcel.AddStageEnterCostType(builder, StageEnterCostType);
    MiniGameDefenseStageExcel.AddEchelonExtensionType(builder, echelonExtensionType);
    MiniGameDefenseStageExcel.AddStageDisplay(builder, StageDisplay);
    MiniGameDefenseStageExcel.AddStageNumber(builder, StageNumber);
    MiniGameDefenseStageExcel.AddStageDifficultyLocalize(builder, StageDifficultyLocalize);
    MiniGameDefenseStageExcel.AddStageDifficulty(builder, stageDifficulty);
    MiniGameDefenseStageExcel.AddName(builder, NameOffset);
    return MiniGameDefenseStageExcel.EndMiniGameDefenseStageExcel(builder);
  }

  public static void StartMiniGameDefenseStageExcel(FlatBufferBuilder builder) { builder.StartTable(27); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(2, EventContentId, 0); }
  public static void AddStageDifficulty(FlatBufferBuilder builder, FlatDataGlobal.StageDifficulty stageDifficulty) { builder.AddInt(3, (int)stageDifficulty, 0); }
  public static void AddStageDifficultyLocalize(FlatBufferBuilder builder, uint StageDifficultyLocalize) { builder.AddUint(4, StageDifficultyLocalize, 0); }
  public static void AddStageNumber(FlatBufferBuilder builder, int StageNumber) { builder.AddInt(5, StageNumber, 0); }
  public static void AddStageDisplay(FlatBufferBuilder builder, int StageDisplay) { builder.AddInt(6, StageDisplay, 0); }
  public static void AddPrevStageId(FlatBufferBuilder builder, long PrevStageId) { builder.AddLong(7, PrevStageId, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, FlatDataGlobal.EchelonExtensionType echelonExtensionType) { builder.AddInt(8, (int)echelonExtensionType, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long BattleDuration) { builder.AddLong(9, BattleDuration, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType StageEnterCostType) { builder.AddInt(10, (int)StageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long StageEnterCostId) { builder.AddLong(11, StageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int StageEnterCostAmount) { builder.AddInt(12, StageEnterCostAmount, 0); }
  public static void AddEventContentStageRewardId(FlatBufferBuilder builder, long EventContentStageRewardId) { builder.AddLong(13, EventContentStageRewardId, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, VectorOffset EnterScenarioGroupIdOffset) { builder.AddOffset(14, EnterScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateEnterScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnterScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddClearScenarioGroupId(FlatBufferBuilder builder, VectorOffset ClearScenarioGroupIdOffset) { builder.AddOffset(15, ClearScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateClearScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClearScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStageTopography(FlatBufferBuilder builder, FlatDataGlobal.StageTopography stageTopography) { builder.AddInt(16, (int)stageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int RecommandLevel) { builder.AddInt(17, RecommandLevel, 0); }
  public static void AddGroundID(FlatBufferBuilder builder, long GroundID) { builder.AddLong(18, GroundID, 0); }
  public static void AddContentType(FlatBufferBuilder builder, FlatDataGlobal.ContentType contentType) { builder.AddInt(19, (int)contentType, 0); }
  public static void AddStarGoal(FlatBufferBuilder builder, VectorOffset StarGoalOffset) { builder.AddOffset(20, StarGoalOffset.Value, 0); }
  public static VectorOffset CreateStarGoalVector(FlatBufferBuilder builder, FlatDataGlobal.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.StarGoalType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.StarGoalType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStarGoalAmount(FlatBufferBuilder builder, VectorOffset StarGoalAmountOffset) { builder.AddOffset(21, StarGoalAmountOffset.Value, 0); }
  public static VectorOffset CreateStarGoalAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDefenseFormationBGPrefab(FlatBufferBuilder builder, StringOffset DefenseFormationBGPrefabOffset) { builder.AddOffset(22, DefenseFormationBGPrefabOffset.Value, 0); }
  public static void AddDefenseFormationBGPrefabScale(FlatBufferBuilder builder, float DefenseFormationBGPrefabScale) { builder.AddFloat(23, DefenseFormationBGPrefabScale, 0.0f); }
  public static void AddFixedEchelon(FlatBufferBuilder builder, long FixedEchelon) { builder.AddLong(24, FixedEchelon, 0); }
  public static void AddMininageDefenseFixedStatId(FlatBufferBuilder builder, long MininageDefenseFixedStatId) { builder.AddLong(25, MininageDefenseFixedStatId, 0); }
  public static void AddStageHint(FlatBufferBuilder builder, uint StageHint) { builder.AddUint(26, StageHint, 0); }
  public static Offset<FlatDataGlobal.MiniGameDefenseStageExcel> EndMiniGameDefenseStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameDefenseStageExcel>(o);
  }
}


}
