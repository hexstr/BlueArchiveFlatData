// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameRhythmPresetExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameRhythmPresetExcel GetRootAsMiniGameRhythmPresetExcel(ByteBuffer _bb) { return GetRootAsMiniGameRhythmPresetExcel(_bb, new MiniGameRhythmPresetExcel()); }
  public static MiniGameRhythmPresetExcel GetRootAsMiniGameRhythmPresetExcel(ByteBuffer _bb, MiniGameRhythmPresetExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameRhythmPresetExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PresetId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CameraId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float PCSpawnPositionX { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PCSpawnPositionY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DetectionLinePositionX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DetectionLinePositionY { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Speed { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string RhythmNoteObjectLeft { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRhythmNoteObjectLeftBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetRhythmNoteObjectLeftBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetRhythmNoteObjectLeftArray() { return __p.__vector_as_array<byte>(18); }
  public string RhythmNoteObjectRight { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRhythmNoteObjectRightBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetRhythmNoteObjectRightBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetRhythmNoteObjectRightArray() { return __p.__vector_as_array<byte>(20); }
  public string RhythmNoteObjectBoth { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRhythmNoteObjectBothBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetRhythmNoteObjectBothBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetRhythmNoteObjectBothArray() { return __p.__vector_as_array<byte>(22); }
  public float JudgeValuesCritical { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float JudgeValuesAttack { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<FlatDataGlobal.MiniGameRhythmPresetExcel> CreateMiniGameRhythmPresetExcel(FlatBufferBuilder builder,
      long PresetId = 0,
      long CameraId = 0,
      float PCSpawnPositionX = 0.0f,
      float PCSpawnPositionY = 0.0f,
      float DetectionLinePositionX = 0.0f,
      float DetectionLinePositionY = 0.0f,
      float Speed = 0.0f,
      StringOffset RhythmNoteObjectLeftOffset = default(StringOffset),
      StringOffset RhythmNoteObjectRightOffset = default(StringOffset),
      StringOffset RhythmNoteObjectBothOffset = default(StringOffset),
      float JudgeValuesCritical = 0.0f,
      float JudgeValuesAttack = 0.0f) {
    builder.StartTable(12);
    MiniGameRhythmPresetExcel.AddCameraId(builder, CameraId);
    MiniGameRhythmPresetExcel.AddPresetId(builder, PresetId);
    MiniGameRhythmPresetExcel.AddJudgeValuesAttack(builder, JudgeValuesAttack);
    MiniGameRhythmPresetExcel.AddJudgeValuesCritical(builder, JudgeValuesCritical);
    MiniGameRhythmPresetExcel.AddRhythmNoteObjectBoth(builder, RhythmNoteObjectBothOffset);
    MiniGameRhythmPresetExcel.AddRhythmNoteObjectRight(builder, RhythmNoteObjectRightOffset);
    MiniGameRhythmPresetExcel.AddRhythmNoteObjectLeft(builder, RhythmNoteObjectLeftOffset);
    MiniGameRhythmPresetExcel.AddSpeed(builder, Speed);
    MiniGameRhythmPresetExcel.AddDetectionLinePositionY(builder, DetectionLinePositionY);
    MiniGameRhythmPresetExcel.AddDetectionLinePositionX(builder, DetectionLinePositionX);
    MiniGameRhythmPresetExcel.AddPCSpawnPositionY(builder, PCSpawnPositionY);
    MiniGameRhythmPresetExcel.AddPCSpawnPositionX(builder, PCSpawnPositionX);
    return MiniGameRhythmPresetExcel.EndMiniGameRhythmPresetExcel(builder);
  }

  public static void StartMiniGameRhythmPresetExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddPresetId(FlatBufferBuilder builder, long PresetId) { builder.AddLong(0, PresetId, 0); }
  public static void AddCameraId(FlatBufferBuilder builder, long CameraId) { builder.AddLong(1, CameraId, 0); }
  public static void AddPCSpawnPositionX(FlatBufferBuilder builder, float PCSpawnPositionX) { builder.AddFloat(2, PCSpawnPositionX, 0.0f); }
  public static void AddPCSpawnPositionY(FlatBufferBuilder builder, float PCSpawnPositionY) { builder.AddFloat(3, PCSpawnPositionY, 0.0f); }
  public static void AddDetectionLinePositionX(FlatBufferBuilder builder, float DetectionLinePositionX) { builder.AddFloat(4, DetectionLinePositionX, 0.0f); }
  public static void AddDetectionLinePositionY(FlatBufferBuilder builder, float DetectionLinePositionY) { builder.AddFloat(5, DetectionLinePositionY, 0.0f); }
  public static void AddSpeed(FlatBufferBuilder builder, float Speed) { builder.AddFloat(6, Speed, 0.0f); }
  public static void AddRhythmNoteObjectLeft(FlatBufferBuilder builder, StringOffset RhythmNoteObjectLeftOffset) { builder.AddOffset(7, RhythmNoteObjectLeftOffset.Value, 0); }
  public static void AddRhythmNoteObjectRight(FlatBufferBuilder builder, StringOffset RhythmNoteObjectRightOffset) { builder.AddOffset(8, RhythmNoteObjectRightOffset.Value, 0); }
  public static void AddRhythmNoteObjectBoth(FlatBufferBuilder builder, StringOffset RhythmNoteObjectBothOffset) { builder.AddOffset(9, RhythmNoteObjectBothOffset.Value, 0); }
  public static void AddJudgeValuesCritical(FlatBufferBuilder builder, float JudgeValuesCritical) { builder.AddFloat(10, JudgeValuesCritical, 0.0f); }
  public static void AddJudgeValuesAttack(FlatBufferBuilder builder, float JudgeValuesAttack) { builder.AddFloat(11, JudgeValuesAttack, 0.0f); }
  public static Offset<FlatDataGlobal.MiniGameRhythmPresetExcel> EndMiniGameRhythmPresetExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameRhythmPresetExcel>(o);
  }
}


}
