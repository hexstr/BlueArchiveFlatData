// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameShootingCharacterExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameShootingCharacterExcel GetRootAsMiniGameShootingCharacterExcel(ByteBuffer _bb) { return GetRootAsMiniGameShootingCharacterExcel(_bb, new MiniGameShootingCharacterExcel()); }
  public static MiniGameShootingCharacterExcel GetRootAsMiniGameShootingCharacterExcel(ByteBuffer _bb, MiniGameShootingCharacterExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameShootingCharacterExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ModelPrefabName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelPrefabNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetModelPrefabNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetModelPrefabNameArray() { return __p.__vector_as_array<byte>(6); }
  public long BodyRadius { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string NormalAttackSkillData { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNormalAttackSkillDataBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNormalAttackSkillDataBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNormalAttackSkillDataArray() { return __p.__vector_as_array<byte>(10); }
  public long MaxHP { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AttackPower { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefensePower { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalRate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalDamageRate { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AttackRange { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MoveSpeed { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ShotTime { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.MiniGameShootingCharacterExcel> CreateMiniGameShootingCharacterExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      StringOffset ModelPrefabNameOffset = default(StringOffset),
      long BodyRadius = 0,
      StringOffset NormalAttackSkillDataOffset = default(StringOffset),
      long MaxHP = 0,
      long AttackPower = 0,
      long DefensePower = 0,
      long CriticalRate = 0,
      long CriticalDamageRate = 0,
      long AttackRange = 0,
      long MoveSpeed = 0,
      long ShotTime = 0) {
    builder.StartTable(12);
    MiniGameShootingCharacterExcel.AddShotTime(builder, ShotTime);
    MiniGameShootingCharacterExcel.AddMoveSpeed(builder, MoveSpeed);
    MiniGameShootingCharacterExcel.AddAttackRange(builder, AttackRange);
    MiniGameShootingCharacterExcel.AddCriticalDamageRate(builder, CriticalDamageRate);
    MiniGameShootingCharacterExcel.AddCriticalRate(builder, CriticalRate);
    MiniGameShootingCharacterExcel.AddDefensePower(builder, DefensePower);
    MiniGameShootingCharacterExcel.AddAttackPower(builder, AttackPower);
    MiniGameShootingCharacterExcel.AddMaxHP(builder, MaxHP);
    MiniGameShootingCharacterExcel.AddBodyRadius(builder, BodyRadius);
    MiniGameShootingCharacterExcel.AddUniqueId(builder, UniqueId);
    MiniGameShootingCharacterExcel.AddNormalAttackSkillData(builder, NormalAttackSkillDataOffset);
    MiniGameShootingCharacterExcel.AddModelPrefabName(builder, ModelPrefabNameOffset);
    return MiniGameShootingCharacterExcel.EndMiniGameShootingCharacterExcel(builder);
  }

  public static void StartMiniGameShootingCharacterExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddModelPrefabName(FlatBufferBuilder builder, StringOffset ModelPrefabNameOffset) { builder.AddOffset(1, ModelPrefabNameOffset.Value, 0); }
  public static void AddBodyRadius(FlatBufferBuilder builder, long BodyRadius) { builder.AddLong(2, BodyRadius, 0); }
  public static void AddNormalAttackSkillData(FlatBufferBuilder builder, StringOffset NormalAttackSkillDataOffset) { builder.AddOffset(3, NormalAttackSkillDataOffset.Value, 0); }
  public static void AddMaxHP(FlatBufferBuilder builder, long MaxHP) { builder.AddLong(4, MaxHP, 0); }
  public static void AddAttackPower(FlatBufferBuilder builder, long AttackPower) { builder.AddLong(5, AttackPower, 0); }
  public static void AddDefensePower(FlatBufferBuilder builder, long DefensePower) { builder.AddLong(6, DefensePower, 0); }
  public static void AddCriticalRate(FlatBufferBuilder builder, long CriticalRate) { builder.AddLong(7, CriticalRate, 0); }
  public static void AddCriticalDamageRate(FlatBufferBuilder builder, long CriticalDamageRate) { builder.AddLong(8, CriticalDamageRate, 0); }
  public static void AddAttackRange(FlatBufferBuilder builder, long AttackRange) { builder.AddLong(9, AttackRange, 0); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, long MoveSpeed) { builder.AddLong(10, MoveSpeed, 0); }
  public static void AddShotTime(FlatBufferBuilder builder, long ShotTime) { builder.AddLong(11, ShotTime, 0); }
  public static Offset<FlatDataGlobal.MiniGameShootingCharacterExcel> EndMiniGameShootingCharacterExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MiniGameShootingCharacterExcel>(o);
  }
}


}
