// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GroundNodeFlat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static GroundNodeFlat GetRootAsGroundNodeFlat(ByteBuffer _bb) { return GetRootAsGroundNodeFlat(_bb, new GroundNodeFlat()); }
  public static GroundNodeFlat GetRootAsGroundNodeFlat(ByteBuffer _bb, GroundNodeFlat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GroundNodeFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsCanNotUseSkill { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FlatDataGlobal.GroundVector3? Position { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.GroundVector3?)(new FlatDataGlobal.GroundVector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FlatDataGlobal.GroundNodeType NodeType { get { int o = __p.__offset(12); return o != 0 ? (FlatDataGlobal.GroundNodeType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.GroundNodeType.None; } }
  public FlatDataGlobal.GroundNodeType OriginalNodeType { get { int o = __p.__offset(14); return o != 0 ? (FlatDataGlobal.GroundNodeType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.GroundNodeType.None; } }

  public static Offset<FlatDataGlobal.GroundNodeFlat> CreateGroundNodeFlat(FlatBufferBuilder builder,
      int X = 0,
      int Y = 0,
      bool IsCanNotUseSkill = false,
      Offset<FlatDataGlobal.GroundVector3> PositionOffset = default(Offset<FlatDataGlobal.GroundVector3>),
      FlatDataGlobal.GroundNodeType NodeType = FlatDataGlobal.GroundNodeType.None,
      FlatDataGlobal.GroundNodeType OriginalNodeType = FlatDataGlobal.GroundNodeType.None) {
    builder.StartTable(6);
    GroundNodeFlat.AddOriginalNodeType(builder, OriginalNodeType);
    GroundNodeFlat.AddNodeType(builder, NodeType);
    GroundNodeFlat.AddPosition(builder, PositionOffset);
    GroundNodeFlat.AddY(builder, Y);
    GroundNodeFlat.AddX(builder, X);
    GroundNodeFlat.AddIsCanNotUseSkill(builder, IsCanNotUseSkill);
    return GroundNodeFlat.EndGroundNodeFlat(builder);
  }

  public static void StartGroundNodeFlat(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddX(FlatBufferBuilder builder, int X) { builder.AddInt(0, X, 0); }
  public static void AddY(FlatBufferBuilder builder, int Y) { builder.AddInt(1, Y, 0); }
  public static void AddIsCanNotUseSkill(FlatBufferBuilder builder, bool IsCanNotUseSkill) { builder.AddBool(2, IsCanNotUseSkill, false); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<FlatDataGlobal.GroundVector3> PositionOffset) { builder.AddOffset(3, PositionOffset.Value, 0); }
  public static void AddNodeType(FlatBufferBuilder builder, FlatDataGlobal.GroundNodeType NodeType) { builder.AddInt(4, (int)NodeType, 0); }
  public static void AddOriginalNodeType(FlatBufferBuilder builder, FlatDataGlobal.GroundNodeType OriginalNodeType) { builder.AddInt(5, (int)OriginalNodeType, 0); }
  public static Offset<FlatDataGlobal.GroundNodeFlat> EndGroundNodeFlat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.GroundNodeFlat>(o);
  }
}


}
