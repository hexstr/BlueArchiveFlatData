// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScenarioModeRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ScenarioModeRewardExcel GetRootAsScenarioModeRewardExcel(ByteBuffer _bb) { return GetRootAsScenarioModeRewardExcel(_bb, new ScenarioModeRewardExcel()); }
  public static ScenarioModeRewardExcel GetRootAsScenarioModeRewardExcel(ByteBuffer _bb, ScenarioModeRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioModeRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ScenarioModeRewardId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.RewardTag RewardTag { get { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.RewardTag)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.RewardTag.Default; } }
  public int RewardProb { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.ParcelType RewardParcelType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RewardParcelAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsDisplayed { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.ScenarioModeRewardExcel> CreateScenarioModeRewardExcel(FlatBufferBuilder builder,
      long ScenarioModeRewardId = 0,
      FlatDataGlobal.RewardTag rewardTag = FlatDataGlobal.RewardTag.Default,
      int RewardProb = 0,
      FlatDataGlobal.ParcelType RewardParcelType = FlatDataGlobal.ParcelType.None,
      long RewardParcelId = 0,
      int RewardParcelAmount = 0,
      bool IsDisplayed = false) {
    builder.StartTable(7);
    ScenarioModeRewardExcel.AddRewardParcelId(builder, RewardParcelId);
    ScenarioModeRewardExcel.AddScenarioModeRewardId(builder, ScenarioModeRewardId);
    ScenarioModeRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    ScenarioModeRewardExcel.AddRewardParcelType(builder, RewardParcelType);
    ScenarioModeRewardExcel.AddRewardProb(builder, RewardProb);
    ScenarioModeRewardExcel.AddRewardTag(builder, rewardTag);
    ScenarioModeRewardExcel.AddIsDisplayed(builder, IsDisplayed);
    return ScenarioModeRewardExcel.EndScenarioModeRewardExcel(builder);
  }

  public static void StartScenarioModeRewardExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddScenarioModeRewardId(FlatBufferBuilder builder, long ScenarioModeRewardId) { builder.AddLong(0, ScenarioModeRewardId, 0); }
  public static void AddRewardTag(FlatBufferBuilder builder, FlatDataGlobal.RewardTag rewardTag) { builder.AddInt(1, (int)rewardTag, 0); }
  public static void AddRewardProb(FlatBufferBuilder builder, int RewardProb) { builder.AddInt(2, RewardProb, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType RewardParcelType) { builder.AddInt(3, (int)RewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long RewardParcelId) { builder.AddLong(4, RewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, int RewardParcelAmount) { builder.AddInt(5, RewardParcelAmount, 0); }
  public static void AddIsDisplayed(FlatBufferBuilder builder, bool IsDisplayed) { builder.AddBool(6, IsDisplayed, false); }
  public static Offset<FlatDataGlobal.ScenarioModeRewardExcel> EndScenarioModeRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ScenarioModeRewardExcel>(o);
  }
}


}
