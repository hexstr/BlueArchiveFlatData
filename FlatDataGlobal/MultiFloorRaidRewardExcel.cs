// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MultiFloorRaidRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MultiFloorRaidRewardExcel GetRootAsMultiFloorRaidRewardExcel(ByteBuffer _bb) { return GetRootAsMultiFloorRaidRewardExcel(_bb, new MultiFloorRaidRewardExcel()); }
  public static MultiFloorRaidRewardExcel GetRootAsMultiFloorRaidRewardExcel(ByteBuffer _bb, MultiFloorRaidRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MultiFloorRaidRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RewardGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearStageRewardProb { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType ClearStageRewardParcelType { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long ClearStageRewardParcelUniqueID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearStageRewardAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.MultiFloorRaidRewardExcel> CreateMultiFloorRaidRewardExcel(FlatBufferBuilder builder,
      long RewardGroupId = 0,
      long ClearStageRewardProb = 0,
      FlatDataGlobal.ParcelType ClearStageRewardParcelType = FlatDataGlobal.ParcelType.None,
      long ClearStageRewardParcelUniqueID = 0,
      long ClearStageRewardAmount = 0) {
    builder.StartTable(5);
    MultiFloorRaidRewardExcel.AddClearStageRewardAmount(builder, ClearStageRewardAmount);
    MultiFloorRaidRewardExcel.AddClearStageRewardParcelUniqueID(builder, ClearStageRewardParcelUniqueID);
    MultiFloorRaidRewardExcel.AddClearStageRewardProb(builder, ClearStageRewardProb);
    MultiFloorRaidRewardExcel.AddRewardGroupId(builder, RewardGroupId);
    MultiFloorRaidRewardExcel.AddClearStageRewardParcelType(builder, ClearStageRewardParcelType);
    return MultiFloorRaidRewardExcel.EndMultiFloorRaidRewardExcel(builder);
  }

  public static void StartMultiFloorRaidRewardExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddRewardGroupId(FlatBufferBuilder builder, long RewardGroupId) { builder.AddLong(0, RewardGroupId, 0); }
  public static void AddClearStageRewardProb(FlatBufferBuilder builder, long ClearStageRewardProb) { builder.AddLong(1, ClearStageRewardProb, 0); }
  public static void AddClearStageRewardParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType ClearStageRewardParcelType) { builder.AddInt(2, (int)ClearStageRewardParcelType, 0); }
  public static void AddClearStageRewardParcelUniqueID(FlatBufferBuilder builder, long ClearStageRewardParcelUniqueID) { builder.AddLong(3, ClearStageRewardParcelUniqueID, 0); }
  public static void AddClearStageRewardAmount(FlatBufferBuilder builder, long ClearStageRewardAmount) { builder.AddLong(4, ClearStageRewardAmount, 0); }
  public static Offset<FlatDataGlobal.MultiFloorRaidRewardExcel> EndMultiFloorRaidRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MultiFloorRaidRewardExcel>(o);
  }
}


}
