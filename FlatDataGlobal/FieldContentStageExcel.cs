// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldContentStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FieldContentStageExcel GetRootAsFieldContentStageExcel(ByteBuffer _bb) { return GetRootAsFieldContentStageExcel(_bb, new FieldContentStageExcel()); }
  public static FieldContentStageExcel GetRootAsFieldContentStageExcel(ByteBuffer _bb, FieldContentStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldContentStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AreaId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.StageDifficulty StageDifficulty { get { int o = __p.__offset(12); return o != 0 ? (FlatDataGlobal.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StageDifficulty.None; } }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(14); }
  public long BattleDuration { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType StageEnterCostType { get { int o = __p.__offset(18); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.StageTopography StageTopography { get { int o = __p.__offset(24); return o != 0 ? (FlatDataGlobal.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long GroundID { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BGMId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool InstantClear { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long FixedEchelonId { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool SkipFormationSettings { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.FieldContentStageExcel> CreateFieldContentStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      long SeasonId = 0,
      long AreaId = 0,
      long GroupId = 0,
      FlatDataGlobal.StageDifficulty stageDifficulty = FlatDataGlobal.StageDifficulty.None,
      StringOffset NameOffset = default(StringOffset),
      long BattleDuration = 0,
      FlatDataGlobal.ParcelType StageEnterCostType = FlatDataGlobal.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      FlatDataGlobal.StageTopography stageTopography = FlatDataGlobal.StageTopography.Street,
      int RecommandLevel = 0,
      long GroundID = 0,
      long BGMId = 0,
      bool InstantClear = false,
      long FixedEchelonId = 0,
      bool SkipFormationSettings = false) {
    builder.StartTable(17);
    FieldContentStageExcel.AddFixedEchelonId(builder, FixedEchelonId);
    FieldContentStageExcel.AddBGMId(builder, BGMId);
    FieldContentStageExcel.AddGroundID(builder, GroundID);
    FieldContentStageExcel.AddStageEnterCostId(builder, StageEnterCostId);
    FieldContentStageExcel.AddBattleDuration(builder, BattleDuration);
    FieldContentStageExcel.AddGroupId(builder, GroupId);
    FieldContentStageExcel.AddAreaId(builder, AreaId);
    FieldContentStageExcel.AddSeasonId(builder, SeasonId);
    FieldContentStageExcel.AddId(builder, Id);
    FieldContentStageExcel.AddRecommandLevel(builder, RecommandLevel);
    FieldContentStageExcel.AddStageTopography(builder, stageTopography);
    FieldContentStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    FieldContentStageExcel.AddStageEnterCostType(builder, StageEnterCostType);
    FieldContentStageExcel.AddName(builder, NameOffset);
    FieldContentStageExcel.AddStageDifficulty(builder, stageDifficulty);
    FieldContentStageExcel.AddSkipFormationSettings(builder, SkipFormationSettings);
    FieldContentStageExcel.AddInstantClear(builder, InstantClear);
    return FieldContentStageExcel.EndFieldContentStageExcel(builder);
  }

  public static void StartFieldContentStageExcel(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, long SeasonId) { builder.AddLong(1, SeasonId, 0); }
  public static void AddAreaId(FlatBufferBuilder builder, long AreaId) { builder.AddLong(2, AreaId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(3, GroupId, 0); }
  public static void AddStageDifficulty(FlatBufferBuilder builder, FlatDataGlobal.StageDifficulty stageDifficulty) { builder.AddInt(4, (int)stageDifficulty, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(5, NameOffset.Value, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long BattleDuration) { builder.AddLong(6, BattleDuration, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType StageEnterCostType) { builder.AddInt(7, (int)StageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long StageEnterCostId) { builder.AddLong(8, StageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int StageEnterCostAmount) { builder.AddInt(9, StageEnterCostAmount, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, FlatDataGlobal.StageTopography stageTopography) { builder.AddInt(10, (int)stageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int RecommandLevel) { builder.AddInt(11, RecommandLevel, 0); }
  public static void AddGroundID(FlatBufferBuilder builder, long GroundID) { builder.AddLong(12, GroundID, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long BGMId) { builder.AddLong(13, BGMId, 0); }
  public static void AddInstantClear(FlatBufferBuilder builder, bool InstantClear) { builder.AddBool(14, InstantClear, false); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long FixedEchelonId) { builder.AddLong(15, FixedEchelonId, 0); }
  public static void AddSkipFormationSettings(FlatBufferBuilder builder, bool SkipFormationSettings) { builder.AddBool(16, SkipFormationSettings, false); }
  public static Offset<FlatDataGlobal.FieldContentStageExcel> EndFieldContentStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.FieldContentStageExcel>(o);
  }
}


}
