// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct KeyMappingPopupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static KeyMappingPopupExcel GetRootAsKeyMappingPopupExcel(ByteBuffer _bb) { return GetRootAsKeyMappingPopupExcel(_bb, new KeyMappingPopupExcel()); }
  public static KeyMappingPopupExcel GetRootAsKeyMappingPopupExcel(ByteBuffer _bb, KeyMappingPopupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyMappingPopupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PrefabName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(4); }
  public string ButtonName01 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName01Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetButtonName01Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetButtonName01Array() { return __p.__vector_as_array<byte>(6); }
  public string KeyMappingId01 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId01Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId01Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetKeyMappingId01Array() { return __p.__vector_as_array<byte>(8); }
  public string ButtonName02 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName02Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetButtonName02Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetButtonName02Array() { return __p.__vector_as_array<byte>(10); }
  public string KeyMappingId02 { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId02Bytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId02Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetKeyMappingId02Array() { return __p.__vector_as_array<byte>(12); }
  public string ButtonName03 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName03Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetButtonName03Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetButtonName03Array() { return __p.__vector_as_array<byte>(14); }
  public string KeyMappingId03 { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId03Bytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId03Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetKeyMappingId03Array() { return __p.__vector_as_array<byte>(16); }
  public string ButtonName04 { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName04Bytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetButtonName04Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetButtonName04Array() { return __p.__vector_as_array<byte>(18); }
  public string KeyMappingId04 { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId04Bytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId04Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetKeyMappingId04Array() { return __p.__vector_as_array<byte>(20); }
  public string ButtonName05 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName05Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetButtonName05Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetButtonName05Array() { return __p.__vector_as_array<byte>(22); }
  public string KeyMappingId05 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId05Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId05Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetKeyMappingId05Array() { return __p.__vector_as_array<byte>(24); }

  public static Offset<FlatDataGlobal.KeyMappingPopupExcel> CreateKeyMappingPopupExcel(FlatBufferBuilder builder,
      StringOffset PrefabNameOffset = default(StringOffset),
      StringOffset ButtonName01Offset = default(StringOffset),
      StringOffset KeyMappingId01Offset = default(StringOffset),
      StringOffset ButtonName02Offset = default(StringOffset),
      StringOffset KeyMappingId02Offset = default(StringOffset),
      StringOffset ButtonName03Offset = default(StringOffset),
      StringOffset KeyMappingId03Offset = default(StringOffset),
      StringOffset ButtonName04Offset = default(StringOffset),
      StringOffset KeyMappingId04Offset = default(StringOffset),
      StringOffset ButtonName05Offset = default(StringOffset),
      StringOffset KeyMappingId05Offset = default(StringOffset)) {
    builder.StartTable(11);
    KeyMappingPopupExcel.AddKeyMappingId05(builder, KeyMappingId05Offset);
    KeyMappingPopupExcel.AddButtonName05(builder, ButtonName05Offset);
    KeyMappingPopupExcel.AddKeyMappingId04(builder, KeyMappingId04Offset);
    KeyMappingPopupExcel.AddButtonName04(builder, ButtonName04Offset);
    KeyMappingPopupExcel.AddKeyMappingId03(builder, KeyMappingId03Offset);
    KeyMappingPopupExcel.AddButtonName03(builder, ButtonName03Offset);
    KeyMappingPopupExcel.AddKeyMappingId02(builder, KeyMappingId02Offset);
    KeyMappingPopupExcel.AddButtonName02(builder, ButtonName02Offset);
    KeyMappingPopupExcel.AddKeyMappingId01(builder, KeyMappingId01Offset);
    KeyMappingPopupExcel.AddButtonName01(builder, ButtonName01Offset);
    KeyMappingPopupExcel.AddPrefabName(builder, PrefabNameOffset);
    return KeyMappingPopupExcel.EndKeyMappingPopupExcel(builder);
  }

  public static void StartKeyMappingPopupExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(0, PrefabNameOffset.Value, 0); }
  public static void AddButtonName01(FlatBufferBuilder builder, StringOffset ButtonName01Offset) { builder.AddOffset(1, ButtonName01Offset.Value, 0); }
  public static void AddKeyMappingId01(FlatBufferBuilder builder, StringOffset KeyMappingId01Offset) { builder.AddOffset(2, KeyMappingId01Offset.Value, 0); }
  public static void AddButtonName02(FlatBufferBuilder builder, StringOffset ButtonName02Offset) { builder.AddOffset(3, ButtonName02Offset.Value, 0); }
  public static void AddKeyMappingId02(FlatBufferBuilder builder, StringOffset KeyMappingId02Offset) { builder.AddOffset(4, KeyMappingId02Offset.Value, 0); }
  public static void AddButtonName03(FlatBufferBuilder builder, StringOffset ButtonName03Offset) { builder.AddOffset(5, ButtonName03Offset.Value, 0); }
  public static void AddKeyMappingId03(FlatBufferBuilder builder, StringOffset KeyMappingId03Offset) { builder.AddOffset(6, KeyMappingId03Offset.Value, 0); }
  public static void AddButtonName04(FlatBufferBuilder builder, StringOffset ButtonName04Offset) { builder.AddOffset(7, ButtonName04Offset.Value, 0); }
  public static void AddKeyMappingId04(FlatBufferBuilder builder, StringOffset KeyMappingId04Offset) { builder.AddOffset(8, KeyMappingId04Offset.Value, 0); }
  public static void AddButtonName05(FlatBufferBuilder builder, StringOffset ButtonName05Offset) { builder.AddOffset(9, ButtonName05Offset.Value, 0); }
  public static void AddKeyMappingId05(FlatBufferBuilder builder, StringOffset KeyMappingId05Offset) { builder.AddOffset(10, KeyMappingId05Offset.Value, 0); }
  public static Offset<FlatDataGlobal.KeyMappingPopupExcel> EndKeyMappingPopupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.KeyMappingPopupExcel>(o);
  }
}


}
