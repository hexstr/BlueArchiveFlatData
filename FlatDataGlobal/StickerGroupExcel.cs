// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct StickerGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static StickerGroupExcel GetRootAsStickerGroupExcel(ByteBuffer _bb) { return GetRootAsStickerGroupExcel(_bb, new StickerGroupExcel()); }
  public static StickerGroupExcel GetRootAsStickerGroupExcel(ByteBuffer _bb, StickerGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StickerGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Layout { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLayoutBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLayoutBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLayoutArray() { return __p.__vector_as_array<byte>(6); }
  public string UniqueLayoutPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUniqueLayoutPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetUniqueLayoutPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUniqueLayoutPathArray() { return __p.__vector_as_array<byte>(8); }
  public string StickerGroupIconpath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStickerGroupIconpathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStickerGroupIconpathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStickerGroupIconpathArray() { return __p.__vector_as_array<byte>(10); }
  public long PageCompleteSlot { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType PageCompleteRewardParcelType { get { int o = __p.__offset(14); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long PageCompleteRewardParcelId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int PageCompleteRewardAmount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint LocalizeTitle { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint LocalizeDescription { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string StickerGroupCoverpath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStickerGroupCoverpathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetStickerGroupCoverpathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetStickerGroupCoverpathArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<FlatDataGlobal.StickerGroupExcel> CreateStickerGroupExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset LayoutOffset = default(StringOffset),
      StringOffset UniqueLayoutPathOffset = default(StringOffset),
      StringOffset StickerGroupIconpathOffset = default(StringOffset),
      long PageCompleteSlot = 0,
      FlatDataGlobal.ParcelType PageCompleteRewardParcelType = FlatDataGlobal.ParcelType.None,
      long PageCompleteRewardParcelId = 0,
      int PageCompleteRewardAmount = 0,
      uint LocalizeTitle = 0,
      uint LocalizeDescription = 0,
      StringOffset StickerGroupCoverpathOffset = default(StringOffset)) {
    builder.StartTable(11);
    StickerGroupExcel.AddPageCompleteRewardParcelId(builder, PageCompleteRewardParcelId);
    StickerGroupExcel.AddPageCompleteSlot(builder, PageCompleteSlot);
    StickerGroupExcel.AddId(builder, Id);
    StickerGroupExcel.AddStickerGroupCoverpath(builder, StickerGroupCoverpathOffset);
    StickerGroupExcel.AddLocalizeDescription(builder, LocalizeDescription);
    StickerGroupExcel.AddLocalizeTitle(builder, LocalizeTitle);
    StickerGroupExcel.AddPageCompleteRewardAmount(builder, PageCompleteRewardAmount);
    StickerGroupExcel.AddPageCompleteRewardParcelType(builder, PageCompleteRewardParcelType);
    StickerGroupExcel.AddStickerGroupIconpath(builder, StickerGroupIconpathOffset);
    StickerGroupExcel.AddUniqueLayoutPath(builder, UniqueLayoutPathOffset);
    StickerGroupExcel.AddLayout(builder, LayoutOffset);
    return StickerGroupExcel.EndStickerGroupExcel(builder);
  }

  public static void StartStickerGroupExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddLayout(FlatBufferBuilder builder, StringOffset LayoutOffset) { builder.AddOffset(1, LayoutOffset.Value, 0); }
  public static void AddUniqueLayoutPath(FlatBufferBuilder builder, StringOffset UniqueLayoutPathOffset) { builder.AddOffset(2, UniqueLayoutPathOffset.Value, 0); }
  public static void AddStickerGroupIconpath(FlatBufferBuilder builder, StringOffset StickerGroupIconpathOffset) { builder.AddOffset(3, StickerGroupIconpathOffset.Value, 0); }
  public static void AddPageCompleteSlot(FlatBufferBuilder builder, long PageCompleteSlot) { builder.AddLong(4, PageCompleteSlot, 0); }
  public static void AddPageCompleteRewardParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType PageCompleteRewardParcelType) { builder.AddInt(5, (int)PageCompleteRewardParcelType, 0); }
  public static void AddPageCompleteRewardParcelId(FlatBufferBuilder builder, long PageCompleteRewardParcelId) { builder.AddLong(6, PageCompleteRewardParcelId, 0); }
  public static void AddPageCompleteRewardAmount(FlatBufferBuilder builder, int PageCompleteRewardAmount) { builder.AddInt(7, PageCompleteRewardAmount, 0); }
  public static void AddLocalizeTitle(FlatBufferBuilder builder, uint LocalizeTitle) { builder.AddUint(8, LocalizeTitle, 0); }
  public static void AddLocalizeDescription(FlatBufferBuilder builder, uint LocalizeDescription) { builder.AddUint(9, LocalizeDescription, 0); }
  public static void AddStickerGroupCoverpath(FlatBufferBuilder builder, StringOffset StickerGroupCoverpathOffset) { builder.AddOffset(10, StickerGroupCoverpathOffset.Value, 0); }
  public static Offset<FlatDataGlobal.StickerGroupExcel> EndStickerGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.StickerGroupExcel>(o);
  }
}


}
