// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScenarioCharacterNameExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static ScenarioCharacterNameExcel GetRootAsScenarioCharacterNameExcel(ByteBuffer _bb) { return GetRootAsScenarioCharacterNameExcel(_bb, new ScenarioCharacterNameExcel()); }
  public static ScenarioCharacterNameExcel GetRootAsScenarioCharacterNameExcel(ByteBuffer _bb, ScenarioCharacterNameExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioCharacterNameExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint CharacterName { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public FlatDataGlobal.ProductionStep ProductionStep { get { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.ProductionStep)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ProductionStep.ToDo; } }
  public string NameKR { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameKRBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameKRBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameKRArray() { return __p.__vector_as_array<byte>(8); }
  public string NicknameKR { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameKRBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNicknameKRBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNicknameKRArray() { return __p.__vector_as_array<byte>(10); }
  public string NameJP { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameJPBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameJPBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameJPArray() { return __p.__vector_as_array<byte>(12); }
  public string NicknameJP { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameJPBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNicknameJPBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNicknameJPArray() { return __p.__vector_as_array<byte>(14); }
  public string NameTH { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameTHBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNameTHBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNameTHArray() { return __p.__vector_as_array<byte>(16); }
  public string NicknameTH { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameTHBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetNicknameTHBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetNicknameTHArray() { return __p.__vector_as_array<byte>(18); }
  public string NameTW { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameTWBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetNameTWBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetNameTWArray() { return __p.__vector_as_array<byte>(20); }
  public string NicknameTW { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameTWBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetNicknameTWBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetNicknameTWArray() { return __p.__vector_as_array<byte>(22); }
  public string NameEN { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameENBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetNameENBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetNameENArray() { return __p.__vector_as_array<byte>(24); }
  public string NicknameEN { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameENBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetNicknameENBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetNicknameENArray() { return __p.__vector_as_array<byte>(26); }
  public FlatDataGlobal.ScenarioCharacterShapes Shape { get { int o = __p.__offset(28); return o != 0 ? (FlatDataGlobal.ScenarioCharacterShapes)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ScenarioCharacterShapes.None; } }
  public string SpinePrefabName { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpinePrefabNameBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetSpinePrefabNameBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetSpinePrefabNameArray() { return __p.__vector_as_array<byte>(30); }
  public string SmallPortrait { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallPortraitBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSmallPortraitBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSmallPortraitArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<FlatDataGlobal.ScenarioCharacterNameExcel> CreateScenarioCharacterNameExcel(FlatBufferBuilder builder,
      uint CharacterName = 0,
      FlatDataGlobal.ProductionStep ProductionStep = FlatDataGlobal.ProductionStep.ToDo,
      StringOffset NameKROffset = default(StringOffset),
      StringOffset NicknameKROffset = default(StringOffset),
      StringOffset NameJPOffset = default(StringOffset),
      StringOffset NicknameJPOffset = default(StringOffset),
      StringOffset NameTHOffset = default(StringOffset),
      StringOffset NicknameTHOffset = default(StringOffset),
      StringOffset NameTWOffset = default(StringOffset),
      StringOffset NicknameTWOffset = default(StringOffset),
      StringOffset NameENOffset = default(StringOffset),
      StringOffset NicknameENOffset = default(StringOffset),
      FlatDataGlobal.ScenarioCharacterShapes Shape = FlatDataGlobal.ScenarioCharacterShapes.None,
      StringOffset SpinePrefabNameOffset = default(StringOffset),
      StringOffset SmallPortraitOffset = default(StringOffset)) {
    builder.StartTable(15);
    ScenarioCharacterNameExcel.AddSmallPortrait(builder, SmallPortraitOffset);
    ScenarioCharacterNameExcel.AddSpinePrefabName(builder, SpinePrefabNameOffset);
    ScenarioCharacterNameExcel.AddShape(builder, Shape);
    ScenarioCharacterNameExcel.AddNicknameEN(builder, NicknameENOffset);
    ScenarioCharacterNameExcel.AddNameEN(builder, NameENOffset);
    ScenarioCharacterNameExcel.AddNicknameTW(builder, NicknameTWOffset);
    ScenarioCharacterNameExcel.AddNameTW(builder, NameTWOffset);
    ScenarioCharacterNameExcel.AddNicknameTH(builder, NicknameTHOffset);
    ScenarioCharacterNameExcel.AddNameTH(builder, NameTHOffset);
    ScenarioCharacterNameExcel.AddNicknameJP(builder, NicknameJPOffset);
    ScenarioCharacterNameExcel.AddNameJP(builder, NameJPOffset);
    ScenarioCharacterNameExcel.AddNicknameKR(builder, NicknameKROffset);
    ScenarioCharacterNameExcel.AddNameKR(builder, NameKROffset);
    ScenarioCharacterNameExcel.AddProductionStep(builder, ProductionStep);
    ScenarioCharacterNameExcel.AddCharacterName(builder, CharacterName);
    return ScenarioCharacterNameExcel.EndScenarioCharacterNameExcel(builder);
  }

  public static void StartScenarioCharacterNameExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddCharacterName(FlatBufferBuilder builder, uint CharacterName) { builder.AddUint(0, CharacterName, 0); }
  public static void AddProductionStep(FlatBufferBuilder builder, FlatDataGlobal.ProductionStep ProductionStep) { builder.AddInt(1, (int)ProductionStep, 0); }
  public static void AddNameKR(FlatBufferBuilder builder, StringOffset NameKROffset) { builder.AddOffset(2, NameKROffset.Value, 0); }
  public static void AddNicknameKR(FlatBufferBuilder builder, StringOffset NicknameKROffset) { builder.AddOffset(3, NicknameKROffset.Value, 0); }
  public static void AddNameJP(FlatBufferBuilder builder, StringOffset NameJPOffset) { builder.AddOffset(4, NameJPOffset.Value, 0); }
  public static void AddNicknameJP(FlatBufferBuilder builder, StringOffset NicknameJPOffset) { builder.AddOffset(5, NicknameJPOffset.Value, 0); }
  public static void AddNameTH(FlatBufferBuilder builder, StringOffset NameTHOffset) { builder.AddOffset(6, NameTHOffset.Value, 0); }
  public static void AddNicknameTH(FlatBufferBuilder builder, StringOffset NicknameTHOffset) { builder.AddOffset(7, NicknameTHOffset.Value, 0); }
  public static void AddNameTW(FlatBufferBuilder builder, StringOffset NameTWOffset) { builder.AddOffset(8, NameTWOffset.Value, 0); }
  public static void AddNicknameTW(FlatBufferBuilder builder, StringOffset NicknameTWOffset) { builder.AddOffset(9, NicknameTWOffset.Value, 0); }
  public static void AddNameEN(FlatBufferBuilder builder, StringOffset NameENOffset) { builder.AddOffset(10, NameENOffset.Value, 0); }
  public static void AddNicknameEN(FlatBufferBuilder builder, StringOffset NicknameENOffset) { builder.AddOffset(11, NicknameENOffset.Value, 0); }
  public static void AddShape(FlatBufferBuilder builder, FlatDataGlobal.ScenarioCharacterShapes Shape) { builder.AddInt(12, (int)Shape, 0); }
  public static void AddSpinePrefabName(FlatBufferBuilder builder, StringOffset SpinePrefabNameOffset) { builder.AddOffset(13, SpinePrefabNameOffset.Value, 0); }
  public static void AddSmallPortrait(FlatBufferBuilder builder, StringOffset SmallPortraitOffset) { builder.AddOffset(14, SmallPortraitOffset.Value, 0); }
  public static Offset<FlatDataGlobal.ScenarioCharacterNameExcel> EndScenarioCharacterNameExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ScenarioCharacterNameExcel>(o);
  }
}


}
