// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventContentZoneVisitRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static EventContentZoneVisitRewardExcel GetRootAsEventContentZoneVisitRewardExcel(ByteBuffer _bb) { return GetRootAsEventContentZoneVisitRewardExcel(_bb, new EventContentZoneVisitRewardExcel()); }
  public static EventContentZoneVisitRewardExcel GetRootAsEventContentZoneVisitRewardExcel(ByteBuffer _bb, EventContentZoneVisitRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentZoneVisitRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentLocationId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DevName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDevNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDevNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDevNameArray() { return __p.__vector_as_array<byte>(8); }
  public long CharacterId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string CharacterDevName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterDevNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCharacterDevNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCharacterDevNameArray() { return __p.__vector_as_array<byte>(12); }
  public FlatDataGlobal.ParcelType VisitRewardParcelType(int j) { int o = __p.__offset(14); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.ParcelType)0; }
  public int VisitRewardParcelTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.ParcelType> GetVisitRewardParcelTypeBytes() { return __p.__vector_as_span<FlatDataGlobal.ParcelType>(14, 4); }
#else
  public ArraySegment<byte>? GetVisitRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public FlatDataGlobal.ParcelType[] GetVisitRewardParcelTypeArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.ParcelType[] a = new FlatDataGlobal.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long VisitRewardParcelId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int VisitRewardParcelIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetVisitRewardParcelIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetVisitRewardParcelIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetVisitRewardParcelIdArray() { return __p.__vector_as_array<long>(16); }
  public long VisitRewardAmount(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int VisitRewardAmountLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetVisitRewardAmountBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetVisitRewardAmountBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetVisitRewardAmountArray() { return __p.__vector_as_array<long>(18); }
  public long VisitRewardProb(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int VisitRewardProbLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetVisitRewardProbBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetVisitRewardProbBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetVisitRewardProbArray() { return __p.__vector_as_array<long>(20); }

  public static Offset<FlatDataGlobal.EventContentZoneVisitRewardExcel> CreateEventContentZoneVisitRewardExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long EventContentLocationId = 0,
      StringOffset DevNameOffset = default(StringOffset),
      long CharacterId = 0,
      StringOffset CharacterDevNameOffset = default(StringOffset),
      VectorOffset VisitRewardParcelTypeOffset = default(VectorOffset),
      VectorOffset VisitRewardParcelIdOffset = default(VectorOffset),
      VectorOffset VisitRewardAmountOffset = default(VectorOffset),
      VectorOffset VisitRewardProbOffset = default(VectorOffset)) {
    builder.StartTable(9);
    EventContentZoneVisitRewardExcel.AddCharacterId(builder, CharacterId);
    EventContentZoneVisitRewardExcel.AddEventContentLocationId(builder, EventContentLocationId);
    EventContentZoneVisitRewardExcel.AddEventContentId(builder, EventContentId);
    EventContentZoneVisitRewardExcel.AddVisitRewardProb(builder, VisitRewardProbOffset);
    EventContentZoneVisitRewardExcel.AddVisitRewardAmount(builder, VisitRewardAmountOffset);
    EventContentZoneVisitRewardExcel.AddVisitRewardParcelId(builder, VisitRewardParcelIdOffset);
    EventContentZoneVisitRewardExcel.AddVisitRewardParcelType(builder, VisitRewardParcelTypeOffset);
    EventContentZoneVisitRewardExcel.AddCharacterDevName(builder, CharacterDevNameOffset);
    EventContentZoneVisitRewardExcel.AddDevName(builder, DevNameOffset);
    return EventContentZoneVisitRewardExcel.EndEventContentZoneVisitRewardExcel(builder);
  }

  public static void StartEventContentZoneVisitRewardExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddEventContentLocationId(FlatBufferBuilder builder, long EventContentLocationId) { builder.AddLong(1, EventContentLocationId, 0); }
  public static void AddDevName(FlatBufferBuilder builder, StringOffset DevNameOffset) { builder.AddOffset(2, DevNameOffset.Value, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long CharacterId) { builder.AddLong(3, CharacterId, 0); }
  public static void AddCharacterDevName(FlatBufferBuilder builder, StringOffset CharacterDevNameOffset) { builder.AddOffset(4, CharacterDevNameOffset.Value, 0); }
  public static void AddVisitRewardParcelType(FlatBufferBuilder builder, VectorOffset VisitRewardParcelTypeOffset) { builder.AddOffset(5, VisitRewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateVisitRewardParcelTypeVector(FlatBufferBuilder builder, FlatDataGlobal.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardParcelTypeVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVisitRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVisitRewardParcelId(FlatBufferBuilder builder, VectorOffset VisitRewardParcelIdOffset) { builder.AddOffset(6, VisitRewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateVisitRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVisitRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddVisitRewardAmount(FlatBufferBuilder builder, VectorOffset VisitRewardAmountOffset) { builder.AddOffset(7, VisitRewardAmountOffset.Value, 0); }
  public static VectorOffset CreateVisitRewardAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVisitRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddVisitRewardProb(FlatBufferBuilder builder, VectorOffset VisitRewardProbOffset) { builder.AddOffset(8, VisitRewardProbOffset.Value, 0); }
  public static VectorOffset CreateVisitRewardProbVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardProbVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardProbVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVisitRewardProbVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVisitRewardProbVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<FlatDataGlobal.EventContentZoneVisitRewardExcel> EndEventContentZoneVisitRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.EventContentZoneVisitRewardExcel>(o);
  }
}


}
