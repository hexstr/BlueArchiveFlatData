// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ObstacleStatExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ObstacleStatExcel GetRootAsObstacleStatExcel(ByteBuffer _bb) { return GetRootAsObstacleStatExcel(_bb, new ObstacleStatExcel()); }
  public static ObstacleStatExcel GetRootAsObstacleStatExcel(ByteBuffer _bb, ObstacleStatExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObstacleStatExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint StringID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public long MaxHP1 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxHP100 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BlockRate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Dodge { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CanNotStandRange { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float HighlightFloaterHeight { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long EnhanceLightArmorRate { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceHeavyArmorRate { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceUnarmedRate { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceElasticArmorRate { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceStructureRate { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceNormalArmorRate { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ReduceExDamagedRate { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataGlobal.ObstacleStatExcel> CreateObstacleStatExcel(FlatBufferBuilder builder,
      uint StringID = 0,
      StringOffset NameOffset = default(StringOffset),
      long MaxHP1 = 0,
      long MaxHP100 = 0,
      long BlockRate = 0,
      long Dodge = 0,
      long CanNotStandRange = 0,
      float HighlightFloaterHeight = 0.0f,
      long EnhanceLightArmorRate = 0,
      long EnhanceHeavyArmorRate = 0,
      long EnhanceUnarmedRate = 0,
      long EnhanceElasticArmorRate = 0,
      long EnhanceStructureRate = 0,
      long EnhanceNormalArmorRate = 0,
      long ReduceExDamagedRate = 0) {
    builder.StartTable(15);
    ObstacleStatExcel.AddReduceExDamagedRate(builder, ReduceExDamagedRate);
    ObstacleStatExcel.AddEnhanceNormalArmorRate(builder, EnhanceNormalArmorRate);
    ObstacleStatExcel.AddEnhanceStructureRate(builder, EnhanceStructureRate);
    ObstacleStatExcel.AddEnhanceElasticArmorRate(builder, EnhanceElasticArmorRate);
    ObstacleStatExcel.AddEnhanceUnarmedRate(builder, EnhanceUnarmedRate);
    ObstacleStatExcel.AddEnhanceHeavyArmorRate(builder, EnhanceHeavyArmorRate);
    ObstacleStatExcel.AddEnhanceLightArmorRate(builder, EnhanceLightArmorRate);
    ObstacleStatExcel.AddCanNotStandRange(builder, CanNotStandRange);
    ObstacleStatExcel.AddDodge(builder, Dodge);
    ObstacleStatExcel.AddBlockRate(builder, BlockRate);
    ObstacleStatExcel.AddMaxHP100(builder, MaxHP100);
    ObstacleStatExcel.AddMaxHP1(builder, MaxHP1);
    ObstacleStatExcel.AddHighlightFloaterHeight(builder, HighlightFloaterHeight);
    ObstacleStatExcel.AddName(builder, NameOffset);
    ObstacleStatExcel.AddStringID(builder, StringID);
    return ObstacleStatExcel.EndObstacleStatExcel(builder);
  }

  public static void StartObstacleStatExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddStringID(FlatBufferBuilder builder, uint StringID) { builder.AddUint(0, StringID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddMaxHP1(FlatBufferBuilder builder, long MaxHP1) { builder.AddLong(2, MaxHP1, 0); }
  public static void AddMaxHP100(FlatBufferBuilder builder, long MaxHP100) { builder.AddLong(3, MaxHP100, 0); }
  public static void AddBlockRate(FlatBufferBuilder builder, long BlockRate) { builder.AddLong(4, BlockRate, 0); }
  public static void AddDodge(FlatBufferBuilder builder, long Dodge) { builder.AddLong(5, Dodge, 0); }
  public static void AddCanNotStandRange(FlatBufferBuilder builder, long CanNotStandRange) { builder.AddLong(6, CanNotStandRange, 0); }
  public static void AddHighlightFloaterHeight(FlatBufferBuilder builder, float HighlightFloaterHeight) { builder.AddFloat(7, HighlightFloaterHeight, 0.0f); }
  public static void AddEnhanceLightArmorRate(FlatBufferBuilder builder, long EnhanceLightArmorRate) { builder.AddLong(8, EnhanceLightArmorRate, 0); }
  public static void AddEnhanceHeavyArmorRate(FlatBufferBuilder builder, long EnhanceHeavyArmorRate) { builder.AddLong(9, EnhanceHeavyArmorRate, 0); }
  public static void AddEnhanceUnarmedRate(FlatBufferBuilder builder, long EnhanceUnarmedRate) { builder.AddLong(10, EnhanceUnarmedRate, 0); }
  public static void AddEnhanceElasticArmorRate(FlatBufferBuilder builder, long EnhanceElasticArmorRate) { builder.AddLong(11, EnhanceElasticArmorRate, 0); }
  public static void AddEnhanceStructureRate(FlatBufferBuilder builder, long EnhanceStructureRate) { builder.AddLong(12, EnhanceStructureRate, 0); }
  public static void AddEnhanceNormalArmorRate(FlatBufferBuilder builder, long EnhanceNormalArmorRate) { builder.AddLong(13, EnhanceNormalArmorRate, 0); }
  public static void AddReduceExDamagedRate(FlatBufferBuilder builder, long ReduceExDamagedRate) { builder.AddLong(14, ReduceExDamagedRate, 0); }
  public static Offset<FlatDataGlobal.ObstacleStatExcel> EndObstacleStatExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ObstacleStatExcel>(o);
  }
}


}
