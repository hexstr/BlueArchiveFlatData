// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConquestObjectExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ConquestObjectExcel GetRootAsConquestObjectExcel(ByteBuffer _bb) { return GetRootAsConquestObjectExcel(_bb, new ConquestObjectExcel()); }
  public static ConquestObjectExcel GetRootAsConquestObjectExcel(ByteBuffer _bb, ConquestObjectExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestObjectExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint Key { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public int Step { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PrefabName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(14); }
  public FlatDataGlobal.ConquestObjectType Conquestobjecttype { get { int o = __p.__offset(16); return o != 0 ? (FlatDataGlobal.ConquestObjectType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ConquestObjectType.None; } }
  public string ConquestRewardName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConquestRewardNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetConquestRewardNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetConquestRewardNameArray() { return __p.__vector_as_array<byte>(18); }
  public FlatDataGlobal.ParcelType ConquestRewardParcelType { get { int o = __p.__offset(20); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long ConquestRewardID { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ConquestRewardAmount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Disposable { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.ConquestObjectExcel> CreateConquestObjectExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      long Id = 0,
      uint Key = 0,
      StringOffset NameOffset = default(StringOffset),
      int Step = 0,
      StringOffset PrefabNameOffset = default(StringOffset),
      FlatDataGlobal.ConquestObjectType conquestobjecttype = FlatDataGlobal.ConquestObjectType.None,
      StringOffset ConquestRewardNameOffset = default(StringOffset),
      FlatDataGlobal.ParcelType ConquestRewardParcelType = FlatDataGlobal.ParcelType.None,
      long ConquestRewardID = 0,
      int ConquestRewardAmount = 0,
      bool Disposable = false) {
    builder.StartTable(12);
    ConquestObjectExcel.AddConquestRewardID(builder, ConquestRewardID);
    ConquestObjectExcel.AddId(builder, Id);
    ConquestObjectExcel.AddGroupId(builder, GroupId);
    ConquestObjectExcel.AddConquestRewardAmount(builder, ConquestRewardAmount);
    ConquestObjectExcel.AddConquestRewardParcelType(builder, ConquestRewardParcelType);
    ConquestObjectExcel.AddConquestRewardName(builder, ConquestRewardNameOffset);
    ConquestObjectExcel.AddConquestobjecttype(builder, conquestobjecttype);
    ConquestObjectExcel.AddPrefabName(builder, PrefabNameOffset);
    ConquestObjectExcel.AddStep(builder, Step);
    ConquestObjectExcel.AddName(builder, NameOffset);
    ConquestObjectExcel.AddKey(builder, Key);
    ConquestObjectExcel.AddDisposable(builder, Disposable);
    return ConquestObjectExcel.EndConquestObjectExcel(builder);
  }

  public static void StartConquestObjectExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(0, GroupId, 0); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(1, Id, 0); }
  public static void AddKey(FlatBufferBuilder builder, uint Key) { builder.AddUint(2, Key, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(3, NameOffset.Value, 0); }
  public static void AddStep(FlatBufferBuilder builder, int Step) { builder.AddInt(4, Step, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(5, PrefabNameOffset.Value, 0); }
  public static void AddConquestobjecttype(FlatBufferBuilder builder, FlatDataGlobal.ConquestObjectType conquestobjecttype) { builder.AddInt(6, (int)conquestobjecttype, 0); }
  public static void AddConquestRewardName(FlatBufferBuilder builder, StringOffset ConquestRewardNameOffset) { builder.AddOffset(7, ConquestRewardNameOffset.Value, 0); }
  public static void AddConquestRewardParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType ConquestRewardParcelType) { builder.AddInt(8, (int)ConquestRewardParcelType, 0); }
  public static void AddConquestRewardID(FlatBufferBuilder builder, long ConquestRewardID) { builder.AddLong(9, ConquestRewardID, 0); }
  public static void AddConquestRewardAmount(FlatBufferBuilder builder, int ConquestRewardAmount) { builder.AddInt(10, ConquestRewardAmount, 0); }
  public static void AddDisposable(FlatBufferBuilder builder, bool Disposable) { builder.AddBool(11, Disposable, false); }
  public static Offset<FlatDataGlobal.ConquestObjectExcel> EndConquestObjectExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ConquestObjectExcel>(o);
  }
}


}
