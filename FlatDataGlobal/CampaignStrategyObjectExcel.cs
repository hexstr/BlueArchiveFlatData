// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CampaignStrategyObjectExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CampaignStrategyObjectExcel GetRootAsCampaignStrategyObjectExcel(ByteBuffer _bb) { return GetRootAsCampaignStrategyObjectExcel(_bb, new CampaignStrategyObjectExcel()); }
  public static CampaignStrategyObjectExcel GetRootAsCampaignStrategyObjectExcel(ByteBuffer _bb, CampaignStrategyObjectExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CampaignStrategyObjectExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint Key { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string PrefabName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(10); }
  public FlatDataGlobal.StrategyObjectType Strategyobjecttype { get { int o = __p.__offset(12); return o != 0 ? (FlatDataGlobal.StrategyObjectType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StrategyObjectType.None; } }
  public FlatDataGlobal.ParcelType StrategyRewardParcelType { get { int o = __p.__offset(14); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long StrategyRewardID { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StrategyRewardName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyRewardNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetStrategyRewardNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetStrategyRewardNameArray() { return __p.__vector_as_array<byte>(18); }
  public int StrategyRewardAmount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long StrategySightRange { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int PortalId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HealValue { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SwithId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Disposable { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.CampaignStrategyObjectExcel> CreateCampaignStrategyObjectExcel(FlatBufferBuilder builder,
      long Id = 0,
      uint Key = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset PrefabNameOffset = default(StringOffset),
      FlatDataGlobal.StrategyObjectType strategyobjecttype = FlatDataGlobal.StrategyObjectType.None,
      FlatDataGlobal.ParcelType StrategyRewardParcelType = FlatDataGlobal.ParcelType.None,
      long StrategyRewardID = 0,
      StringOffset StrategyRewardNameOffset = default(StringOffset),
      int StrategyRewardAmount = 0,
      long StrategySightRange = 0,
      int PortalId = 0,
      int HealValue = 0,
      int SwithId = 0,
      int BuffId = 0,
      bool Disposable = false) {
    builder.StartTable(15);
    CampaignStrategyObjectExcel.AddStrategySightRange(builder, StrategySightRange);
    CampaignStrategyObjectExcel.AddStrategyRewardID(builder, StrategyRewardID);
    CampaignStrategyObjectExcel.AddId(builder, Id);
    CampaignStrategyObjectExcel.AddBuffId(builder, BuffId);
    CampaignStrategyObjectExcel.AddSwithId(builder, SwithId);
    CampaignStrategyObjectExcel.AddHealValue(builder, HealValue);
    CampaignStrategyObjectExcel.AddPortalId(builder, PortalId);
    CampaignStrategyObjectExcel.AddStrategyRewardAmount(builder, StrategyRewardAmount);
    CampaignStrategyObjectExcel.AddStrategyRewardName(builder, StrategyRewardNameOffset);
    CampaignStrategyObjectExcel.AddStrategyRewardParcelType(builder, StrategyRewardParcelType);
    CampaignStrategyObjectExcel.AddStrategyobjecttype(builder, strategyobjecttype);
    CampaignStrategyObjectExcel.AddPrefabName(builder, PrefabNameOffset);
    CampaignStrategyObjectExcel.AddName(builder, NameOffset);
    CampaignStrategyObjectExcel.AddKey(builder, Key);
    CampaignStrategyObjectExcel.AddDisposable(builder, Disposable);
    return CampaignStrategyObjectExcel.EndCampaignStrategyObjectExcel(builder);
  }

  public static void StartCampaignStrategyObjectExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddKey(FlatBufferBuilder builder, uint Key) { builder.AddUint(1, Key, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(2, NameOffset.Value, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(3, PrefabNameOffset.Value, 0); }
  public static void AddStrategyobjecttype(FlatBufferBuilder builder, FlatDataGlobal.StrategyObjectType strategyobjecttype) { builder.AddInt(4, (int)strategyobjecttype, 0); }
  public static void AddStrategyRewardParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType StrategyRewardParcelType) { builder.AddInt(5, (int)StrategyRewardParcelType, 0); }
  public static void AddStrategyRewardID(FlatBufferBuilder builder, long StrategyRewardID) { builder.AddLong(6, StrategyRewardID, 0); }
  public static void AddStrategyRewardName(FlatBufferBuilder builder, StringOffset StrategyRewardNameOffset) { builder.AddOffset(7, StrategyRewardNameOffset.Value, 0); }
  public static void AddStrategyRewardAmount(FlatBufferBuilder builder, int StrategyRewardAmount) { builder.AddInt(8, StrategyRewardAmount, 0); }
  public static void AddStrategySightRange(FlatBufferBuilder builder, long StrategySightRange) { builder.AddLong(9, StrategySightRange, 0); }
  public static void AddPortalId(FlatBufferBuilder builder, int PortalId) { builder.AddInt(10, PortalId, 0); }
  public static void AddHealValue(FlatBufferBuilder builder, int HealValue) { builder.AddInt(11, HealValue, 0); }
  public static void AddSwithId(FlatBufferBuilder builder, int SwithId) { builder.AddInt(12, SwithId, 0); }
  public static void AddBuffId(FlatBufferBuilder builder, int BuffId) { builder.AddInt(13, BuffId, 0); }
  public static void AddDisposable(FlatBufferBuilder builder, bool Disposable) { builder.AddBool(14, Disposable, false); }
  public static Offset<FlatDataGlobal.CampaignStrategyObjectExcel> EndCampaignStrategyObjectExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.CampaignStrategyObjectExcel>(o);
  }
}


}
