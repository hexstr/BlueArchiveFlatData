// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct StickerPageContentExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static StickerPageContentExcel GetRootAsStickerPageContentExcel(ByteBuffer _bb) { return GetRootAsStickerPageContentExcel(_bb, new StickerPageContentExcel()); }
  public static StickerPageContentExcel GetRootAsStickerPageContentExcel(ByteBuffer _bb, StickerPageContentExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StickerPageContentExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StickerGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StickerPageId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StickerSlot { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.StickerGetConditionType StickerGetConditionType { get { int o = __p.__offset(12); return o != 0 ? (FlatDataGlobal.StickerGetConditionType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StickerGetConditionType.None; } }
  public FlatDataGlobal.StickerCheckPassType StickerCheckPassType { get { int o = __p.__offset(14); return o != 0 ? (FlatDataGlobal.StickerCheckPassType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StickerCheckPassType.None; } }
  public FlatDataGlobal.GetStickerConditionType GetStickerConditionType { get { int o = __p.__offset(16); return o != 0 ? (FlatDataGlobal.GetStickerConditionType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.GetStickerConditionType.None; } }
  public long StickerGetConditionCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StickerGetConditionParameter(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StickerGetConditionParameterLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStickerGetConditionParameterBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetStickerGetConditionParameterBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetStickerGetConditionParameterArray() { return __p.__vector_as_array<long>(20); }
  public FlatDataGlobal.Tag StickerGetConditionParameterTag(int j) { int o = __p.__offset(22); return o != 0 ? (FlatDataGlobal.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.Tag)0; }
  public int StickerGetConditionParameterTagLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.Tag> GetStickerGetConditionParameterTagBytes() { return __p.__vector_as_span<FlatDataGlobal.Tag>(22, 4); }
#else
  public ArraySegment<byte>? GetStickerGetConditionParameterTagBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public FlatDataGlobal.Tag[] GetStickerGetConditionParameterTagArray() { int o = __p.__offset(22); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.Tag[] a = new FlatDataGlobal.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public uint PackedStickerIconLocalizeEtcId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string PackedStickerIconPath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPackedStickerIconPathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPackedStickerIconPathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPackedStickerIconPathArray() { return __p.__vector_as_array<byte>(26); }
  public string IconPath { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(28); }
  public string StickerDetailPath { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStickerDetailPathBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetStickerDetailPathBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetStickerDetailPathArray() { return __p.__vector_as_array<byte>(30); }

  public static Offset<FlatDataGlobal.StickerPageContentExcel> CreateStickerPageContentExcel(FlatBufferBuilder builder,
      long Id = 0,
      long StickerGroupId = 0,
      long StickerPageId = 0,
      long StickerSlot = 0,
      FlatDataGlobal.StickerGetConditionType stickerGetConditionType = FlatDataGlobal.StickerGetConditionType.None,
      FlatDataGlobal.StickerCheckPassType stickerCheckPassType = FlatDataGlobal.StickerCheckPassType.None,
      FlatDataGlobal.GetStickerConditionType getStickerConditionType = FlatDataGlobal.GetStickerConditionType.None,
      long StickerGetConditionCount = 0,
      VectorOffset StickerGetConditionParameterOffset = default(VectorOffset),
      VectorOffset StickerGetConditionParameterTagOffset = default(VectorOffset),
      uint PackedStickerIconLocalizeEtcId = 0,
      StringOffset PackedStickerIconPathOffset = default(StringOffset),
      StringOffset IconPathOffset = default(StringOffset),
      StringOffset StickerDetailPathOffset = default(StringOffset)) {
    builder.StartTable(14);
    StickerPageContentExcel.AddStickerGetConditionCount(builder, StickerGetConditionCount);
    StickerPageContentExcel.AddStickerSlot(builder, StickerSlot);
    StickerPageContentExcel.AddStickerPageId(builder, StickerPageId);
    StickerPageContentExcel.AddStickerGroupId(builder, StickerGroupId);
    StickerPageContentExcel.AddId(builder, Id);
    StickerPageContentExcel.AddStickerDetailPath(builder, StickerDetailPathOffset);
    StickerPageContentExcel.AddIconPath(builder, IconPathOffset);
    StickerPageContentExcel.AddPackedStickerIconPath(builder, PackedStickerIconPathOffset);
    StickerPageContentExcel.AddPackedStickerIconLocalizeEtcId(builder, PackedStickerIconLocalizeEtcId);
    StickerPageContentExcel.AddStickerGetConditionParameterTag(builder, StickerGetConditionParameterTagOffset);
    StickerPageContentExcel.AddStickerGetConditionParameter(builder, StickerGetConditionParameterOffset);
    StickerPageContentExcel.AddGetStickerConditionType(builder, getStickerConditionType);
    StickerPageContentExcel.AddStickerCheckPassType(builder, stickerCheckPassType);
    StickerPageContentExcel.AddStickerGetConditionType(builder, stickerGetConditionType);
    return StickerPageContentExcel.EndStickerPageContentExcel(builder);
  }

  public static void StartStickerPageContentExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddStickerGroupId(FlatBufferBuilder builder, long StickerGroupId) { builder.AddLong(1, StickerGroupId, 0); }
  public static void AddStickerPageId(FlatBufferBuilder builder, long StickerPageId) { builder.AddLong(2, StickerPageId, 0); }
  public static void AddStickerSlot(FlatBufferBuilder builder, long StickerSlot) { builder.AddLong(3, StickerSlot, 0); }
  public static void AddStickerGetConditionType(FlatBufferBuilder builder, FlatDataGlobal.StickerGetConditionType stickerGetConditionType) { builder.AddInt(4, (int)stickerGetConditionType, 0); }
  public static void AddStickerCheckPassType(FlatBufferBuilder builder, FlatDataGlobal.StickerCheckPassType stickerCheckPassType) { builder.AddInt(5, (int)stickerCheckPassType, 0); }
  public static void AddGetStickerConditionType(FlatBufferBuilder builder, FlatDataGlobal.GetStickerConditionType getStickerConditionType) { builder.AddInt(6, (int)getStickerConditionType, 0); }
  public static void AddStickerGetConditionCount(FlatBufferBuilder builder, long StickerGetConditionCount) { builder.AddLong(7, StickerGetConditionCount, 0); }
  public static void AddStickerGetConditionParameter(FlatBufferBuilder builder, VectorOffset StickerGetConditionParameterOffset) { builder.AddOffset(8, StickerGetConditionParameterOffset.Value, 0); }
  public static VectorOffset CreateStickerGetConditionParameterVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStickerGetConditionParameterVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStickerGetConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStickerGetConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStickerGetConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStickerGetConditionParameterTag(FlatBufferBuilder builder, VectorOffset StickerGetConditionParameterTagOffset) { builder.AddOffset(9, StickerGetConditionParameterTagOffset.Value, 0); }
  public static VectorOffset CreateStickerGetConditionParameterTagVector(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStickerGetConditionParameterTagVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStickerGetConditionParameterTagVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStickerGetConditionParameterTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStickerGetConditionParameterTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPackedStickerIconLocalizeEtcId(FlatBufferBuilder builder, uint PackedStickerIconLocalizeEtcId) { builder.AddUint(10, PackedStickerIconLocalizeEtcId, 0); }
  public static void AddPackedStickerIconPath(FlatBufferBuilder builder, StringOffset PackedStickerIconPathOffset) { builder.AddOffset(11, PackedStickerIconPathOffset.Value, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset IconPathOffset) { builder.AddOffset(12, IconPathOffset.Value, 0); }
  public static void AddStickerDetailPath(FlatBufferBuilder builder, StringOffset StickerDetailPathOffset) { builder.AddOffset(13, StickerDetailPathOffset.Value, 0); }
  public static Offset<FlatDataGlobal.StickerPageContentExcel> EndStickerPageContentExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.StickerPageContentExcel>(o);
  }
}


}
