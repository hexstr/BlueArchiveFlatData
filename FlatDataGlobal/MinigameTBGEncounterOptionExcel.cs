// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameTBGEncounterOptionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameTBGEncounterOptionExcel GetRootAsMinigameTBGEncounterOptionExcel(ByteBuffer _bb) { return GetRootAsMinigameTBGEncounterOptionExcel(_bb, new MinigameTBGEncounterOptionExcel()); }
  public static MinigameTBGEncounterOptionExcel GetRootAsMinigameTBGEncounterOptionExcel(ByteBuffer _bb, MinigameTBGEncounterOptionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameTBGEncounterOptionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long OptionGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int SlotIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string OptionTitleLocalize { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionTitleLocalizeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOptionTitleLocalizeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOptionTitleLocalizeArray() { return __p.__vector_as_array<byte>(10); }
  public string OptionSuccessLocalize { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionSuccessLocalizeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOptionSuccessLocalizeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOptionSuccessLocalizeArray() { return __p.__vector_as_array<byte>(12); }
  public long OptionSuccessRewardGroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int OptionSuccessOrHigherDiceCount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OptionGreatSuccessOrHigherDiceCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string OptionFailLocalize { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionFailLocalizeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOptionFailLocalizeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOptionFailLocalizeArray() { return __p.__vector_as_array<byte>(20); }
  public int OptionFailLessDiceCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RunawayOrHigherDiceCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool RewardHide { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.MinigameTBGEncounterOptionExcel> CreateMinigameTBGEncounterOptionExcel(FlatBufferBuilder builder,
      long OptionGroupId = 0,
      long UniqueId = 0,
      int SlotIndex = 0,
      StringOffset OptionTitleLocalizeOffset = default(StringOffset),
      StringOffset OptionSuccessLocalizeOffset = default(StringOffset),
      long OptionSuccessRewardGroupId = 0,
      int OptionSuccessOrHigherDiceCount = 0,
      int OptionGreatSuccessOrHigherDiceCount = 0,
      StringOffset OptionFailLocalizeOffset = default(StringOffset),
      int OptionFailLessDiceCount = 0,
      int RunawayOrHigherDiceCount = 0,
      bool RewardHide = false) {
    builder.StartTable(12);
    MinigameTBGEncounterOptionExcel.AddOptionSuccessRewardGroupId(builder, OptionSuccessRewardGroupId);
    MinigameTBGEncounterOptionExcel.AddUniqueId(builder, UniqueId);
    MinigameTBGEncounterOptionExcel.AddOptionGroupId(builder, OptionGroupId);
    MinigameTBGEncounterOptionExcel.AddRunawayOrHigherDiceCount(builder, RunawayOrHigherDiceCount);
    MinigameTBGEncounterOptionExcel.AddOptionFailLessDiceCount(builder, OptionFailLessDiceCount);
    MinigameTBGEncounterOptionExcel.AddOptionFailLocalize(builder, OptionFailLocalizeOffset);
    MinigameTBGEncounterOptionExcel.AddOptionGreatSuccessOrHigherDiceCount(builder, OptionGreatSuccessOrHigherDiceCount);
    MinigameTBGEncounterOptionExcel.AddOptionSuccessOrHigherDiceCount(builder, OptionSuccessOrHigherDiceCount);
    MinigameTBGEncounterOptionExcel.AddOptionSuccessLocalize(builder, OptionSuccessLocalizeOffset);
    MinigameTBGEncounterOptionExcel.AddOptionTitleLocalize(builder, OptionTitleLocalizeOffset);
    MinigameTBGEncounterOptionExcel.AddSlotIndex(builder, SlotIndex);
    MinigameTBGEncounterOptionExcel.AddRewardHide(builder, RewardHide);
    return MinigameTBGEncounterOptionExcel.EndMinigameTBGEncounterOptionExcel(builder);
  }

  public static void StartMinigameTBGEncounterOptionExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddOptionGroupId(FlatBufferBuilder builder, long OptionGroupId) { builder.AddLong(0, OptionGroupId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(1, UniqueId, 0); }
  public static void AddSlotIndex(FlatBufferBuilder builder, int SlotIndex) { builder.AddInt(2, SlotIndex, 0); }
  public static void AddOptionTitleLocalize(FlatBufferBuilder builder, StringOffset OptionTitleLocalizeOffset) { builder.AddOffset(3, OptionTitleLocalizeOffset.Value, 0); }
  public static void AddOptionSuccessLocalize(FlatBufferBuilder builder, StringOffset OptionSuccessLocalizeOffset) { builder.AddOffset(4, OptionSuccessLocalizeOffset.Value, 0); }
  public static void AddOptionSuccessRewardGroupId(FlatBufferBuilder builder, long OptionSuccessRewardGroupId) { builder.AddLong(5, OptionSuccessRewardGroupId, 0); }
  public static void AddOptionSuccessOrHigherDiceCount(FlatBufferBuilder builder, int OptionSuccessOrHigherDiceCount) { builder.AddInt(6, OptionSuccessOrHigherDiceCount, 0); }
  public static void AddOptionGreatSuccessOrHigherDiceCount(FlatBufferBuilder builder, int OptionGreatSuccessOrHigherDiceCount) { builder.AddInt(7, OptionGreatSuccessOrHigherDiceCount, 0); }
  public static void AddOptionFailLocalize(FlatBufferBuilder builder, StringOffset OptionFailLocalizeOffset) { builder.AddOffset(8, OptionFailLocalizeOffset.Value, 0); }
  public static void AddOptionFailLessDiceCount(FlatBufferBuilder builder, int OptionFailLessDiceCount) { builder.AddInt(9, OptionFailLessDiceCount, 0); }
  public static void AddRunawayOrHigherDiceCount(FlatBufferBuilder builder, int RunawayOrHigherDiceCount) { builder.AddInt(10, RunawayOrHigherDiceCount, 0); }
  public static void AddRewardHide(FlatBufferBuilder builder, bool RewardHide) { builder.AddBool(11, RewardHide, false); }
  public static Offset<FlatDataGlobal.MinigameTBGEncounterOptionExcel> EndMinigameTBGEncounterOptionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MinigameTBGEncounterOptionExcel>(o);
  }
}


}
