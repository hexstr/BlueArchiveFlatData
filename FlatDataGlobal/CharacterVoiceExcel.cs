// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CharacterVoiceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CharacterVoiceExcel GetRootAsCharacterVoiceExcel(ByteBuffer _bb) { return GetRootAsCharacterVoiceExcel(_bb, new CharacterVoiceExcel()); }
  public static CharacterVoiceExcel GetRootAsCharacterVoiceExcel(ByteBuffer _bb, CharacterVoiceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterVoiceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CharacterVoiceUniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterVoiceGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint VoiceHash { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool OnlyOne { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Priority { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long DisplayOrder { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool CollectionVisible { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FlatDataGlobal.CVCollectionType CVCollectionType { get { int o = __p.__offset(18); return o != 0 ? (FlatDataGlobal.CVCollectionType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.CVCollectionType.CVNormal; } }
  public long UnlockFavorRank { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string LocalizeCVGroup { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeCVGroupBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetLocalizeCVGroupBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetLocalizeCVGroupArray() { return __p.__vector_as_array<byte>(22); }
  public FlatDataGlobal.Nation Nation(int j) { int o = __p.__offset(24); return o != 0 ? (FlatDataGlobal.Nation)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.Nation)0; }
  public int NationLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.Nation> GetNationBytes() { return __p.__vector_as_span<FlatDataGlobal.Nation>(24, 4); }
#else
  public ArraySegment<byte>? GetNationBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public FlatDataGlobal.Nation[] GetNationArray() { int o = __p.__offset(24); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.Nation[] a = new FlatDataGlobal.Nation[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.Nation)__p.bb.GetInt(p + i * 4); } return a; }
  public float Volume(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int VolumeLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetVolumeBytes() { return __p.__vector_as_span<float>(26, 4); }
#else
  public ArraySegment<byte>? GetVolumeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public float[] GetVolumeArray() { return __p.__vector_as_array<float>(26); }
  public float Delay(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int DelayLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetDelayBytes() { return __p.__vector_as_span<float>(28, 4); }
#else
  public ArraySegment<byte>? GetDelayBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public float[] GetDelayArray() { return __p.__vector_as_array<float>(28); }
  public string Path(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PathLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatDataGlobal.CharacterVoiceExcel> CreateCharacterVoiceExcel(FlatBufferBuilder builder,
      long CharacterVoiceUniqueId = 0,
      long CharacterVoiceGroupId = 0,
      uint VoiceHash = 0,
      bool OnlyOne = false,
      int Priority = 0,
      long DisplayOrder = 0,
      bool CollectionVisible = false,
      FlatDataGlobal.CVCollectionType cVCollectionType = FlatDataGlobal.CVCollectionType.CVNormal,
      long UnlockFavorRank = 0,
      StringOffset LocalizeCVGroupOffset = default(StringOffset),
      VectorOffset NationOffset = default(VectorOffset),
      VectorOffset VolumeOffset = default(VectorOffset),
      VectorOffset DelayOffset = default(VectorOffset),
      VectorOffset PathOffset = default(VectorOffset)) {
    builder.StartTable(14);
    CharacterVoiceExcel.AddUnlockFavorRank(builder, UnlockFavorRank);
    CharacterVoiceExcel.AddDisplayOrder(builder, DisplayOrder);
    CharacterVoiceExcel.AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId);
    CharacterVoiceExcel.AddCharacterVoiceUniqueId(builder, CharacterVoiceUniqueId);
    CharacterVoiceExcel.AddPath(builder, PathOffset);
    CharacterVoiceExcel.AddDelay(builder, DelayOffset);
    CharacterVoiceExcel.AddVolume(builder, VolumeOffset);
    CharacterVoiceExcel.AddNation(builder, NationOffset);
    CharacterVoiceExcel.AddLocalizeCVGroup(builder, LocalizeCVGroupOffset);
    CharacterVoiceExcel.AddCVCollectionType(builder, cVCollectionType);
    CharacterVoiceExcel.AddPriority(builder, Priority);
    CharacterVoiceExcel.AddVoiceHash(builder, VoiceHash);
    CharacterVoiceExcel.AddCollectionVisible(builder, CollectionVisible);
    CharacterVoiceExcel.AddOnlyOne(builder, OnlyOne);
    return CharacterVoiceExcel.EndCharacterVoiceExcel(builder);
  }

  public static void StartCharacterVoiceExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddCharacterVoiceUniqueId(FlatBufferBuilder builder, long CharacterVoiceUniqueId) { builder.AddLong(0, CharacterVoiceUniqueId, 0); }
  public static void AddCharacterVoiceGroupId(FlatBufferBuilder builder, long CharacterVoiceGroupId) { builder.AddLong(1, CharacterVoiceGroupId, 0); }
  public static void AddVoiceHash(FlatBufferBuilder builder, uint VoiceHash) { builder.AddUint(2, VoiceHash, 0); }
  public static void AddOnlyOne(FlatBufferBuilder builder, bool OnlyOne) { builder.AddBool(3, OnlyOne, false); }
  public static void AddPriority(FlatBufferBuilder builder, int Priority) { builder.AddInt(4, Priority, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long DisplayOrder) { builder.AddLong(5, DisplayOrder, 0); }
  public static void AddCollectionVisible(FlatBufferBuilder builder, bool CollectionVisible) { builder.AddBool(6, CollectionVisible, false); }
  public static void AddCVCollectionType(FlatBufferBuilder builder, FlatDataGlobal.CVCollectionType cVCollectionType) { builder.AddInt(7, (int)cVCollectionType, 0); }
  public static void AddUnlockFavorRank(FlatBufferBuilder builder, long UnlockFavorRank) { builder.AddLong(8, UnlockFavorRank, 0); }
  public static void AddLocalizeCVGroup(FlatBufferBuilder builder, StringOffset LocalizeCVGroupOffset) { builder.AddOffset(9, LocalizeCVGroupOffset.Value, 0); }
  public static void AddNation(FlatBufferBuilder builder, VectorOffset NationOffset) { builder.AddOffset(10, NationOffset.Value, 0); }
  public static VectorOffset CreateNationVector(FlatBufferBuilder builder, FlatDataGlobal.Nation[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.Nation[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.Nation> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.Nation>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVolume(FlatBufferBuilder builder, VectorOffset VolumeOffset) { builder.AddOffset(11, VolumeOffset.Value, 0); }
  public static VectorOffset CreateVolumeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVolumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDelay(FlatBufferBuilder builder, VectorOffset DelayOffset) { builder.AddOffset(12, DelayOffset.Value, 0); }
  public static VectorOffset CreateDelayVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDelayVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDelayVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDelayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDelayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPath(FlatBufferBuilder builder, VectorOffset PathOffset) { builder.AddOffset(13, PathOffset.Value, 0); }
  public static VectorOffset CreatePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatDataGlobal.CharacterVoiceExcel> EndCharacterVoiceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.CharacterVoiceExcel>(o);
  }
}


}
