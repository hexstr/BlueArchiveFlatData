// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PropMotion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static PropMotion GetRootAsPropMotion(ByteBuffer _bb) { return GetRootAsPropMotion(_bb, new PropMotion()); }
  public static PropMotion GetRootAsPropMotion(ByteBuffer _bb, PropMotion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PropMotion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public FlatDataGlobal.PropVector3? Positions(int j) { int o = __p.__offset(6); return o != 0 ? (FlatDataGlobal.PropVector3?)(new FlatDataGlobal.PropVector3()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PositionsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatDataGlobal.PropVector3? Rotations(int j) { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.PropVector3?)(new FlatDataGlobal.PropVector3()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotationsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatDataGlobal.PropMotion> CreatePropMotion(FlatBufferBuilder builder,
      StringOffset NameOffset = default(StringOffset),
      VectorOffset PositionsOffset = default(VectorOffset),
      VectorOffset RotationsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    PropMotion.AddRotations(builder, RotationsOffset);
    PropMotion.AddPositions(builder, PositionsOffset);
    PropMotion.AddName(builder, NameOffset);
    return PropMotion.EndPropMotion(builder);
  }

  public static void StartPropMotion(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(0, NameOffset.Value, 0); }
  public static void AddPositions(FlatBufferBuilder builder, VectorOffset PositionsOffset) { builder.AddOffset(1, PositionsOffset.Value, 0); }
  public static VectorOffset CreatePositionsVector(FlatBufferBuilder builder, Offset<FlatDataGlobal.PropVector3>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePositionsVectorBlock(FlatBufferBuilder builder, Offset<FlatDataGlobal.PropVector3>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePositionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatDataGlobal.PropVector3>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePositionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatDataGlobal.PropVector3>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPositionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotations(FlatBufferBuilder builder, VectorOffset RotationsOffset) { builder.AddOffset(2, RotationsOffset.Value, 0); }
  public static VectorOffset CreateRotationsVector(FlatBufferBuilder builder, Offset<FlatDataGlobal.PropVector3>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotationsVectorBlock(FlatBufferBuilder builder, Offset<FlatDataGlobal.PropVector3>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRotationsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatDataGlobal.PropVector3>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRotationsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatDataGlobal.PropVector3>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRotationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatDataGlobal.PropMotion> EndPropMotion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.PropMotion>(o);
  }
}


}
