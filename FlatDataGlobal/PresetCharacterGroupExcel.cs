// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PresetCharacterGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static PresetCharacterGroupExcel GetRootAsPresetCharacterGroupExcel(ByteBuffer _bb) { return GetRootAsPresetCharacterGroupExcel(_bb, new PresetCharacterGroupExcel()); }
  public static PresetCharacterGroupExcel GetRootAsPresetCharacterGroupExcel(ByteBuffer _bb, PresetCharacterGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PresetCharacterGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PresetCharacterGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string GetPresetType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGetPresetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGetPresetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGetPresetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Exp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FavorExp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FavorRank { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StarGrade { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExSkillLevel { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PassiveSkillLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExtraPassiveSkillLevel { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CommonSkillLevel { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LeaderSkillLevel { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipSlot01 { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipSlotTier01 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipSlotLevel01 { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipSlot02 { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipSlotTier02 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipSlotLevel02 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipSlot03 { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipSlotTier03 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipSlotLevel03 { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipCharacterWeapon { get { int o = __p.__offset(46); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipCharacterWeaponTier { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipCharacterWeaponLevel { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EquipCharacterGear { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EquipCharacterGearTier { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EquipCharacterGearLevel { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.StatType PotentialType01 { get { int o = __p.__offset(58); return o != 0 ? (FlatDataGlobal.StatType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StatType.None; } }
  public int PotentialLevel01 { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.StatType PotentialType02 { get { int o = __p.__offset(62); return o != 0 ? (FlatDataGlobal.StatType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StatType.None; } }
  public int PotentialLevel02 { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.StatType PotentialType03 { get { int o = __p.__offset(66); return o != 0 ? (FlatDataGlobal.StatType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.StatType.None; } }
  public int PotentialLevel03 { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatDataGlobal.PresetCharacterGroupExcel> CreatePresetCharacterGroupExcel(FlatBufferBuilder builder,
      long PresetCharacterGroupId = 0,
      StringOffset GetPresetTypeOffset = default(StringOffset),
      int Level = 0,
      int Exp = 0,
      int FavorExp = 0,
      int FavorRank = 0,
      int StarGrade = 0,
      int ExSkillLevel = 0,
      int PassiveSkillLevel = 0,
      int ExtraPassiveSkillLevel = 0,
      int CommonSkillLevel = 0,
      int LeaderSkillLevel = 0,
      bool EquipSlot01 = false,
      int EquipSlotTier01 = 0,
      int EquipSlotLevel01 = 0,
      bool EquipSlot02 = false,
      int EquipSlotTier02 = 0,
      int EquipSlotLevel02 = 0,
      bool EquipSlot03 = false,
      int EquipSlotTier03 = 0,
      int EquipSlotLevel03 = 0,
      bool EquipCharacterWeapon = false,
      int EquipCharacterWeaponTier = 0,
      int EquipCharacterWeaponLevel = 0,
      bool EquipCharacterGear = false,
      int EquipCharacterGearTier = 0,
      int EquipCharacterGearLevel = 0,
      FlatDataGlobal.StatType PotentialType01 = FlatDataGlobal.StatType.None,
      int PotentialLevel01 = 0,
      FlatDataGlobal.StatType PotentialType02 = FlatDataGlobal.StatType.None,
      int PotentialLevel02 = 0,
      FlatDataGlobal.StatType PotentialType03 = FlatDataGlobal.StatType.None,
      int PotentialLevel03 = 0) {
    builder.StartTable(33);
    PresetCharacterGroupExcel.AddPresetCharacterGroupId(builder, PresetCharacterGroupId);
    PresetCharacterGroupExcel.AddPotentialLevel03(builder, PotentialLevel03);
    PresetCharacterGroupExcel.AddPotentialType03(builder, PotentialType03);
    PresetCharacterGroupExcel.AddPotentialLevel02(builder, PotentialLevel02);
    PresetCharacterGroupExcel.AddPotentialType02(builder, PotentialType02);
    PresetCharacterGroupExcel.AddPotentialLevel01(builder, PotentialLevel01);
    PresetCharacterGroupExcel.AddPotentialType01(builder, PotentialType01);
    PresetCharacterGroupExcel.AddEquipCharacterGearLevel(builder, EquipCharacterGearLevel);
    PresetCharacterGroupExcel.AddEquipCharacterGearTier(builder, EquipCharacterGearTier);
    PresetCharacterGroupExcel.AddEquipCharacterWeaponLevel(builder, EquipCharacterWeaponLevel);
    PresetCharacterGroupExcel.AddEquipCharacterWeaponTier(builder, EquipCharacterWeaponTier);
    PresetCharacterGroupExcel.AddEquipSlotLevel03(builder, EquipSlotLevel03);
    PresetCharacterGroupExcel.AddEquipSlotTier03(builder, EquipSlotTier03);
    PresetCharacterGroupExcel.AddEquipSlotLevel02(builder, EquipSlotLevel02);
    PresetCharacterGroupExcel.AddEquipSlotTier02(builder, EquipSlotTier02);
    PresetCharacterGroupExcel.AddEquipSlotLevel01(builder, EquipSlotLevel01);
    PresetCharacterGroupExcel.AddEquipSlotTier01(builder, EquipSlotTier01);
    PresetCharacterGroupExcel.AddLeaderSkillLevel(builder, LeaderSkillLevel);
    PresetCharacterGroupExcel.AddCommonSkillLevel(builder, CommonSkillLevel);
    PresetCharacterGroupExcel.AddExtraPassiveSkillLevel(builder, ExtraPassiveSkillLevel);
    PresetCharacterGroupExcel.AddPassiveSkillLevel(builder, PassiveSkillLevel);
    PresetCharacterGroupExcel.AddExSkillLevel(builder, ExSkillLevel);
    PresetCharacterGroupExcel.AddStarGrade(builder, StarGrade);
    PresetCharacterGroupExcel.AddFavorRank(builder, FavorRank);
    PresetCharacterGroupExcel.AddFavorExp(builder, FavorExp);
    PresetCharacterGroupExcel.AddExp(builder, Exp);
    PresetCharacterGroupExcel.AddLevel(builder, Level);
    PresetCharacterGroupExcel.AddGetPresetType(builder, GetPresetTypeOffset);
    PresetCharacterGroupExcel.AddEquipCharacterGear(builder, EquipCharacterGear);
    PresetCharacterGroupExcel.AddEquipCharacterWeapon(builder, EquipCharacterWeapon);
    PresetCharacterGroupExcel.AddEquipSlot03(builder, EquipSlot03);
    PresetCharacterGroupExcel.AddEquipSlot02(builder, EquipSlot02);
    PresetCharacterGroupExcel.AddEquipSlot01(builder, EquipSlot01);
    return PresetCharacterGroupExcel.EndPresetCharacterGroupExcel(builder);
  }

  public static void StartPresetCharacterGroupExcel(FlatBufferBuilder builder) { builder.StartTable(33); }
  public static void AddPresetCharacterGroupId(FlatBufferBuilder builder, long PresetCharacterGroupId) { builder.AddLong(0, PresetCharacterGroupId, 0); }
  public static void AddGetPresetType(FlatBufferBuilder builder, StringOffset GetPresetTypeOffset) { builder.AddOffset(1, GetPresetTypeOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(2, Level, 0); }
  public static void AddExp(FlatBufferBuilder builder, int Exp) { builder.AddInt(3, Exp, 0); }
  public static void AddFavorExp(FlatBufferBuilder builder, int FavorExp) { builder.AddInt(4, FavorExp, 0); }
  public static void AddFavorRank(FlatBufferBuilder builder, int FavorRank) { builder.AddInt(5, FavorRank, 0); }
  public static void AddStarGrade(FlatBufferBuilder builder, int StarGrade) { builder.AddInt(6, StarGrade, 0); }
  public static void AddExSkillLevel(FlatBufferBuilder builder, int ExSkillLevel) { builder.AddInt(7, ExSkillLevel, 0); }
  public static void AddPassiveSkillLevel(FlatBufferBuilder builder, int PassiveSkillLevel) { builder.AddInt(8, PassiveSkillLevel, 0); }
  public static void AddExtraPassiveSkillLevel(FlatBufferBuilder builder, int ExtraPassiveSkillLevel) { builder.AddInt(9, ExtraPassiveSkillLevel, 0); }
  public static void AddCommonSkillLevel(FlatBufferBuilder builder, int CommonSkillLevel) { builder.AddInt(10, CommonSkillLevel, 0); }
  public static void AddLeaderSkillLevel(FlatBufferBuilder builder, int LeaderSkillLevel) { builder.AddInt(11, LeaderSkillLevel, 0); }
  public static void AddEquipSlot01(FlatBufferBuilder builder, bool EquipSlot01) { builder.AddBool(12, EquipSlot01, false); }
  public static void AddEquipSlotTier01(FlatBufferBuilder builder, int EquipSlotTier01) { builder.AddInt(13, EquipSlotTier01, 0); }
  public static void AddEquipSlotLevel01(FlatBufferBuilder builder, int EquipSlotLevel01) { builder.AddInt(14, EquipSlotLevel01, 0); }
  public static void AddEquipSlot02(FlatBufferBuilder builder, bool EquipSlot02) { builder.AddBool(15, EquipSlot02, false); }
  public static void AddEquipSlotTier02(FlatBufferBuilder builder, int EquipSlotTier02) { builder.AddInt(16, EquipSlotTier02, 0); }
  public static void AddEquipSlotLevel02(FlatBufferBuilder builder, int EquipSlotLevel02) { builder.AddInt(17, EquipSlotLevel02, 0); }
  public static void AddEquipSlot03(FlatBufferBuilder builder, bool EquipSlot03) { builder.AddBool(18, EquipSlot03, false); }
  public static void AddEquipSlotTier03(FlatBufferBuilder builder, int EquipSlotTier03) { builder.AddInt(19, EquipSlotTier03, 0); }
  public static void AddEquipSlotLevel03(FlatBufferBuilder builder, int EquipSlotLevel03) { builder.AddInt(20, EquipSlotLevel03, 0); }
  public static void AddEquipCharacterWeapon(FlatBufferBuilder builder, bool EquipCharacterWeapon) { builder.AddBool(21, EquipCharacterWeapon, false); }
  public static void AddEquipCharacterWeaponTier(FlatBufferBuilder builder, int EquipCharacterWeaponTier) { builder.AddInt(22, EquipCharacterWeaponTier, 0); }
  public static void AddEquipCharacterWeaponLevel(FlatBufferBuilder builder, int EquipCharacterWeaponLevel) { builder.AddInt(23, EquipCharacterWeaponLevel, 0); }
  public static void AddEquipCharacterGear(FlatBufferBuilder builder, bool EquipCharacterGear) { builder.AddBool(24, EquipCharacterGear, false); }
  public static void AddEquipCharacterGearTier(FlatBufferBuilder builder, int EquipCharacterGearTier) { builder.AddInt(25, EquipCharacterGearTier, 0); }
  public static void AddEquipCharacterGearLevel(FlatBufferBuilder builder, int EquipCharacterGearLevel) { builder.AddInt(26, EquipCharacterGearLevel, 0); }
  public static void AddPotentialType01(FlatBufferBuilder builder, FlatDataGlobal.StatType PotentialType01) { builder.AddInt(27, (int)PotentialType01, 0); }
  public static void AddPotentialLevel01(FlatBufferBuilder builder, int PotentialLevel01) { builder.AddInt(28, PotentialLevel01, 0); }
  public static void AddPotentialType02(FlatBufferBuilder builder, FlatDataGlobal.StatType PotentialType02) { builder.AddInt(29, (int)PotentialType02, 0); }
  public static void AddPotentialLevel02(FlatBufferBuilder builder, int PotentialLevel02) { builder.AddInt(30, PotentialLevel02, 0); }
  public static void AddPotentialType03(FlatBufferBuilder builder, FlatDataGlobal.StatType PotentialType03) { builder.AddInt(31, (int)PotentialType03, 0); }
  public static void AddPotentialLevel03(FlatBufferBuilder builder, int PotentialLevel03) { builder.AddInt(32, PotentialLevel03, 0); }
  public static Offset<FlatDataGlobal.PresetCharacterGroupExcel> EndPresetCharacterGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.PresetCharacterGroupExcel>(o);
  }
}


}
