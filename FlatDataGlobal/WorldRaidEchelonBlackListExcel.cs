// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WorldRaidEchelonBlackListExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static WorldRaidEchelonBlackListExcel GetRootAsWorldRaidEchelonBlackListExcel(ByteBuffer _bb) { return GetRootAsWorldRaidEchelonBlackListExcel(_bb, new WorldRaidEchelonBlackListExcel()); }
  public static WorldRaidEchelonBlackListExcel GetRootAsWorldRaidEchelonBlackListExcel(ByteBuffer _bb, WorldRaidEchelonBlackListExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorldRaidEchelonBlackListExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BlackListCharacterId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BlackListCharacterIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBlackListCharacterIdBytes() { return __p.__vector_as_span<long>(6, 8); }
#else
  public ArraySegment<byte>? GetBlackListCharacterIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public long[] GetBlackListCharacterIdArray() { return __p.__vector_as_array<long>(6); }
  public long BlackListPersonalityId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BlackListPersonalityIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBlackListPersonalityIdBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetBlackListPersonalityIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetBlackListPersonalityIdArray() { return __p.__vector_as_array<long>(8); }
  public FlatDataGlobal.WeaponType BlackListWeaponType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.WeaponType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.WeaponType.None; } }
  public FlatDataGlobal.School BlacklistSchool { get { int o = __p.__offset(12); return o != 0 ? (FlatDataGlobal.School)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.School.None; } }
  public FlatDataGlobal.Club BlacklistClub { get { int o = __p.__offset(14); return o != 0 ? (FlatDataGlobal.Club)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.Club.None; } }
  public FlatDataGlobal.TacticRole BlacklistRole { get { int o = __p.__offset(16); return o != 0 ? (FlatDataGlobal.TacticRole)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.TacticRole.None; } }

  public static Offset<FlatDataGlobal.WorldRaidEchelonBlackListExcel> CreateWorldRaidEchelonBlackListExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      VectorOffset BlackListCharacterIdOffset = default(VectorOffset),
      VectorOffset BlackListPersonalityIdOffset = default(VectorOffset),
      FlatDataGlobal.WeaponType BlackListWeaponType = FlatDataGlobal.WeaponType.None,
      FlatDataGlobal.School BlacklistSchool = FlatDataGlobal.School.None,
      FlatDataGlobal.Club BlacklistClub = FlatDataGlobal.Club.None,
      FlatDataGlobal.TacticRole BlacklistRole = FlatDataGlobal.TacticRole.None) {
    builder.StartTable(7);
    WorldRaidEchelonBlackListExcel.AddGroupId(builder, GroupId);
    WorldRaidEchelonBlackListExcel.AddBlacklistRole(builder, BlacklistRole);
    WorldRaidEchelonBlackListExcel.AddBlacklistClub(builder, BlacklistClub);
    WorldRaidEchelonBlackListExcel.AddBlacklistSchool(builder, BlacklistSchool);
    WorldRaidEchelonBlackListExcel.AddBlackListWeaponType(builder, BlackListWeaponType);
    WorldRaidEchelonBlackListExcel.AddBlackListPersonalityId(builder, BlackListPersonalityIdOffset);
    WorldRaidEchelonBlackListExcel.AddBlackListCharacterId(builder, BlackListCharacterIdOffset);
    return WorldRaidEchelonBlackListExcel.EndWorldRaidEchelonBlackListExcel(builder);
  }

  public static void StartWorldRaidEchelonBlackListExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(0, GroupId, 0); }
  public static void AddBlackListCharacterId(FlatBufferBuilder builder, VectorOffset BlackListCharacterIdOffset) { builder.AddOffset(1, BlackListCharacterIdOffset.Value, 0); }
  public static VectorOffset CreateBlackListCharacterIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBlackListCharacterIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlackListCharacterIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlackListCharacterIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBlackListCharacterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBlackListPersonalityId(FlatBufferBuilder builder, VectorOffset BlackListPersonalityIdOffset) { builder.AddOffset(2, BlackListPersonalityIdOffset.Value, 0); }
  public static VectorOffset CreateBlackListPersonalityIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBlackListPersonalityIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlackListPersonalityIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlackListPersonalityIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBlackListPersonalityIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBlackListWeaponType(FlatBufferBuilder builder, FlatDataGlobal.WeaponType BlackListWeaponType) { builder.AddInt(3, (int)BlackListWeaponType, 0); }
  public static void AddBlacklistSchool(FlatBufferBuilder builder, FlatDataGlobal.School BlacklistSchool) { builder.AddInt(4, (int)BlacklistSchool, 0); }
  public static void AddBlacklistClub(FlatBufferBuilder builder, FlatDataGlobal.Club BlacklistClub) { builder.AddInt(5, (int)BlacklistClub, 0); }
  public static void AddBlacklistRole(FlatBufferBuilder builder, FlatDataGlobal.TacticRole BlacklistRole) { builder.AddInt(6, (int)BlacklistRole, 0); }
  public static Offset<FlatDataGlobal.WorldRaidEchelonBlackListExcel> EndWorldRaidEchelonBlackListExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.WorldRaidEchelonBlackListExcel>(o);
  }
}


}
