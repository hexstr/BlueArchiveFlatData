// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConstArenaExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ConstArenaExcel GetRootAsConstArenaExcel(ByteBuffer _bb) { return GetRootAsConstArenaExcel(_bb, new ConstArenaExcel()); }
  public static ConstArenaExcel GetRootAsConstArenaExcel(ByteBuffer _bb, ConstArenaExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstArenaExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long AttackCoolTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BattleDuration { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenseCoolTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TSSStartCoolTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EndAlarm { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TimeRewardMaxAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.ParcelType EnterCostType { get { int o = __p.__offset(16); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long EnterCostId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TicketCost { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DailyRewardResetTime { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDailyRewardResetTimeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDailyRewardResetTimeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDailyRewardResetTimeArray() { return __p.__vector_as_array<byte>(22); }
  public string OpenScenarioId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpenScenarioIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOpenScenarioIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOpenScenarioIdArray() { return __p.__vector_as_array<byte>(24); }
  public long CharacterSlotHideRank(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int CharacterSlotHideRankLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetCharacterSlotHideRankBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetCharacterSlotHideRankBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetCharacterSlotHideRankArray() { return __p.__vector_as_array<long>(26); }
  public long MapSlotHideRank { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RelativeOpponentRankStart(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RelativeOpponentRankStartLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRelativeOpponentRankStartBytes() { return __p.__vector_as_span<long>(30, 8); }
#else
  public ArraySegment<byte>? GetRelativeOpponentRankStartBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public long[] GetRelativeOpponentRankStartArray() { return __p.__vector_as_array<long>(30); }
  public long RelativeOpponentRankEnd(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RelativeOpponentRankEndLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRelativeOpponentRankEndBytes() { return __p.__vector_as_span<long>(32, 8); }
#else
  public ArraySegment<byte>? GetRelativeOpponentRankEndBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public long[] GetRelativeOpponentRankEndArray() { return __p.__vector_as_array<long>(32); }
  public FlatDataGlobal.StatType ModifiedStatType(int j) { int o = __p.__offset(34); return o != 0 ? (FlatDataGlobal.StatType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataGlobal.StatType)0; }
  public int ModifiedStatTypeLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataGlobal.StatType> GetModifiedStatTypeBytes() { return __p.__vector_as_span<FlatDataGlobal.StatType>(34, 4); }
#else
  public ArraySegment<byte>? GetModifiedStatTypeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public FlatDataGlobal.StatType[] GetModifiedStatTypeArray() { int o = __p.__offset(34); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataGlobal.StatType[] a = new FlatDataGlobal.StatType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataGlobal.StatType)__p.bb.GetInt(p + i * 4); } return a; }
  public long StatMulFactor(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StatMulFactorLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStatMulFactorBytes() { return __p.__vector_as_span<long>(36, 8); }
#else
  public ArraySegment<byte>? GetStatMulFactorBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public long[] GetStatMulFactorArray() { return __p.__vector_as_array<long>(36); }
  public long StatSumFactor(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StatSumFactorLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStatSumFactorBytes() { return __p.__vector_as_span<long>(38, 8); }
#else
  public ArraySegment<byte>? GetStatSumFactorBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public long[] GetStatSumFactorArray() { return __p.__vector_as_array<long>(38); }
  public string NPCName(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NPCNameLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long NPCMainCharacterCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NPCSupportCharacterCount { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NPCCharacterSkillLevel { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TimeSpanInDaysForBattleHistory { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string HiddenCharacterImagePath { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHiddenCharacterImagePathBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetHiddenCharacterImagePathBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetHiddenCharacterImagePathArray() { return __p.__vector_as_array<byte>(50); }
  public long DefenseVictoryRewardMaxCount { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TopRankerCountLimit { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AutoRefreshIntervalMilliSeconds { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonSettingIntervalMilliSeconds { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SkipAllowedTimeMilliSeconds { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShowSeasonChangeInfoStartTime { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowSeasonChangeInfoStartTimeBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetShowSeasonChangeInfoStartTimeBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetShowSeasonChangeInfoStartTimeArray() { return __p.__vector_as_array<byte>(62); }
  public string ShowSeasonChangeInfoEndTime { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowSeasonChangeInfoEndTimeBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetShowSeasonChangeInfoEndTimeBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetShowSeasonChangeInfoEndTimeArray() { return __p.__vector_as_array<byte>(64); }
  public long ShowSeasonId { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ArenaHistoryQueryLimitDays { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatDataGlobal.ConstArenaExcel> CreateConstArenaExcel(FlatBufferBuilder builder,
      long AttackCoolTime = 0,
      long BattleDuration = 0,
      long DefenseCoolTime = 0,
      long TSSStartCoolTime = 0,
      long EndAlarm = 0,
      long TimeRewardMaxAmount = 0,
      FlatDataGlobal.ParcelType EnterCostType = FlatDataGlobal.ParcelType.None,
      long EnterCostId = 0,
      long TicketCost = 0,
      StringOffset DailyRewardResetTimeOffset = default(StringOffset),
      StringOffset OpenScenarioIdOffset = default(StringOffset),
      VectorOffset CharacterSlotHideRankOffset = default(VectorOffset),
      long MapSlotHideRank = 0,
      VectorOffset RelativeOpponentRankStartOffset = default(VectorOffset),
      VectorOffset RelativeOpponentRankEndOffset = default(VectorOffset),
      VectorOffset ModifiedStatTypeOffset = default(VectorOffset),
      VectorOffset StatMulFactorOffset = default(VectorOffset),
      VectorOffset StatSumFactorOffset = default(VectorOffset),
      VectorOffset NPCNameOffset = default(VectorOffset),
      long NPCMainCharacterCount = 0,
      long NPCSupportCharacterCount = 0,
      long NPCCharacterSkillLevel = 0,
      long TimeSpanInDaysForBattleHistory = 0,
      StringOffset HiddenCharacterImagePathOffset = default(StringOffset),
      long DefenseVictoryRewardMaxCount = 0,
      long TopRankerCountLimit = 0,
      long AutoRefreshIntervalMilliSeconds = 0,
      long EchelonSettingIntervalMilliSeconds = 0,
      long SkipAllowedTimeMilliSeconds = 0,
      StringOffset ShowSeasonChangeInfoStartTimeOffset = default(StringOffset),
      StringOffset ShowSeasonChangeInfoEndTimeOffset = default(StringOffset),
      long ShowSeasonId = 0,
      int ArenaHistoryQueryLimitDays = 0) {
    builder.StartTable(33);
    ConstArenaExcel.AddShowSeasonId(builder, ShowSeasonId);
    ConstArenaExcel.AddSkipAllowedTimeMilliSeconds(builder, SkipAllowedTimeMilliSeconds);
    ConstArenaExcel.AddEchelonSettingIntervalMilliSeconds(builder, EchelonSettingIntervalMilliSeconds);
    ConstArenaExcel.AddAutoRefreshIntervalMilliSeconds(builder, AutoRefreshIntervalMilliSeconds);
    ConstArenaExcel.AddTopRankerCountLimit(builder, TopRankerCountLimit);
    ConstArenaExcel.AddDefenseVictoryRewardMaxCount(builder, DefenseVictoryRewardMaxCount);
    ConstArenaExcel.AddTimeSpanInDaysForBattleHistory(builder, TimeSpanInDaysForBattleHistory);
    ConstArenaExcel.AddNPCCharacterSkillLevel(builder, NPCCharacterSkillLevel);
    ConstArenaExcel.AddNPCSupportCharacterCount(builder, NPCSupportCharacterCount);
    ConstArenaExcel.AddNPCMainCharacterCount(builder, NPCMainCharacterCount);
    ConstArenaExcel.AddMapSlotHideRank(builder, MapSlotHideRank);
    ConstArenaExcel.AddTicketCost(builder, TicketCost);
    ConstArenaExcel.AddEnterCostId(builder, EnterCostId);
    ConstArenaExcel.AddTimeRewardMaxAmount(builder, TimeRewardMaxAmount);
    ConstArenaExcel.AddEndAlarm(builder, EndAlarm);
    ConstArenaExcel.AddTSSStartCoolTime(builder, TSSStartCoolTime);
    ConstArenaExcel.AddDefenseCoolTime(builder, DefenseCoolTime);
    ConstArenaExcel.AddBattleDuration(builder, BattleDuration);
    ConstArenaExcel.AddAttackCoolTime(builder, AttackCoolTime);
    ConstArenaExcel.AddArenaHistoryQueryLimitDays(builder, ArenaHistoryQueryLimitDays);
    ConstArenaExcel.AddShowSeasonChangeInfoEndTime(builder, ShowSeasonChangeInfoEndTimeOffset);
    ConstArenaExcel.AddShowSeasonChangeInfoStartTime(builder, ShowSeasonChangeInfoStartTimeOffset);
    ConstArenaExcel.AddHiddenCharacterImagePath(builder, HiddenCharacterImagePathOffset);
    ConstArenaExcel.AddNPCName(builder, NPCNameOffset);
    ConstArenaExcel.AddStatSumFactor(builder, StatSumFactorOffset);
    ConstArenaExcel.AddStatMulFactor(builder, StatMulFactorOffset);
    ConstArenaExcel.AddModifiedStatType(builder, ModifiedStatTypeOffset);
    ConstArenaExcel.AddRelativeOpponentRankEnd(builder, RelativeOpponentRankEndOffset);
    ConstArenaExcel.AddRelativeOpponentRankStart(builder, RelativeOpponentRankStartOffset);
    ConstArenaExcel.AddCharacterSlotHideRank(builder, CharacterSlotHideRankOffset);
    ConstArenaExcel.AddOpenScenarioId(builder, OpenScenarioIdOffset);
    ConstArenaExcel.AddDailyRewardResetTime(builder, DailyRewardResetTimeOffset);
    ConstArenaExcel.AddEnterCostType(builder, EnterCostType);
    return ConstArenaExcel.EndConstArenaExcel(builder);
  }

  public static void StartConstArenaExcel(FlatBufferBuilder builder) { builder.StartTable(33); }
  public static void AddAttackCoolTime(FlatBufferBuilder builder, long AttackCoolTime) { builder.AddLong(0, AttackCoolTime, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long BattleDuration) { builder.AddLong(1, BattleDuration, 0); }
  public static void AddDefenseCoolTime(FlatBufferBuilder builder, long DefenseCoolTime) { builder.AddLong(2, DefenseCoolTime, 0); }
  public static void AddTSSStartCoolTime(FlatBufferBuilder builder, long TSSStartCoolTime) { builder.AddLong(3, TSSStartCoolTime, 0); }
  public static void AddEndAlarm(FlatBufferBuilder builder, long EndAlarm) { builder.AddLong(4, EndAlarm, 0); }
  public static void AddTimeRewardMaxAmount(FlatBufferBuilder builder, long TimeRewardMaxAmount) { builder.AddLong(5, TimeRewardMaxAmount, 0); }
  public static void AddEnterCostType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType EnterCostType) { builder.AddInt(6, (int)EnterCostType, 0); }
  public static void AddEnterCostId(FlatBufferBuilder builder, long EnterCostId) { builder.AddLong(7, EnterCostId, 0); }
  public static void AddTicketCost(FlatBufferBuilder builder, long TicketCost) { builder.AddLong(8, TicketCost, 0); }
  public static void AddDailyRewardResetTime(FlatBufferBuilder builder, StringOffset DailyRewardResetTimeOffset) { builder.AddOffset(9, DailyRewardResetTimeOffset.Value, 0); }
  public static void AddOpenScenarioId(FlatBufferBuilder builder, StringOffset OpenScenarioIdOffset) { builder.AddOffset(10, OpenScenarioIdOffset.Value, 0); }
  public static void AddCharacterSlotHideRank(FlatBufferBuilder builder, VectorOffset CharacterSlotHideRankOffset) { builder.AddOffset(11, CharacterSlotHideRankOffset.Value, 0); }
  public static VectorOffset CreateCharacterSlotHideRankVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCharacterSlotHideRankVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCharacterSlotHideRankVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCharacterSlotHideRankVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCharacterSlotHideRankVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMapSlotHideRank(FlatBufferBuilder builder, long MapSlotHideRank) { builder.AddLong(12, MapSlotHideRank, 0); }
  public static void AddRelativeOpponentRankStart(FlatBufferBuilder builder, VectorOffset RelativeOpponentRankStartOffset) { builder.AddOffset(13, RelativeOpponentRankStartOffset.Value, 0); }
  public static VectorOffset CreateRelativeOpponentRankStartVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankStartVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankStartVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankStartVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelativeOpponentRankStartVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRelativeOpponentRankEnd(FlatBufferBuilder builder, VectorOffset RelativeOpponentRankEndOffset) { builder.AddOffset(14, RelativeOpponentRankEndOffset.Value, 0); }
  public static VectorOffset CreateRelativeOpponentRankEndVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankEndVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankEndVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelativeOpponentRankEndVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelativeOpponentRankEndVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddModifiedStatType(FlatBufferBuilder builder, VectorOffset ModifiedStatTypeOffset) { builder.AddOffset(15, ModifiedStatTypeOffset.Value, 0); }
  public static VectorOffset CreateModifiedStatTypeVector(FlatBufferBuilder builder, FlatDataGlobal.StatType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateModifiedStatTypeVectorBlock(FlatBufferBuilder builder, FlatDataGlobal.StatType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModifiedStatTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataGlobal.StatType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateModifiedStatTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataGlobal.StatType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartModifiedStatTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStatMulFactor(FlatBufferBuilder builder, VectorOffset StatMulFactorOffset) { builder.AddOffset(16, StatMulFactorOffset.Value, 0); }
  public static VectorOffset CreateStatMulFactorVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatMulFactorVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatMulFactorVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatMulFactorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatMulFactorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStatSumFactor(FlatBufferBuilder builder, VectorOffset StatSumFactorOffset) { builder.AddOffset(17, StatSumFactorOffset.Value, 0); }
  public static VectorOffset CreateStatSumFactorVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatSumFactorVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatSumFactorVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatSumFactorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatSumFactorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddNPCName(FlatBufferBuilder builder, VectorOffset NPCNameOffset) { builder.AddOffset(18, NPCNameOffset.Value, 0); }
  public static VectorOffset CreateNPCNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNPCNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNPCNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNPCNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNPCNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNPCMainCharacterCount(FlatBufferBuilder builder, long NPCMainCharacterCount) { builder.AddLong(19, NPCMainCharacterCount, 0); }
  public static void AddNPCSupportCharacterCount(FlatBufferBuilder builder, long NPCSupportCharacterCount) { builder.AddLong(20, NPCSupportCharacterCount, 0); }
  public static void AddNPCCharacterSkillLevel(FlatBufferBuilder builder, long NPCCharacterSkillLevel) { builder.AddLong(21, NPCCharacterSkillLevel, 0); }
  public static void AddTimeSpanInDaysForBattleHistory(FlatBufferBuilder builder, long TimeSpanInDaysForBattleHistory) { builder.AddLong(22, TimeSpanInDaysForBattleHistory, 0); }
  public static void AddHiddenCharacterImagePath(FlatBufferBuilder builder, StringOffset HiddenCharacterImagePathOffset) { builder.AddOffset(23, HiddenCharacterImagePathOffset.Value, 0); }
  public static void AddDefenseVictoryRewardMaxCount(FlatBufferBuilder builder, long DefenseVictoryRewardMaxCount) { builder.AddLong(24, DefenseVictoryRewardMaxCount, 0); }
  public static void AddTopRankerCountLimit(FlatBufferBuilder builder, long TopRankerCountLimit) { builder.AddLong(25, TopRankerCountLimit, 0); }
  public static void AddAutoRefreshIntervalMilliSeconds(FlatBufferBuilder builder, long AutoRefreshIntervalMilliSeconds) { builder.AddLong(26, AutoRefreshIntervalMilliSeconds, 0); }
  public static void AddEchelonSettingIntervalMilliSeconds(FlatBufferBuilder builder, long EchelonSettingIntervalMilliSeconds) { builder.AddLong(27, EchelonSettingIntervalMilliSeconds, 0); }
  public static void AddSkipAllowedTimeMilliSeconds(FlatBufferBuilder builder, long SkipAllowedTimeMilliSeconds) { builder.AddLong(28, SkipAllowedTimeMilliSeconds, 0); }
  public static void AddShowSeasonChangeInfoStartTime(FlatBufferBuilder builder, StringOffset ShowSeasonChangeInfoStartTimeOffset) { builder.AddOffset(29, ShowSeasonChangeInfoStartTimeOffset.Value, 0); }
  public static void AddShowSeasonChangeInfoEndTime(FlatBufferBuilder builder, StringOffset ShowSeasonChangeInfoEndTimeOffset) { builder.AddOffset(30, ShowSeasonChangeInfoEndTimeOffset.Value, 0); }
  public static void AddShowSeasonId(FlatBufferBuilder builder, long ShowSeasonId) { builder.AddLong(31, ShowSeasonId, 0); }
  public static void AddArenaHistoryQueryLimitDays(FlatBufferBuilder builder, int ArenaHistoryQueryLimitDays) { builder.AddInt(32, ArenaHistoryQueryLimitDays, 0); }
  public static Offset<FlatDataGlobal.ConstArenaExcel> EndConstArenaExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.ConstArenaExcel>(o);
  }
}


}
