// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldWorldMapZoneExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FieldWorldMapZoneExcel GetRootAsFieldWorldMapZoneExcel(ByteBuffer _bb) { return GetRootAsFieldWorldMapZoneExcel(_bb, new FieldWorldMapZoneExcel()); }
  public static FieldWorldMapZoneExcel GetRootAsFieldWorldMapZoneExcel(ByteBuffer _bb, FieldWorldMapZoneExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldWorldMapZoneExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Date { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.FieldConditionType OpenConditionType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.FieldConditionType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.FieldConditionType.Invalid; } }
  public long OpenConditionId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.FieldConditionType CloseConditionType { get { int o = __p.__offset(14); return o != 0 ? (FlatDataGlobal.FieldConditionType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.FieldConditionType.Invalid; } }
  public long CloseConditionId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ResultFieldScene { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FieldStageInteractionId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataGlobal.FieldWorldMapButtonType WorldMapButtonType { get { int o = __p.__offset(22); return o != 0 ? (FlatDataGlobal.FieldWorldMapButtonType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.FieldWorldMapButtonType.DefaultMode; } }
  public uint LocalizeCode { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool NewTagDisplay { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataGlobal.FieldWorldMapZoneExcel> CreateFieldWorldMapZoneExcel(FlatBufferBuilder builder,
      long Id = 0,
      int GroupId = 0,
      int Date = 0,
      FlatDataGlobal.FieldConditionType OpenConditionType = FlatDataGlobal.FieldConditionType.Invalid,
      long OpenConditionId = 0,
      FlatDataGlobal.FieldConditionType CloseConditionType = FlatDataGlobal.FieldConditionType.Invalid,
      long CloseConditionId = 0,
      long ResultFieldScene = 0,
      long FieldStageInteractionId = 0,
      FlatDataGlobal.FieldWorldMapButtonType WorldMapButtonType = FlatDataGlobal.FieldWorldMapButtonType.DefaultMode,
      uint LocalizeCode = 0,
      bool NewTagDisplay = false) {
    builder.StartTable(12);
    FieldWorldMapZoneExcel.AddFieldStageInteractionId(builder, FieldStageInteractionId);
    FieldWorldMapZoneExcel.AddResultFieldScene(builder, ResultFieldScene);
    FieldWorldMapZoneExcel.AddCloseConditionId(builder, CloseConditionId);
    FieldWorldMapZoneExcel.AddOpenConditionId(builder, OpenConditionId);
    FieldWorldMapZoneExcel.AddId(builder, Id);
    FieldWorldMapZoneExcel.AddLocalizeCode(builder, LocalizeCode);
    FieldWorldMapZoneExcel.AddWorldMapButtonType(builder, WorldMapButtonType);
    FieldWorldMapZoneExcel.AddCloseConditionType(builder, CloseConditionType);
    FieldWorldMapZoneExcel.AddOpenConditionType(builder, OpenConditionType);
    FieldWorldMapZoneExcel.AddDate(builder, Date);
    FieldWorldMapZoneExcel.AddGroupId(builder, GroupId);
    FieldWorldMapZoneExcel.AddNewTagDisplay(builder, NewTagDisplay);
    return FieldWorldMapZoneExcel.EndFieldWorldMapZoneExcel(builder);
  }

  public static void StartFieldWorldMapZoneExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int GroupId) { builder.AddInt(1, GroupId, 0); }
  public static void AddDate(FlatBufferBuilder builder, int Date) { builder.AddInt(2, Date, 0); }
  public static void AddOpenConditionType(FlatBufferBuilder builder, FlatDataGlobal.FieldConditionType OpenConditionType) { builder.AddInt(3, (int)OpenConditionType, 0); }
  public static void AddOpenConditionId(FlatBufferBuilder builder, long OpenConditionId) { builder.AddLong(4, OpenConditionId, 0); }
  public static void AddCloseConditionType(FlatBufferBuilder builder, FlatDataGlobal.FieldConditionType CloseConditionType) { builder.AddInt(5, (int)CloseConditionType, 0); }
  public static void AddCloseConditionId(FlatBufferBuilder builder, long CloseConditionId) { builder.AddLong(6, CloseConditionId, 0); }
  public static void AddResultFieldScene(FlatBufferBuilder builder, long ResultFieldScene) { builder.AddLong(7, ResultFieldScene, 0); }
  public static void AddFieldStageInteractionId(FlatBufferBuilder builder, long FieldStageInteractionId) { builder.AddLong(8, FieldStageInteractionId, 0); }
  public static void AddWorldMapButtonType(FlatBufferBuilder builder, FlatDataGlobal.FieldWorldMapButtonType WorldMapButtonType) { builder.AddInt(9, (int)WorldMapButtonType, 0); }
  public static void AddLocalizeCode(FlatBufferBuilder builder, uint LocalizeCode) { builder.AddUint(10, LocalizeCode, 0); }
  public static void AddNewTagDisplay(FlatBufferBuilder builder, bool NewTagDisplay) { builder.AddBool(11, NewTagDisplay, false); }
  public static Offset<FlatDataGlobal.FieldWorldMapZoneExcel> EndFieldWorldMapZoneExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.FieldWorldMapZoneExcel>(o);
  }
}


}
