// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TagSettingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static TagSettingExcel GetRootAsTagSettingExcel(ByteBuffer _bb) { return GetRootAsTagSettingExcel(_bb, new TagSettingExcel()); }
  public static TagSettingExcel GetRootAsTagSettingExcel(ByteBuffer _bb, TagSettingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TagSettingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatDataGlobal.Tag Id { get { int o = __p.__offset(4); return o != 0 ? (FlatDataGlobal.Tag)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.Tag.A; } }
  public bool IsOpen { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatDataGlobal.TagSettingExcel> CreateTagSettingExcel(FlatBufferBuilder builder,
      FlatDataGlobal.Tag Id = FlatDataGlobal.Tag.A,
      bool IsOpen = false,
      uint LocalizeEtcId = 0) {
    builder.StartTable(3);
    TagSettingExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    TagSettingExcel.AddId(builder, Id);
    TagSettingExcel.AddIsOpen(builder, IsOpen);
    return TagSettingExcel.EndTagSettingExcel(builder);
  }

  public static void StartTagSettingExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, FlatDataGlobal.Tag Id) { builder.AddInt(0, (int)Id, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, bool IsOpen) { builder.AddBool(1, IsOpen, false); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint LocalizeEtcId) { builder.AddUint(2, LocalizeEtcId, 0); }
  public static Offset<FlatDataGlobal.TagSettingExcel> EndTagSettingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.TagSettingExcel>(o);
  }
}


}
