// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameRoadPuzzleRoadRoundExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameRoadPuzzleRoadRoundExcel GetRootAsMinigameRoadPuzzleRoadRoundExcel(ByteBuffer _bb) { return GetRootAsMinigameRoadPuzzleRoadRoundExcel(_bb, new MinigameRoadPuzzleRoadRoundExcel()); }
  public static MinigameRoadPuzzleRoadRoundExcel GetRootAsMinigameRoadPuzzleRoadRoundExcel(ByteBuffer _bb, MinigameRoadPuzzleRoadRoundExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameRoadPuzzleRoadRoundExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Round { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsLoop { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long EnterScenarioGroupId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EndScenarioGroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MapGroupId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RoundReward { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AdditionalRewardID(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int AdditionalRewardIDLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetAdditionalRewardIDBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetAdditionalRewardIDBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetAdditionalRewardIDArray() { return __p.__vector_as_array<long>(20); }
  public int AdditionalRewardAmount(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AdditionalRewardAmountLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAdditionalRewardAmountBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetAdditionalRewardAmountBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetAdditionalRewardAmountArray() { return __p.__vector_as_array<int>(22); }

  public static Offset<FlatDataGlobal.MinigameRoadPuzzleRoadRoundExcel> CreateMinigameRoadPuzzleRoadRoundExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      int Round = 0,
      bool IsLoop = false,
      long EnterScenarioGroupId = 0,
      long EndScenarioGroupId = 0,
      long MapGroupId = 0,
      long RoundReward = 0,
      VectorOffset AdditionalRewardIDOffset = default(VectorOffset),
      VectorOffset AdditionalRewardAmountOffset = default(VectorOffset)) {
    builder.StartTable(10);
    MinigameRoadPuzzleRoadRoundExcel.AddRoundReward(builder, RoundReward);
    MinigameRoadPuzzleRoadRoundExcel.AddMapGroupId(builder, MapGroupId);
    MinigameRoadPuzzleRoadRoundExcel.AddEndScenarioGroupId(builder, EndScenarioGroupId);
    MinigameRoadPuzzleRoadRoundExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId);
    MinigameRoadPuzzleRoadRoundExcel.AddUniqueId(builder, UniqueId);
    MinigameRoadPuzzleRoadRoundExcel.AddEventContentId(builder, EventContentId);
    MinigameRoadPuzzleRoadRoundExcel.AddAdditionalRewardAmount(builder, AdditionalRewardAmountOffset);
    MinigameRoadPuzzleRoadRoundExcel.AddAdditionalRewardID(builder, AdditionalRewardIDOffset);
    MinigameRoadPuzzleRoadRoundExcel.AddRound(builder, Round);
    MinigameRoadPuzzleRoadRoundExcel.AddIsLoop(builder, IsLoop);
    return MinigameRoadPuzzleRoadRoundExcel.EndMinigameRoadPuzzleRoadRoundExcel(builder);
  }

  public static void StartMinigameRoadPuzzleRoadRoundExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(1, UniqueId, 0); }
  public static void AddRound(FlatBufferBuilder builder, int Round) { builder.AddInt(2, Round, 0); }
  public static void AddIsLoop(FlatBufferBuilder builder, bool IsLoop) { builder.AddBool(3, IsLoop, false); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, long EnterScenarioGroupId) { builder.AddLong(4, EnterScenarioGroupId, 0); }
  public static void AddEndScenarioGroupId(FlatBufferBuilder builder, long EndScenarioGroupId) { builder.AddLong(5, EndScenarioGroupId, 0); }
  public static void AddMapGroupId(FlatBufferBuilder builder, long MapGroupId) { builder.AddLong(6, MapGroupId, 0); }
  public static void AddRoundReward(FlatBufferBuilder builder, long RoundReward) { builder.AddLong(7, RoundReward, 0); }
  public static void AddAdditionalRewardID(FlatBufferBuilder builder, VectorOffset AdditionalRewardIDOffset) { builder.AddOffset(8, AdditionalRewardIDOffset.Value, 0); }
  public static VectorOffset CreateAdditionalRewardIDVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalRewardIDVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalRewardIDVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalRewardIDVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAdditionalRewardIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddAdditionalRewardAmount(FlatBufferBuilder builder, VectorOffset AdditionalRewardAmountOffset) { builder.AddOffset(9, AdditionalRewardAmountOffset.Value, 0); }
  public static VectorOffset CreateAdditionalRewardAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalRewardAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAdditionalRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatDataGlobal.MinigameRoadPuzzleRoadRoundExcel> EndMinigameRoadPuzzleRoadRoundExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MinigameRoadPuzzleRoadRoundExcel>(o);
  }
}


}
