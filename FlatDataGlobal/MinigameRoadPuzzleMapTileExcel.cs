// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameRoadPuzzleMapTileExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameRoadPuzzleMapTileExcel GetRootAsMinigameRoadPuzzleMapTileExcel(ByteBuffer _bb) { return GetRootAsMinigameRoadPuzzleMapTileExcel(_bb, new MinigameRoadPuzzleMapTileExcel()); }
  public static MinigameRoadPuzzleMapTileExcel GetRootAsMinigameRoadPuzzleMapTileExcel(ByteBuffer _bb, MinigameRoadPuzzleMapTileExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameRoadPuzzleMapTileExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string PrefabName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(8); }
  public FlatDataGlobal.RoadPuzzleMapTileType MapTileType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.RoadPuzzleMapTileType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.RoadPuzzleMapTileType.None; } }

  public static Offset<FlatDataGlobal.MinigameRoadPuzzleMapTileExcel> CreateMinigameRoadPuzzleMapTileExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      StringOffset PrefabNameOffset = default(StringOffset),
      FlatDataGlobal.RoadPuzzleMapTileType MapTileType = FlatDataGlobal.RoadPuzzleMapTileType.None) {
    builder.StartTable(4);
    MinigameRoadPuzzleMapTileExcel.AddUniqueId(builder, UniqueId);
    MinigameRoadPuzzleMapTileExcel.AddEventContentId(builder, EventContentId);
    MinigameRoadPuzzleMapTileExcel.AddMapTileType(builder, MapTileType);
    MinigameRoadPuzzleMapTileExcel.AddPrefabName(builder, PrefabNameOffset);
    return MinigameRoadPuzzleMapTileExcel.EndMinigameRoadPuzzleMapTileExcel(builder);
  }

  public static void StartMinigameRoadPuzzleMapTileExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(1, UniqueId, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(2, PrefabNameOffset.Value, 0); }
  public static void AddMapTileType(FlatBufferBuilder builder, FlatDataGlobal.RoadPuzzleMapTileType MapTileType) { builder.AddInt(3, (int)MapTileType, 0); }
  public static Offset<FlatDataGlobal.MinigameRoadPuzzleMapTileExcel> EndMinigameRoadPuzzleMapTileExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.MinigameRoadPuzzleMapTileExcel>(o);
  }
}


}
