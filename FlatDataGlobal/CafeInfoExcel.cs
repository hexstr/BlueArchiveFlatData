// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CafeInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CafeInfoExcel GetRootAsCafeInfoExcel(ByteBuffer _bb) { return GetRootAsCafeInfoExcel(_bb, new CafeInfoExcel()); }
  public static CafeInfoExcel GetRootAsCafeInfoExcel(ByteBuffer _bb, CafeInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CafeInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CafeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsDefault { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FlatDataGlobal.OpenConditionContent OpenConditionCafeId { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.OpenConditionContent)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.OpenConditionContent.Shop; } }
  public FlatDataGlobal.OpenConditionContent OpenConditionCafeInvite { get { int o = __p.__offset(10); return o != 0 ? (FlatDataGlobal.OpenConditionContent)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.OpenConditionContent.Shop; } }

  public static Offset<FlatDataGlobal.CafeInfoExcel> CreateCafeInfoExcel(FlatBufferBuilder builder,
      long CafeId = 0,
      bool IsDefault = false,
      FlatDataGlobal.OpenConditionContent OpenConditionCafeId = FlatDataGlobal.OpenConditionContent.Shop,
      FlatDataGlobal.OpenConditionContent OpenConditionCafeInvite = FlatDataGlobal.OpenConditionContent.Shop) {
    builder.StartTable(4);
    CafeInfoExcel.AddCafeId(builder, CafeId);
    CafeInfoExcel.AddOpenConditionCafeInvite(builder, OpenConditionCafeInvite);
    CafeInfoExcel.AddOpenConditionCafeId(builder, OpenConditionCafeId);
    CafeInfoExcel.AddIsDefault(builder, IsDefault);
    return CafeInfoExcel.EndCafeInfoExcel(builder);
  }

  public static void StartCafeInfoExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCafeId(FlatBufferBuilder builder, long CafeId) { builder.AddLong(0, CafeId, 0); }
  public static void AddIsDefault(FlatBufferBuilder builder, bool IsDefault) { builder.AddBool(1, IsDefault, false); }
  public static void AddOpenConditionCafeId(FlatBufferBuilder builder, FlatDataGlobal.OpenConditionContent OpenConditionCafeId) { builder.AddInt(2, (int)OpenConditionCafeId, 0); }
  public static void AddOpenConditionCafeInvite(FlatBufferBuilder builder, FlatDataGlobal.OpenConditionContent OpenConditionCafeInvite) { builder.AddInt(3, (int)OpenConditionCafeInvite, 0); }
  public static Offset<FlatDataGlobal.CafeInfoExcel> EndCafeInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.CafeInfoExcel>(o);
  }
}


}
