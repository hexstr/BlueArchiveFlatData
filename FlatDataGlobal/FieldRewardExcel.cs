// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataGlobal
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FieldRewardExcel GetRootAsFieldRewardExcel(ByteBuffer _bb) { return GetRootAsFieldRewardExcel(_bb, new FieldRewardExcel()); }
  public static FieldRewardExcel GetRootAsFieldRewardExcel(ByteBuffer _bb, FieldRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RewardProb { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataGlobal.ParcelType RewardParcelType { get { int o = __p.__offset(8); return o != 0 ? (FlatDataGlobal.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataGlobal.ParcelType.None; } }
  public long RewardId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RewardAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatDataGlobal.FieldRewardExcel> CreateFieldRewardExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      int RewardProb = 0,
      FlatDataGlobal.ParcelType RewardParcelType = FlatDataGlobal.ParcelType.None,
      long RewardId = 0,
      int RewardAmount = 0) {
    builder.StartTable(5);
    FieldRewardExcel.AddRewardId(builder, RewardId);
    FieldRewardExcel.AddGroupId(builder, GroupId);
    FieldRewardExcel.AddRewardAmount(builder, RewardAmount);
    FieldRewardExcel.AddRewardParcelType(builder, RewardParcelType);
    FieldRewardExcel.AddRewardProb(builder, RewardProb);
    return FieldRewardExcel.EndFieldRewardExcel(builder);
  }

  public static void StartFieldRewardExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(0, GroupId, 0); }
  public static void AddRewardProb(FlatBufferBuilder builder, int RewardProb) { builder.AddInt(1, RewardProb, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, FlatDataGlobal.ParcelType RewardParcelType) { builder.AddInt(2, (int)RewardParcelType, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, long RewardId) { builder.AddLong(3, RewardId, 0); }
  public static void AddRewardAmount(FlatBufferBuilder builder, int RewardAmount) { builder.AddInt(4, RewardAmount, 0); }
  public static Offset<FlatDataGlobal.FieldRewardExcel> EndFieldRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataGlobal.FieldRewardExcel>(o);
  }
}


}
