// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDreamScheduleResultExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDreamScheduleResultExcel GetRootAsMiniGameDreamScheduleResultExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamScheduleResultExcel(_bb, new MiniGameDreamScheduleResultExcel()); }
  public static MiniGameDreamScheduleResultExcel GetRootAsMiniGameDreamScheduleResultExcel(ByteBuffer _bb, MiniGameDreamScheduleResultExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamScheduleResultExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.DreamMakerResult DreamMakerResult { get { int o = __p.__offset(8); return o != 0 ? (FlatDataJp.DreamMakerResult)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.DreamMakerResult.None; } }
  public long DreamMakerScheduleGroup { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Prob { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataJp.DreamMakerParameterType RewardParameter(int j) { int o = __p.__offset(14); return o != 0 ? (FlatDataJp.DreamMakerParameterType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.DreamMakerParameterType)0; }
  public int RewardParameterLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.DreamMakerParameterType> GetRewardParameterBytes() { return __p.__vector_as_span<FlatDataJp.DreamMakerParameterType>(14, 4); }
#else
  public ArraySegment<byte>? GetRewardParameterBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public FlatDataJp.DreamMakerParameterType[] GetRewardParameterArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.DreamMakerParameterType[] a = new FlatDataJp.DreamMakerParameterType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.DreamMakerParameterType)__p.bb.GetInt(p + i * 4); } return a; }
  public FlatDataJp.DreamMakerParamOperationType RewardParameterOperationType(int j) { int o = __p.__offset(16); return o != 0 ? (FlatDataJp.DreamMakerParamOperationType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.DreamMakerParamOperationType)0; }
  public int RewardParameterOperationTypeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.DreamMakerParamOperationType> GetRewardParameterOperationTypeBytes() { return __p.__vector_as_span<FlatDataJp.DreamMakerParamOperationType>(16, 4); }
#else
  public ArraySegment<byte>? GetRewardParameterOperationTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public FlatDataJp.DreamMakerParamOperationType[] GetRewardParameterOperationTypeArray() { int o = __p.__offset(16); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.DreamMakerParamOperationType[] a = new FlatDataJp.DreamMakerParamOperationType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.DreamMakerParamOperationType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParameterAmount(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParameterAmountLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParameterAmountBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetRewardParameterAmountBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetRewardParameterAmountArray() { return __p.__vector_as_array<long>(18); }
  public FlatDataJp.ParcelType RewardParcelType { get { int o = __p.__offset(20); return o != 0 ? (FlatDataJp.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.MiniGameDreamScheduleResultExcel> CreateMiniGameDreamScheduleResultExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      FlatDataJp.DreamMakerResult dreamMakerResult = FlatDataJp.DreamMakerResult.None,
      long DreamMakerScheduleGroup = 0,
      int Prob = 0,
      VectorOffset RewardParameterOffset = default(VectorOffset),
      VectorOffset RewardParameterOperationTypeOffset = default(VectorOffset),
      VectorOffset RewardParameterAmountOffset = default(VectorOffset),
      FlatDataJp.ParcelType RewardParcelType = FlatDataJp.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0) {
    builder.StartTable(11);
    MiniGameDreamScheduleResultExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    MiniGameDreamScheduleResultExcel.AddRewardParcelId(builder, RewardParcelId);
    MiniGameDreamScheduleResultExcel.AddDreamMakerScheduleGroup(builder, DreamMakerScheduleGroup);
    MiniGameDreamScheduleResultExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamScheduleResultExcel.AddId(builder, Id);
    MiniGameDreamScheduleResultExcel.AddRewardParcelType(builder, RewardParcelType);
    MiniGameDreamScheduleResultExcel.AddRewardParameterAmount(builder, RewardParameterAmountOffset);
    MiniGameDreamScheduleResultExcel.AddRewardParameterOperationType(builder, RewardParameterOperationTypeOffset);
    MiniGameDreamScheduleResultExcel.AddRewardParameter(builder, RewardParameterOffset);
    MiniGameDreamScheduleResultExcel.AddProb(builder, Prob);
    MiniGameDreamScheduleResultExcel.AddDreamMakerResult(builder, dreamMakerResult);
    return MiniGameDreamScheduleResultExcel.EndMiniGameDreamScheduleResultExcel(builder);
  }

  public static void StartMiniGameDreamScheduleResultExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(1, EventContentId, 0); }
  public static void AddDreamMakerResult(FlatBufferBuilder builder, FlatDataJp.DreamMakerResult dreamMakerResult) { builder.AddInt(2, (int)dreamMakerResult, 0); }
  public static void AddDreamMakerScheduleGroup(FlatBufferBuilder builder, long DreamMakerScheduleGroup) { builder.AddLong(3, DreamMakerScheduleGroup, 0); }
  public static void AddProb(FlatBufferBuilder builder, int Prob) { builder.AddInt(4, Prob, 0); }
  public static void AddRewardParameter(FlatBufferBuilder builder, VectorOffset RewardParameterOffset) { builder.AddOffset(5, RewardParameterOffset.Value, 0); }
  public static VectorOffset CreateRewardParameterVector(FlatBufferBuilder builder, FlatDataJp.DreamMakerParameterType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterVectorBlock(FlatBufferBuilder builder, FlatDataJp.DreamMakerParameterType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.DreamMakerParameterType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.DreamMakerParameterType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParameterOperationType(FlatBufferBuilder builder, VectorOffset RewardParameterOperationTypeOffset) { builder.AddOffset(6, RewardParameterOperationTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParameterOperationTypeVector(FlatBufferBuilder builder, FlatDataJp.DreamMakerParamOperationType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterOperationTypeVectorBlock(FlatBufferBuilder builder, FlatDataJp.DreamMakerParamOperationType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterOperationTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.DreamMakerParamOperationType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterOperationTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.DreamMakerParamOperationType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParameterOperationTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParameterAmount(FlatBufferBuilder builder, VectorOffset RewardParameterAmountOffset) { builder.AddOffset(7, RewardParameterAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardParameterAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParameterAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, FlatDataJp.ParcelType RewardParcelType) { builder.AddInt(8, (int)RewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long RewardParcelId) { builder.AddLong(9, RewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long RewardParcelAmount) { builder.AddLong(10, RewardParcelAmount, 0); }
  public static Offset<FlatDataJp.MiniGameDreamScheduleResultExcel> EndMiniGameDreamScheduleResultExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.MiniGameDreamScheduleResultExcel>(o);
  }
}


}
