// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ContentsShortcutExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ContentsShortcutExcel GetRootAsContentsShortcutExcel(ByteBuffer _bb) { return GetRootAsContentsShortcutExcel(_bb, new ContentsShortcutExcel()); }
  public static ContentsShortcutExcel GetRootAsContentsShortcutExcel(ByteBuffer _bb, ContentsShortcutExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentsShortcutExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.ContentType Contenttype { get { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.ContentType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ContentType.None; } }
  public long EventContentId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScenarioModeVolume { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScenarioModeChapter { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShortcutOpenTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShortcutOpenTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetShortcutOpenTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetShortcutOpenTimeArray() { return __p.__vector_as_array<byte>(14); }
  public string ShortcutCloseTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShortcutCloseTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetShortcutCloseTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetShortcutCloseTimeArray() { return __p.__vector_as_array<byte>(16); }
  public long ConditionContentId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.StageDifficulty ConquestMapDifficulty { get { int o = __p.__offset(20); return o != 0 ? (FlatDataJp.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.StageDifficulty.None; } }
  public int ConquestStepIndex { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long ShortcutContentId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShortcutUIName(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ShortcutUINameLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Localize { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetLocalizeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetLocalizeArray() { return __p.__vector_as_array<byte>(28); }

  public static Offset<FlatDataJp.ContentsShortcutExcel> CreateContentsShortcutExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      FlatDataJp.ContentType contenttype = FlatDataJp.ContentType.None,
      long EventContentId = 0,
      long ScenarioModeVolume = 0,
      long ScenarioModeChapter = 0,
      StringOffset ShortcutOpenTimeOffset = default(StringOffset),
      StringOffset ShortcutCloseTimeOffset = default(StringOffset),
      long ConditionContentId = 0,
      FlatDataJp.StageDifficulty ConquestMapDifficulty = FlatDataJp.StageDifficulty.None,
      int ConquestStepIndex = 0,
      long ShortcutContentId = 0,
      VectorOffset ShortcutUINameOffset = default(VectorOffset),
      StringOffset LocalizeOffset = default(StringOffset)) {
    builder.StartTable(13);
    ContentsShortcutExcel.AddShortcutContentId(builder, ShortcutContentId);
    ContentsShortcutExcel.AddConditionContentId(builder, ConditionContentId);
    ContentsShortcutExcel.AddScenarioModeChapter(builder, ScenarioModeChapter);
    ContentsShortcutExcel.AddScenarioModeVolume(builder, ScenarioModeVolume);
    ContentsShortcutExcel.AddEventContentId(builder, EventContentId);
    ContentsShortcutExcel.AddUniqueId(builder, UniqueId);
    ContentsShortcutExcel.AddLocalize(builder, LocalizeOffset);
    ContentsShortcutExcel.AddShortcutUIName(builder, ShortcutUINameOffset);
    ContentsShortcutExcel.AddConquestStepIndex(builder, ConquestStepIndex);
    ContentsShortcutExcel.AddConquestMapDifficulty(builder, ConquestMapDifficulty);
    ContentsShortcutExcel.AddShortcutCloseTime(builder, ShortcutCloseTimeOffset);
    ContentsShortcutExcel.AddShortcutOpenTime(builder, ShortcutOpenTimeOffset);
    ContentsShortcutExcel.AddContenttype(builder, contenttype);
    return ContentsShortcutExcel.EndContentsShortcutExcel(builder);
  }

  public static void StartContentsShortcutExcel(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddContenttype(FlatBufferBuilder builder, FlatDataJp.ContentType contenttype) { builder.AddInt(1, (int)contenttype, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(2, EventContentId, 0); }
  public static void AddScenarioModeVolume(FlatBufferBuilder builder, long ScenarioModeVolume) { builder.AddLong(3, ScenarioModeVolume, 0); }
  public static void AddScenarioModeChapter(FlatBufferBuilder builder, long ScenarioModeChapter) { builder.AddLong(4, ScenarioModeChapter, 0); }
  public static void AddShortcutOpenTime(FlatBufferBuilder builder, StringOffset ShortcutOpenTimeOffset) { builder.AddOffset(5, ShortcutOpenTimeOffset.Value, 0); }
  public static void AddShortcutCloseTime(FlatBufferBuilder builder, StringOffset ShortcutCloseTimeOffset) { builder.AddOffset(6, ShortcutCloseTimeOffset.Value, 0); }
  public static void AddConditionContentId(FlatBufferBuilder builder, long ConditionContentId) { builder.AddLong(7, ConditionContentId, 0); }
  public static void AddConquestMapDifficulty(FlatBufferBuilder builder, FlatDataJp.StageDifficulty ConquestMapDifficulty) { builder.AddInt(8, (int)ConquestMapDifficulty, 0); }
  public static void AddConquestStepIndex(FlatBufferBuilder builder, int ConquestStepIndex) { builder.AddInt(9, ConquestStepIndex, 0); }
  public static void AddShortcutContentId(FlatBufferBuilder builder, long ShortcutContentId) { builder.AddLong(10, ShortcutContentId, 0); }
  public static void AddShortcutUIName(FlatBufferBuilder builder, VectorOffset ShortcutUINameOffset) { builder.AddOffset(11, ShortcutUINameOffset.Value, 0); }
  public static VectorOffset CreateShortcutUINameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUINameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUINameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUINameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShortcutUINameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLocalize(FlatBufferBuilder builder, StringOffset LocalizeOffset) { builder.AddOffset(12, LocalizeOffset.Value, 0); }
  public static Offset<FlatDataJp.ContentsShortcutExcel> EndContentsShortcutExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.ContentsShortcutExcel>(o);
  }
}


}
