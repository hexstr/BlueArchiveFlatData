// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct VoiceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static VoiceExcel GetRootAsVoiceExcel(ByteBuffer _bb) { return GetRootAsVoiceExcel(_bb, new VoiceExcel()); }
  public static VoiceExcel GetRootAsVoiceExcel(ByteBuffer _bb, VoiceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VoiceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint NameHash { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool OnlyOne { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float VolumeJp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DelayJp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Priority { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AudioClipJp { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioClipJpBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAudioClipJpBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAudioClipJpArray() { return __p.__vector_as_array<byte>(14); }
  public float VolumeKr { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DelayKr { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string AudioClipKr { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioClipKrBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetAudioClipKrBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetAudioClipKrArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<FlatDataJp.VoiceExcel> CreateVoiceExcel(FlatBufferBuilder builder,
      uint NameHash = 0,
      bool OnlyOne = false,
      float VolumeJp = 0.0f,
      float DelayJp = 0.0f,
      int Priority = 0,
      StringOffset AudioClipJpOffset = default(StringOffset),
      float VolumeKr = 0.0f,
      float DelayKr = 0.0f,
      StringOffset AudioClipKrOffset = default(StringOffset)) {
    builder.StartTable(9);
    VoiceExcel.AddAudioClipKr(builder, AudioClipKrOffset);
    VoiceExcel.AddDelayKr(builder, DelayKr);
    VoiceExcel.AddVolumeKr(builder, VolumeKr);
    VoiceExcel.AddAudioClipJp(builder, AudioClipJpOffset);
    VoiceExcel.AddPriority(builder, Priority);
    VoiceExcel.AddDelayJp(builder, DelayJp);
    VoiceExcel.AddVolumeJp(builder, VolumeJp);
    VoiceExcel.AddNameHash(builder, NameHash);
    VoiceExcel.AddOnlyOne(builder, OnlyOne);
    return VoiceExcel.EndVoiceExcel(builder);
  }

  public static void StartVoiceExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddNameHash(FlatBufferBuilder builder, uint NameHash) { builder.AddUint(0, NameHash, 0); }
  public static void AddOnlyOne(FlatBufferBuilder builder, bool OnlyOne) { builder.AddBool(1, OnlyOne, false); }
  public static void AddVolumeJp(FlatBufferBuilder builder, float VolumeJp) { builder.AddFloat(2, VolumeJp, 0.0f); }
  public static void AddDelayJp(FlatBufferBuilder builder, float DelayJp) { builder.AddFloat(3, DelayJp, 0.0f); }
  public static void AddPriority(FlatBufferBuilder builder, int Priority) { builder.AddInt(4, Priority, 0); }
  public static void AddAudioClipJp(FlatBufferBuilder builder, StringOffset AudioClipJpOffset) { builder.AddOffset(5, AudioClipJpOffset.Value, 0); }
  public static void AddVolumeKr(FlatBufferBuilder builder, float VolumeKr) { builder.AddFloat(6, VolumeKr, 0.0f); }
  public static void AddDelayKr(FlatBufferBuilder builder, float DelayKr) { builder.AddFloat(7, DelayKr, 0.0f); }
  public static void AddAudioClipKr(FlatBufferBuilder builder, StringOffset AudioClipKrOffset) { builder.AddOffset(8, AudioClipKrOffset.Value, 0); }
  public static Offset<FlatDataJp.VoiceExcel> EndVoiceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.VoiceExcel>(o);
  }
}


}
