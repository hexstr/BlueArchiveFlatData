// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScenarioExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ScenarioExcel GetRootAsScenarioExcel(ByteBuffer _bb) { return GetRootAsScenarioExcel(_bb, new ScenarioExcel()); }
  public static ScenarioExcel GetRootAsScenarioExcel(ByteBuffer _bb, ScenarioExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatDataJp.ScenarioBGType None(int j) { int o = __p.__offset(4); return o != 0 ? (FlatDataJp.ScenarioBGType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.ScenarioBGType)0; }
  public int NoneLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.ScenarioBGType> GetNoneBytes() { return __p.__vector_as_span<FlatDataJp.ScenarioBGType>(4, 4); }
#else
  public ArraySegment<byte>? GetNoneBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public FlatDataJp.ScenarioBGType[] GetNoneArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.ScenarioBGType[] a = new FlatDataJp.ScenarioBGType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.ScenarioBGType)__p.bb.GetInt(p + i * 4); } return a; }
  public FlatDataJp.ScenarioCharacterAction Idle(int j) { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.ScenarioCharacterAction)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.ScenarioCharacterAction)0; }
  public int IdleLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.ScenarioCharacterAction> GetIdleBytes() { return __p.__vector_as_span<FlatDataJp.ScenarioCharacterAction>(6, 4); }
#else
  public ArraySegment<byte>? GetIdleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public FlatDataJp.ScenarioCharacterAction[] GetIdleArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.ScenarioCharacterAction[] a = new FlatDataJp.ScenarioCharacterAction[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.ScenarioCharacterAction)__p.bb.GetInt(p + i * 4); } return a; }
  public FlatDataJp.DialogCategory Cafe { get { int o = __p.__offset(8); return o != 0 ? (FlatDataJp.DialogCategory)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.DialogCategory.Cafe; } }
  public FlatDataJp.DialogType Talk { get { int o = __p.__offset(10); return o != 0 ? (FlatDataJp.DialogType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.DialogType.Talk; } }
  public FlatDataJp.StoryCondition Open { get { int o = __p.__offset(12); return o != 0 ? (FlatDataJp.StoryCondition)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.StoryCondition.Open; } }
  public FlatDataJp.EmojiEvent EnterConver { get { int o = __p.__offset(14); return o != 0 ? (FlatDataJp.EmojiEvent)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.EmojiEvent.EnterConver; } }
  public FlatDataJp.ScenarioZoomAnchors Center { get { int o = __p.__offset(16); return o != 0 ? (FlatDataJp.ScenarioZoomAnchors)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ScenarioZoomAnchors.Center; } }
  public FlatDataJp.ScenarioZoomType Instant { get { int o = __p.__offset(18); return o != 0 ? (FlatDataJp.ScenarioZoomType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ScenarioZoomType.Instant; } }
  public FlatDataJp.ScenarioContentType Prologue { get { int o = __p.__offset(20); return o != 0 ? (FlatDataJp.ScenarioContentType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ScenarioContentType.Prologue; } }

  public static Offset<FlatDataJp.ScenarioExcel> CreateScenarioExcel(FlatBufferBuilder builder,
      VectorOffset NoneOffset = default(VectorOffset),
      VectorOffset IdleOffset = default(VectorOffset),
      FlatDataJp.DialogCategory Cafe = FlatDataJp.DialogCategory.Cafe,
      FlatDataJp.DialogType Talk = FlatDataJp.DialogType.Talk,
      FlatDataJp.StoryCondition Open = FlatDataJp.StoryCondition.Open,
      FlatDataJp.EmojiEvent EnterConver = FlatDataJp.EmojiEvent.EnterConver,
      FlatDataJp.ScenarioZoomAnchors Center = FlatDataJp.ScenarioZoomAnchors.Center,
      FlatDataJp.ScenarioZoomType Instant = FlatDataJp.ScenarioZoomType.Instant,
      FlatDataJp.ScenarioContentType Prologue = FlatDataJp.ScenarioContentType.Prologue) {
    builder.StartTable(9);
    ScenarioExcel.AddPrologue(builder, Prologue);
    ScenarioExcel.AddInstant(builder, Instant);
    ScenarioExcel.AddCenter(builder, Center);
    ScenarioExcel.AddEnterConver(builder, EnterConver);
    ScenarioExcel.AddOpen(builder, Open);
    ScenarioExcel.AddTalk(builder, Talk);
    ScenarioExcel.AddCafe(builder, Cafe);
    ScenarioExcel.AddIdle(builder, IdleOffset);
    ScenarioExcel.AddNone(builder, NoneOffset);
    return ScenarioExcel.EndScenarioExcel(builder);
  }

  public static void StartScenarioExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddNone(FlatBufferBuilder builder, VectorOffset NoneOffset) { builder.AddOffset(0, NoneOffset.Value, 0); }
  public static VectorOffset CreateNoneVector(FlatBufferBuilder builder, FlatDataJp.ScenarioBGType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, FlatDataJp.ScenarioBGType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.ScenarioBGType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.ScenarioBGType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNoneVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdle(FlatBufferBuilder builder, VectorOffset IdleOffset) { builder.AddOffset(1, IdleOffset.Value, 0); }
  public static VectorOffset CreateIdleVector(FlatBufferBuilder builder, FlatDataJp.ScenarioCharacterAction[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, FlatDataJp.ScenarioCharacterAction[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.ScenarioCharacterAction> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.ScenarioCharacterAction>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCafe(FlatBufferBuilder builder, FlatDataJp.DialogCategory Cafe) { builder.AddInt(2, (int)Cafe, 0); }
  public static void AddTalk(FlatBufferBuilder builder, FlatDataJp.DialogType Talk) { builder.AddInt(3, (int)Talk, 0); }
  public static void AddOpen(FlatBufferBuilder builder, FlatDataJp.StoryCondition Open) { builder.AddInt(4, (int)Open, 0); }
  public static void AddEnterConver(FlatBufferBuilder builder, FlatDataJp.EmojiEvent EnterConver) { builder.AddInt(5, (int)EnterConver, 0); }
  public static void AddCenter(FlatBufferBuilder builder, FlatDataJp.ScenarioZoomAnchors Center) { builder.AddInt(6, (int)Center, 0); }
  public static void AddInstant(FlatBufferBuilder builder, FlatDataJp.ScenarioZoomType Instant) { builder.AddInt(7, (int)Instant, 0); }
  public static void AddPrologue(FlatBufferBuilder builder, FlatDataJp.ScenarioContentType Prologue) { builder.AddInt(8, (int)Prologue, 0); }
  public static Offset<FlatDataJp.ScenarioExcel> EndScenarioExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.ScenarioExcel>(o);
  }
}


}
