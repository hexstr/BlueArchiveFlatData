// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDreamInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDreamInfoExcel GetRootAsMiniGameDreamInfoExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamInfoExcel(_bb, new MiniGameDreamInfoExcel()); }
  public static MiniGameDreamInfoExcel GetRootAsMiniGameDreamInfoExcel(ByteBuffer _bb, MiniGameDreamInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.DreamMakerMultiplierCondition DreamMakerMultiplierCondition { get { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.DreamMakerMultiplierCondition)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.DreamMakerMultiplierCondition.None; } }
  public long DreamMakerMultiplierConditionValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerMultiplierMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerDays { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerActionPoint { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.ParcelType DreamMakerParcelType { get { int o = __p.__offset(16); return o != 0 ? (FlatDataJp.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ParcelType.None; } }
  public long DreamMakerParcelId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.ParcelType DreamMakerDailyPointParcelType { get { int o = __p.__offset(20); return o != 0 ? (FlatDataJp.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ParcelType.None; } }
  public long DreamMakerDailyPointId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerParameterTransfer { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScheduleCostGoodsId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LobbyBGMChangeScenarioId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.MiniGameDreamInfoExcel> CreateMiniGameDreamInfoExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      FlatDataJp.DreamMakerMultiplierCondition dreamMakerMultiplierCondition = FlatDataJp.DreamMakerMultiplierCondition.None,
      long DreamMakerMultiplierConditionValue = 0,
      long DreamMakerMultiplierMax = 0,
      long DreamMakerDays = 0,
      long DreamMakerActionPoint = 0,
      FlatDataJp.ParcelType DreamMakerParcelType = FlatDataJp.ParcelType.None,
      long DreamMakerParcelId = 0,
      FlatDataJp.ParcelType DreamMakerDailyPointParcelType = FlatDataJp.ParcelType.None,
      long DreamMakerDailyPointId = 0,
      long DreamMakerParameterTransfer = 0,
      long ScheduleCostGoodsId = 0,
      long LobbyBGMChangeScenarioId = 0) {
    builder.StartTable(13);
    MiniGameDreamInfoExcel.AddLobbyBGMChangeScenarioId(builder, LobbyBGMChangeScenarioId);
    MiniGameDreamInfoExcel.AddScheduleCostGoodsId(builder, ScheduleCostGoodsId);
    MiniGameDreamInfoExcel.AddDreamMakerParameterTransfer(builder, DreamMakerParameterTransfer);
    MiniGameDreamInfoExcel.AddDreamMakerDailyPointId(builder, DreamMakerDailyPointId);
    MiniGameDreamInfoExcel.AddDreamMakerParcelId(builder, DreamMakerParcelId);
    MiniGameDreamInfoExcel.AddDreamMakerActionPoint(builder, DreamMakerActionPoint);
    MiniGameDreamInfoExcel.AddDreamMakerDays(builder, DreamMakerDays);
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierMax(builder, DreamMakerMultiplierMax);
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierConditionValue(builder, DreamMakerMultiplierConditionValue);
    MiniGameDreamInfoExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamInfoExcel.AddDreamMakerDailyPointParcelType(builder, DreamMakerDailyPointParcelType);
    MiniGameDreamInfoExcel.AddDreamMakerParcelType(builder, DreamMakerParcelType);
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierCondition(builder, dreamMakerMultiplierCondition);
    return MiniGameDreamInfoExcel.EndMiniGameDreamInfoExcel(builder);
  }

  public static void StartMiniGameDreamInfoExcel(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddDreamMakerMultiplierCondition(FlatBufferBuilder builder, FlatDataJp.DreamMakerMultiplierCondition dreamMakerMultiplierCondition) { builder.AddInt(1, (int)dreamMakerMultiplierCondition, 0); }
  public static void AddDreamMakerMultiplierConditionValue(FlatBufferBuilder builder, long DreamMakerMultiplierConditionValue) { builder.AddLong(2, DreamMakerMultiplierConditionValue, 0); }
  public static void AddDreamMakerMultiplierMax(FlatBufferBuilder builder, long DreamMakerMultiplierMax) { builder.AddLong(3, DreamMakerMultiplierMax, 0); }
  public static void AddDreamMakerDays(FlatBufferBuilder builder, long DreamMakerDays) { builder.AddLong(4, DreamMakerDays, 0); }
  public static void AddDreamMakerActionPoint(FlatBufferBuilder builder, long DreamMakerActionPoint) { builder.AddLong(5, DreamMakerActionPoint, 0); }
  public static void AddDreamMakerParcelType(FlatBufferBuilder builder, FlatDataJp.ParcelType DreamMakerParcelType) { builder.AddInt(6, (int)DreamMakerParcelType, 0); }
  public static void AddDreamMakerParcelId(FlatBufferBuilder builder, long DreamMakerParcelId) { builder.AddLong(7, DreamMakerParcelId, 0); }
  public static void AddDreamMakerDailyPointParcelType(FlatBufferBuilder builder, FlatDataJp.ParcelType DreamMakerDailyPointParcelType) { builder.AddInt(8, (int)DreamMakerDailyPointParcelType, 0); }
  public static void AddDreamMakerDailyPointId(FlatBufferBuilder builder, long DreamMakerDailyPointId) { builder.AddLong(9, DreamMakerDailyPointId, 0); }
  public static void AddDreamMakerParameterTransfer(FlatBufferBuilder builder, long DreamMakerParameterTransfer) { builder.AddLong(10, DreamMakerParameterTransfer, 0); }
  public static void AddScheduleCostGoodsId(FlatBufferBuilder builder, long ScheduleCostGoodsId) { builder.AddLong(11, ScheduleCostGoodsId, 0); }
  public static void AddLobbyBGMChangeScenarioId(FlatBufferBuilder builder, long LobbyBGMChangeScenarioId) { builder.AddLong(12, LobbyBGMChangeScenarioId, 0); }
  public static Offset<FlatDataJp.MiniGameDreamInfoExcel> EndMiniGameDreamInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.MiniGameDreamInfoExcel>(o);
  }
}


}
