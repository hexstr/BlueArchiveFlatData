// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScenarioBGNameExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ScenarioBGNameExcel GetRootAsScenarioBGNameExcel(ByteBuffer _bb) { return GetRootAsScenarioBGNameExcel(_bb, new ScenarioBGNameExcel()); }
  public static ScenarioBGNameExcel GetRootAsScenarioBGNameExcel(ByteBuffer _bb, ScenarioBGNameExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioBGNameExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Name { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public FlatDataJp.ProductionStep Productionstep { get { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.ProductionStep)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ProductionStep.ToDo; } }
  public string BGFileName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBGFileNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetBGFileNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetBGFileNameArray() { return __p.__vector_as_array<byte>(8); }
  public FlatDataJp.ScenarioBGType BGType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataJp.ScenarioBGType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ScenarioBGType.None; } }
  public string AnimationRoot { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationRootBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAnimationRootBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAnimationRootArray() { return __p.__vector_as_array<byte>(12); }
  public string AnimationName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAnimationNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAnimationNameArray() { return __p.__vector_as_array<byte>(14); }
  public float SpineScale { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int SpineLocalPosX { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpineLocalPosY { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatDataJp.ScenarioBGNameExcel> CreateScenarioBGNameExcel(FlatBufferBuilder builder,
      uint Name = 0,
      FlatDataJp.ProductionStep productionstep = FlatDataJp.ProductionStep.ToDo,
      StringOffset BGFileNameOffset = default(StringOffset),
      FlatDataJp.ScenarioBGType BGType = FlatDataJp.ScenarioBGType.None,
      StringOffset AnimationRootOffset = default(StringOffset),
      StringOffset AnimationNameOffset = default(StringOffset),
      float SpineScale = 0.0f,
      int SpineLocalPosX = 0,
      int SpineLocalPosY = 0) {
    builder.StartTable(9);
    ScenarioBGNameExcel.AddSpineLocalPosY(builder, SpineLocalPosY);
    ScenarioBGNameExcel.AddSpineLocalPosX(builder, SpineLocalPosX);
    ScenarioBGNameExcel.AddSpineScale(builder, SpineScale);
    ScenarioBGNameExcel.AddAnimationName(builder, AnimationNameOffset);
    ScenarioBGNameExcel.AddAnimationRoot(builder, AnimationRootOffset);
    ScenarioBGNameExcel.AddBGType(builder, BGType);
    ScenarioBGNameExcel.AddBGFileName(builder, BGFileNameOffset);
    ScenarioBGNameExcel.AddProductionstep(builder, productionstep);
    ScenarioBGNameExcel.AddName(builder, Name);
    return ScenarioBGNameExcel.EndScenarioBGNameExcel(builder);
  }

  public static void StartScenarioBGNameExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddName(FlatBufferBuilder builder, uint Name) { builder.AddUint(0, Name, 0); }
  public static void AddProductionstep(FlatBufferBuilder builder, FlatDataJp.ProductionStep productionstep) { builder.AddInt(1, (int)productionstep, 0); }
  public static void AddBGFileName(FlatBufferBuilder builder, StringOffset BGFileNameOffset) { builder.AddOffset(2, BGFileNameOffset.Value, 0); }
  public static void AddBGType(FlatBufferBuilder builder, FlatDataJp.ScenarioBGType BGType) { builder.AddInt(3, (int)BGType, 0); }
  public static void AddAnimationRoot(FlatBufferBuilder builder, StringOffset AnimationRootOffset) { builder.AddOffset(4, AnimationRootOffset.Value, 0); }
  public static void AddAnimationName(FlatBufferBuilder builder, StringOffset AnimationNameOffset) { builder.AddOffset(5, AnimationNameOffset.Value, 0); }
  public static void AddSpineScale(FlatBufferBuilder builder, float SpineScale) { builder.AddFloat(6, SpineScale, 0.0f); }
  public static void AddSpineLocalPosX(FlatBufferBuilder builder, int SpineLocalPosX) { builder.AddInt(7, SpineLocalPosX, 0); }
  public static void AddSpineLocalPosY(FlatBufferBuilder builder, int SpineLocalPosY) { builder.AddInt(8, SpineLocalPosY, 0); }
  public static Offset<FlatDataJp.ScenarioBGNameExcel> EndScenarioBGNameExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.ScenarioBGNameExcel>(o);
  }
}


}
