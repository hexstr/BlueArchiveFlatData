// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventContentDiceRaceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static EventContentDiceRaceExcel GetRootAsEventContentDiceRaceExcel(ByteBuffer _bb) { return GetRootAsEventContentDiceRaceExcel(_bb, new EventContentDiceRaceExcel()); }
  public static EventContentDiceRaceExcel GetRootAsEventContentDiceRaceExcel(ByteBuffer _bb, EventContentDiceRaceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentDiceRaceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DiceCostGoodsId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int SkipableLap { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DiceRacePawnPrefab { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiceRacePawnPrefabBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDiceRacePawnPrefabBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDiceRacePawnPrefabArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<FlatDataJp.EventContentDiceRaceExcel> CreateEventContentDiceRaceExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long DiceCostGoodsId = 0,
      int SkipableLap = 0,
      StringOffset DiceRacePawnPrefabOffset = default(StringOffset)) {
    builder.StartTable(4);
    EventContentDiceRaceExcel.AddDiceCostGoodsId(builder, DiceCostGoodsId);
    EventContentDiceRaceExcel.AddEventContentId(builder, EventContentId);
    EventContentDiceRaceExcel.AddDiceRacePawnPrefab(builder, DiceRacePawnPrefabOffset);
    EventContentDiceRaceExcel.AddSkipableLap(builder, SkipableLap);
    return EventContentDiceRaceExcel.EndEventContentDiceRaceExcel(builder);
  }

  public static void StartEventContentDiceRaceExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddDiceCostGoodsId(FlatBufferBuilder builder, long DiceCostGoodsId) { builder.AddLong(1, DiceCostGoodsId, 0); }
  public static void AddSkipableLap(FlatBufferBuilder builder, int SkipableLap) { builder.AddInt(2, SkipableLap, 0); }
  public static void AddDiceRacePawnPrefab(FlatBufferBuilder builder, StringOffset DiceRacePawnPrefabOffset) { builder.AddOffset(3, DiceRacePawnPrefabOffset.Value, 0); }
  public static Offset<FlatDataJp.EventContentDiceRaceExcel> EndEventContentDiceRaceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.EventContentDiceRaceExcel>(o);
  }
}


}
