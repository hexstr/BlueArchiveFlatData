// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameRhythmBgmExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameRhythmBgmExcel GetRootAsMiniGameRhythmBgmExcel(ByteBuffer _bb) { return GetRootAsMiniGameRhythmBgmExcel(_bb, new MiniGameRhythmBgmExcel()); }
  public static MiniGameRhythmBgmExcel GetRootAsMiniGameRhythmBgmExcel(ByteBuffer _bb, MiniGameRhythmBgmExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameRhythmBgmExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RhythmBgmId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StageSelectImagePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageSelectImagePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetStageSelectImagePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStageSelectImagePathArray() { return __p.__vector_as_array<byte>(8); }
  public long Bpm { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Bgm { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string BgmNameText { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgmNameTextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetBgmNameTextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetBgmNameTextArray() { return __p.__vector_as_array<byte>(14); }
  public string BgmArtistText { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgmArtistTextBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBgmArtistTextBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBgmArtistTextArray() { return __p.__vector_as_array<byte>(16); }
  public bool HasLyricist { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string BgmComposerText { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgmComposerTextBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBgmComposerTextBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBgmComposerTextArray() { return __p.__vector_as_array<byte>(20); }
  public int BgmLength { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatDataJp.MiniGameRhythmBgmExcel> CreateMiniGameRhythmBgmExcel(FlatBufferBuilder builder,
      long RhythmBgmId = 0,
      long EventContentId = 0,
      StringOffset StageSelectImagePathOffset = default(StringOffset),
      long Bpm = 0,
      long Bgm = 0,
      StringOffset BgmNameTextOffset = default(StringOffset),
      StringOffset BgmArtistTextOffset = default(StringOffset),
      bool HasLyricist = false,
      StringOffset BgmComposerTextOffset = default(StringOffset),
      int BgmLength = 0) {
    builder.StartTable(10);
    MiniGameRhythmBgmExcel.AddBgm(builder, Bgm);
    MiniGameRhythmBgmExcel.AddBpm(builder, Bpm);
    MiniGameRhythmBgmExcel.AddEventContentId(builder, EventContentId);
    MiniGameRhythmBgmExcel.AddRhythmBgmId(builder, RhythmBgmId);
    MiniGameRhythmBgmExcel.AddBgmLength(builder, BgmLength);
    MiniGameRhythmBgmExcel.AddBgmComposerText(builder, BgmComposerTextOffset);
    MiniGameRhythmBgmExcel.AddBgmArtistText(builder, BgmArtistTextOffset);
    MiniGameRhythmBgmExcel.AddBgmNameText(builder, BgmNameTextOffset);
    MiniGameRhythmBgmExcel.AddStageSelectImagePath(builder, StageSelectImagePathOffset);
    MiniGameRhythmBgmExcel.AddHasLyricist(builder, HasLyricist);
    return MiniGameRhythmBgmExcel.EndMiniGameRhythmBgmExcel(builder);
  }

  public static void StartMiniGameRhythmBgmExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddRhythmBgmId(FlatBufferBuilder builder, long RhythmBgmId) { builder.AddLong(0, RhythmBgmId, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(1, EventContentId, 0); }
  public static void AddStageSelectImagePath(FlatBufferBuilder builder, StringOffset StageSelectImagePathOffset) { builder.AddOffset(2, StageSelectImagePathOffset.Value, 0); }
  public static void AddBpm(FlatBufferBuilder builder, long Bpm) { builder.AddLong(3, Bpm, 0); }
  public static void AddBgm(FlatBufferBuilder builder, long Bgm) { builder.AddLong(4, Bgm, 0); }
  public static void AddBgmNameText(FlatBufferBuilder builder, StringOffset BgmNameTextOffset) { builder.AddOffset(5, BgmNameTextOffset.Value, 0); }
  public static void AddBgmArtistText(FlatBufferBuilder builder, StringOffset BgmArtistTextOffset) { builder.AddOffset(6, BgmArtistTextOffset.Value, 0); }
  public static void AddHasLyricist(FlatBufferBuilder builder, bool HasLyricist) { builder.AddBool(7, HasLyricist, false); }
  public static void AddBgmComposerText(FlatBufferBuilder builder, StringOffset BgmComposerTextOffset) { builder.AddOffset(8, BgmComposerTextOffset.Value, 0); }
  public static void AddBgmLength(FlatBufferBuilder builder, int BgmLength) { builder.AddInt(9, BgmLength, 0); }
  public static Offset<FlatDataJp.MiniGameRhythmBgmExcel> EndMiniGameRhythmBgmExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.MiniGameRhythmBgmExcel>(o);
  }
}


}
