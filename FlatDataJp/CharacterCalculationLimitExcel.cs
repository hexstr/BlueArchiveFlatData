// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CharacterCalculationLimitExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CharacterCalculationLimitExcel GetRootAsCharacterCalculationLimitExcel(ByteBuffer _bb) { return GetRootAsCharacterCalculationLimitExcel(_bb, new CharacterCalculationLimitExcel()); }
  public static CharacterCalculationLimitExcel GetRootAsCharacterCalculationLimitExcel(ByteBuffer _bb, CharacterCalculationLimitExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCalculationLimitExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.TacticEntityType TacticEntityType { get { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.TacticEntityType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.TacticEntityType.None; } }
  public FlatDataJp.BattleCalculationStat CalculationValue { get { int o = __p.__offset(8); return o != 0 ? (FlatDataJp.BattleCalculationStat)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.BattleCalculationStat.FinalDamage; } }
  public long MinValue { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxValue { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.CharacterCalculationLimitExcel> CreateCharacterCalculationLimitExcel(FlatBufferBuilder builder,
      long Id = 0,
      FlatDataJp.TacticEntityType tacticEntityType = FlatDataJp.TacticEntityType.None,
      FlatDataJp.BattleCalculationStat CalculationValue = FlatDataJp.BattleCalculationStat.FinalDamage,
      long MinValue = 0,
      long MaxValue = 0) {
    builder.StartTable(5);
    CharacterCalculationLimitExcel.AddMaxValue(builder, MaxValue);
    CharacterCalculationLimitExcel.AddMinValue(builder, MinValue);
    CharacterCalculationLimitExcel.AddId(builder, Id);
    CharacterCalculationLimitExcel.AddCalculationValue(builder, CalculationValue);
    CharacterCalculationLimitExcel.AddTacticEntityType(builder, tacticEntityType);
    return CharacterCalculationLimitExcel.EndCharacterCalculationLimitExcel(builder);
  }

  public static void StartCharacterCalculationLimitExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddTacticEntityType(FlatBufferBuilder builder, FlatDataJp.TacticEntityType tacticEntityType) { builder.AddInt(1, (int)tacticEntityType, 0); }
  public static void AddCalculationValue(FlatBufferBuilder builder, FlatDataJp.BattleCalculationStat CalculationValue) { builder.AddInt(2, (int)CalculationValue, 0); }
  public static void AddMinValue(FlatBufferBuilder builder, long MinValue) { builder.AddLong(3, MinValue, 0); }
  public static void AddMaxValue(FlatBufferBuilder builder, long MaxValue) { builder.AddLong(4, MaxValue, 0); }
  public static Offset<FlatDataJp.CharacterCalculationLimitExcel> EndCharacterCalculationLimitExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.CharacterCalculationLimitExcel>(o);
  }
}


}
