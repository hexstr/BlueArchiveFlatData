// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDreamReplayScenarioExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDreamReplayScenarioExcel GetRootAsMiniGameDreamReplayScenarioExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamReplayScenarioExcel(_bb, new MiniGameDreamReplayScenarioExcel()); }
  public static MiniGameDreamReplayScenarioExcel GetRootAsMiniGameDreamReplayScenarioExcel(ByteBuffer _bb, MiniGameDreamReplayScenarioExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamReplayScenarioExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScenarioGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Order { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint ReplaySummaryTitleLocalize { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ReplaySummaryLocalizeScenarioId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string ReplayScenarioResource { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReplayScenarioResourceBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetReplayScenarioResourceBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetReplayScenarioResourceArray() { return __p.__vector_as_array<byte>(14); }
  public bool IsReplayScenarioHorizon { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataJp.MiniGameDreamReplayScenarioExcel> CreateMiniGameDreamReplayScenarioExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long ScenarioGroupId = 0,
      long Order = 0,
      uint ReplaySummaryTitleLocalize = 0,
      uint ReplaySummaryLocalizeScenarioId = 0,
      StringOffset ReplayScenarioResourceOffset = default(StringOffset),
      bool IsReplayScenarioHorizon = false) {
    builder.StartTable(7);
    MiniGameDreamReplayScenarioExcel.AddOrder(builder, Order);
    MiniGameDreamReplayScenarioExcel.AddScenarioGroupId(builder, ScenarioGroupId);
    MiniGameDreamReplayScenarioExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamReplayScenarioExcel.AddReplayScenarioResource(builder, ReplayScenarioResourceOffset);
    MiniGameDreamReplayScenarioExcel.AddReplaySummaryLocalizeScenarioId(builder, ReplaySummaryLocalizeScenarioId);
    MiniGameDreamReplayScenarioExcel.AddReplaySummaryTitleLocalize(builder, ReplaySummaryTitleLocalize);
    MiniGameDreamReplayScenarioExcel.AddIsReplayScenarioHorizon(builder, IsReplayScenarioHorizon);
    return MiniGameDreamReplayScenarioExcel.EndMiniGameDreamReplayScenarioExcel(builder);
  }

  public static void StartMiniGameDreamReplayScenarioExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddScenarioGroupId(FlatBufferBuilder builder, long ScenarioGroupId) { builder.AddLong(1, ScenarioGroupId, 0); }
  public static void AddOrder(FlatBufferBuilder builder, long Order) { builder.AddLong(2, Order, 0); }
  public static void AddReplaySummaryTitleLocalize(FlatBufferBuilder builder, uint ReplaySummaryTitleLocalize) { builder.AddUint(3, ReplaySummaryTitleLocalize, 0); }
  public static void AddReplaySummaryLocalizeScenarioId(FlatBufferBuilder builder, uint ReplaySummaryLocalizeScenarioId) { builder.AddUint(4, ReplaySummaryLocalizeScenarioId, 0); }
  public static void AddReplayScenarioResource(FlatBufferBuilder builder, StringOffset ReplayScenarioResourceOffset) { builder.AddOffset(5, ReplayScenarioResourceOffset.Value, 0); }
  public static void AddIsReplayScenarioHorizon(FlatBufferBuilder builder, bool IsReplayScenarioHorizon) { builder.AddBool(6, IsReplayScenarioHorizon, false); }
  public static Offset<FlatDataJp.MiniGameDreamReplayScenarioExcel> EndMiniGameDreamReplayScenarioExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.MiniGameDreamReplayScenarioExcel>(o);
  }
}


}
