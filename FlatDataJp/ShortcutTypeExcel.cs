// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ShortcutTypeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static ShortcutTypeExcel GetRootAsShortcutTypeExcel(ByteBuffer _bb) { return GetRootAsShortcutTypeExcel(_bb, new ShortcutTypeExcel()); }
  public static ShortcutTypeExcel GetRootAsShortcutTypeExcel(ByteBuffer _bb, ShortcutTypeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShortcutTypeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsAscending { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FlatDataJp.ShortcutContentType ContentType(int j) { int o = __p.__offset(8); return o != 0 ? (FlatDataJp.ShortcutContentType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.ShortcutContentType)0; }
  public int ContentTypeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.ShortcutContentType> GetContentTypeBytes() { return __p.__vector_as_span<FlatDataJp.ShortcutContentType>(8, 4); }
#else
  public ArraySegment<byte>? GetContentTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public FlatDataJp.ShortcutContentType[] GetContentTypeArray() { int o = __p.__offset(8); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.ShortcutContentType[] a = new FlatDataJp.ShortcutContentType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.ShortcutContentType)__p.bb.GetInt(p + i * 4); } return a; }

  public static Offset<FlatDataJp.ShortcutTypeExcel> CreateShortcutTypeExcel(FlatBufferBuilder builder,
      long Id = 0,
      bool IsAscending = false,
      VectorOffset ContentTypeOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ShortcutTypeExcel.AddId(builder, Id);
    ShortcutTypeExcel.AddContentType(builder, ContentTypeOffset);
    ShortcutTypeExcel.AddIsAscending(builder, IsAscending);
    return ShortcutTypeExcel.EndShortcutTypeExcel(builder);
  }

  public static void StartShortcutTypeExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddIsAscending(FlatBufferBuilder builder, bool IsAscending) { builder.AddBool(1, IsAscending, false); }
  public static void AddContentType(FlatBufferBuilder builder, VectorOffset ContentTypeOffset) { builder.AddOffset(2, ContentTypeOffset.Value, 0); }
  public static VectorOffset CreateContentTypeVector(FlatBufferBuilder builder, FlatDataJp.ShortcutContentType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateContentTypeVectorBlock(FlatBufferBuilder builder, FlatDataJp.ShortcutContentType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateContentTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.ShortcutContentType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateContentTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.ShortcutContentType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartContentTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatDataJp.ShortcutTypeExcel> EndShortcutTypeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.ShortcutTypeExcel>(o);
  }
}


}
