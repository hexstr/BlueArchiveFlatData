// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TutorialExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static TutorialExcel GetRootAsTutorialExcel(ByteBuffer _bb) { return GetRootAsTutorialExcel(_bb, new TutorialExcel()); }
  public static TutorialExcel GetRootAsTutorialExcel(ByteBuffer _bb, TutorialExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TutorialExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string CompletionReportEventName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompletionReportEventNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCompletionReportEventNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCompletionReportEventNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool CompulsoryTutorial { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool DescriptionTutorial { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long TutorialStageId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string UIName(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UINameLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TutorialParentName(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TutorialParentNameLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatDataJp.TutorialExcel> CreateTutorialExcel(FlatBufferBuilder builder,
      long ID = 0,
      StringOffset CompletionReportEventNameOffset = default(StringOffset),
      bool CompulsoryTutorial = false,
      bool DescriptionTutorial = false,
      long TutorialStageId = 0,
      VectorOffset UINameOffset = default(VectorOffset),
      VectorOffset TutorialParentNameOffset = default(VectorOffset)) {
    builder.StartTable(7);
    TutorialExcel.AddTutorialStageId(builder, TutorialStageId);
    TutorialExcel.AddID(builder, ID);
    TutorialExcel.AddTutorialParentName(builder, TutorialParentNameOffset);
    TutorialExcel.AddUIName(builder, UINameOffset);
    TutorialExcel.AddCompletionReportEventName(builder, CompletionReportEventNameOffset);
    TutorialExcel.AddDescriptionTutorial(builder, DescriptionTutorial);
    TutorialExcel.AddCompulsoryTutorial(builder, CompulsoryTutorial);
    return TutorialExcel.EndTutorialExcel(builder);
  }

  public static void StartTutorialExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddID(FlatBufferBuilder builder, long ID) { builder.AddLong(0, ID, 0); }
  public static void AddCompletionReportEventName(FlatBufferBuilder builder, StringOffset CompletionReportEventNameOffset) { builder.AddOffset(1, CompletionReportEventNameOffset.Value, 0); }
  public static void AddCompulsoryTutorial(FlatBufferBuilder builder, bool CompulsoryTutorial) { builder.AddBool(2, CompulsoryTutorial, false); }
  public static void AddDescriptionTutorial(FlatBufferBuilder builder, bool DescriptionTutorial) { builder.AddBool(3, DescriptionTutorial, false); }
  public static void AddTutorialStageId(FlatBufferBuilder builder, long TutorialStageId) { builder.AddLong(4, TutorialStageId, 0); }
  public static void AddUIName(FlatBufferBuilder builder, VectorOffset UINameOffset) { builder.AddOffset(5, UINameOffset.Value, 0); }
  public static VectorOffset CreateUINameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUINameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUINameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUINameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUINameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTutorialParentName(FlatBufferBuilder builder, VectorOffset TutorialParentNameOffset) { builder.AddOffset(6, TutorialParentNameOffset.Value, 0); }
  public static VectorOffset CreateTutorialParentNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTutorialParentNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTutorialParentNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTutorialParentNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTutorialParentNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatDataJp.TutorialExcel> EndTutorialExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.TutorialExcel>(o);
  }
}


}
