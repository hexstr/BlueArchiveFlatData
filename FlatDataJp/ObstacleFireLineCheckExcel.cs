// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ObstacleFireLineCheckExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static ObstacleFireLineCheckExcel GetRootAsObstacleFireLineCheckExcel(ByteBuffer _bb) { return GetRootAsObstacleFireLineCheckExcel(_bb, new ObstacleFireLineCheckExcel()); }
  public static ObstacleFireLineCheckExcel GetRootAsObstacleFireLineCheckExcel(ByteBuffer _bb, ObstacleFireLineCheckExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObstacleFireLineCheckExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool MyObstacleFireLineCheck { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AllyObstacleFireLineCheck { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnemyObstacleFireLineCheck { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EmptyObstacleFireLineCheck { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataJp.ObstacleFireLineCheckExcel> CreateObstacleFireLineCheckExcel(FlatBufferBuilder builder,
      bool MyObstacleFireLineCheck = false,
      bool AllyObstacleFireLineCheck = false,
      bool EnemyObstacleFireLineCheck = false,
      bool EmptyObstacleFireLineCheck = false) {
    builder.StartTable(4);
    ObstacleFireLineCheckExcel.AddEmptyObstacleFireLineCheck(builder, EmptyObstacleFireLineCheck);
    ObstacleFireLineCheckExcel.AddEnemyObstacleFireLineCheck(builder, EnemyObstacleFireLineCheck);
    ObstacleFireLineCheckExcel.AddAllyObstacleFireLineCheck(builder, AllyObstacleFireLineCheck);
    ObstacleFireLineCheckExcel.AddMyObstacleFireLineCheck(builder, MyObstacleFireLineCheck);
    return ObstacleFireLineCheckExcel.EndObstacleFireLineCheckExcel(builder);
  }

  public static void StartObstacleFireLineCheckExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddMyObstacleFireLineCheck(FlatBufferBuilder builder, bool MyObstacleFireLineCheck) { builder.AddBool(0, MyObstacleFireLineCheck, false); }
  public static void AddAllyObstacleFireLineCheck(FlatBufferBuilder builder, bool AllyObstacleFireLineCheck) { builder.AddBool(1, AllyObstacleFireLineCheck, false); }
  public static void AddEnemyObstacleFireLineCheck(FlatBufferBuilder builder, bool EnemyObstacleFireLineCheck) { builder.AddBool(2, EnemyObstacleFireLineCheck, false); }
  public static void AddEmptyObstacleFireLineCheck(FlatBufferBuilder builder, bool EmptyObstacleFireLineCheck) { builder.AddBool(3, EmptyObstacleFireLineCheck, false); }
  public static Offset<FlatDataJp.ObstacleFireLineCheckExcel> EndObstacleFireLineCheckExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.ObstacleFireLineCheckExcel>(o);
  }
}


}
