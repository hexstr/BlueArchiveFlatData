// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpecialLobbyIllustExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static SpecialLobbyIllustExcel GetRootAsSpecialLobbyIllustExcel(ByteBuffer _bb) { return GetRootAsSpecialLobbyIllustExcel(_bb, new SpecialLobbyIllustExcel()); }
  public static SpecialLobbyIllustExcel GetRootAsSpecialLobbyIllustExcel(ByteBuffer _bb, SpecialLobbyIllustExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpecialLobbyIllustExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DevName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDevNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDevNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDevNameArray() { return __p.__vector_as_array<byte>(6); }
  public long CharacterCostumeUniqueId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string PrefabName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(10); }
  public string SlotTextureName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSlotTextureNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSlotTextureNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSlotTextureNameArray() { return __p.__vector_as_array<byte>(12); }
  public string RewardTextureName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRewardTextureNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetRewardTextureNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetRewardTextureNameArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<FlatDataJp.SpecialLobbyIllustExcel> CreateSpecialLobbyIllustExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      StringOffset DevNameOffset = default(StringOffset),
      long CharacterCostumeUniqueId = 0,
      StringOffset PrefabNameOffset = default(StringOffset),
      StringOffset SlotTextureNameOffset = default(StringOffset),
      StringOffset RewardTextureNameOffset = default(StringOffset)) {
    builder.StartTable(6);
    SpecialLobbyIllustExcel.AddCharacterCostumeUniqueId(builder, CharacterCostumeUniqueId);
    SpecialLobbyIllustExcel.AddUniqueId(builder, UniqueId);
    SpecialLobbyIllustExcel.AddRewardTextureName(builder, RewardTextureNameOffset);
    SpecialLobbyIllustExcel.AddSlotTextureName(builder, SlotTextureNameOffset);
    SpecialLobbyIllustExcel.AddPrefabName(builder, PrefabNameOffset);
    SpecialLobbyIllustExcel.AddDevName(builder, DevNameOffset);
    return SpecialLobbyIllustExcel.EndSpecialLobbyIllustExcel(builder);
  }

  public static void StartSpecialLobbyIllustExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddDevName(FlatBufferBuilder builder, StringOffset DevNameOffset) { builder.AddOffset(1, DevNameOffset.Value, 0); }
  public static void AddCharacterCostumeUniqueId(FlatBufferBuilder builder, long CharacterCostumeUniqueId) { builder.AddLong(2, CharacterCostumeUniqueId, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(3, PrefabNameOffset.Value, 0); }
  public static void AddSlotTextureName(FlatBufferBuilder builder, StringOffset SlotTextureNameOffset) { builder.AddOffset(4, SlotTextureNameOffset.Value, 0); }
  public static void AddRewardTextureName(FlatBufferBuilder builder, StringOffset RewardTextureNameOffset) { builder.AddOffset(5, RewardTextureNameOffset.Value, 0); }
  public static Offset<FlatDataJp.SpecialLobbyIllustExcel> EndSpecialLobbyIllustExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.SpecialLobbyIllustExcel>(o);
  }
}


}
