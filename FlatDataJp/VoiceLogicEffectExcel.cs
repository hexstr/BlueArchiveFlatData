// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct VoiceLogicEffectExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static VoiceLogicEffectExcel GetRootAsVoiceLogicEffectExcel(ByteBuffer _bb) { return GetRootAsVoiceLogicEffectExcel(_bb, new VoiceLogicEffectExcel()); }
  public static VoiceLogicEffectExcel GetRootAsVoiceLogicEffectExcel(ByteBuffer _bb, VoiceLogicEffectExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VoiceLogicEffectExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint LogicEffectNameHash { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool Self { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Priority { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint VoiceHash(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int VoiceHashLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetVoiceHashBytes() { return __p.__vector_as_span<uint>(10, 4); }
#else
  public ArraySegment<byte>? GetVoiceHashBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public uint[] GetVoiceHashArray() { return __p.__vector_as_array<uint>(10); }
  public uint VoiceId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatDataJp.VoiceLogicEffectExcel> CreateVoiceLogicEffectExcel(FlatBufferBuilder builder,
      uint LogicEffectNameHash = 0,
      bool Self = false,
      int Priority = 0,
      VectorOffset VoiceHashOffset = default(VectorOffset),
      uint VoiceId = 0) {
    builder.StartTable(5);
    VoiceLogicEffectExcel.AddVoiceId(builder, VoiceId);
    VoiceLogicEffectExcel.AddVoiceHash(builder, VoiceHashOffset);
    VoiceLogicEffectExcel.AddPriority(builder, Priority);
    VoiceLogicEffectExcel.AddLogicEffectNameHash(builder, LogicEffectNameHash);
    VoiceLogicEffectExcel.AddSelf(builder, Self);
    return VoiceLogicEffectExcel.EndVoiceLogicEffectExcel(builder);
  }

  public static void StartVoiceLogicEffectExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddLogicEffectNameHash(FlatBufferBuilder builder, uint LogicEffectNameHash) { builder.AddUint(0, LogicEffectNameHash, 0); }
  public static void AddSelf(FlatBufferBuilder builder, bool Self) { builder.AddBool(1, Self, false); }
  public static void AddPriority(FlatBufferBuilder builder, int Priority) { builder.AddInt(2, Priority, 0); }
  public static void AddVoiceHash(FlatBufferBuilder builder, VectorOffset VoiceHashOffset) { builder.AddOffset(3, VoiceHashOffset.Value, 0); }
  public static VectorOffset CreateVoiceHashVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVoiceHashVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceHashVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceHashVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVoiceHashVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVoiceId(FlatBufferBuilder builder, uint VoiceId) { builder.AddUint(4, VoiceId, 0); }
  public static Offset<FlatDataJp.VoiceLogicEffectExcel> EndVoiceLogicEffectExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.VoiceLogicEffectExcel>(o);
  }
}


}
