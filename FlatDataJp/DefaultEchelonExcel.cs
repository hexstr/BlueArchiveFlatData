// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DefaultEchelonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static DefaultEchelonExcel GetRootAsDefaultEchelonExcel(ByteBuffer _bb) { return GetRootAsDefaultEchelonExcel(_bb, new DefaultEchelonExcel()); }
  public static DefaultEchelonExcel GetRootAsDefaultEchelonExcel(ByteBuffer _bb, DefaultEchelonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DefaultEchelonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EchlonId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long LeaderId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MainId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MainIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetMainIdBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetMainIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetMainIdArray() { return __p.__vector_as_array<long>(8); }
  public long SupportId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int SupportIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetSupportIdBytes() { return __p.__vector_as_span<long>(10, 8); }
#else
  public ArraySegment<byte>? GetSupportIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetSupportIdArray() { return __p.__vector_as_array<long>(10); }
  public long TssId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.DefaultEchelonExcel> CreateDefaultEchelonExcel(FlatBufferBuilder builder,
      int EchlonId = 0,
      long LeaderId = 0,
      VectorOffset MainIdOffset = default(VectorOffset),
      VectorOffset SupportIdOffset = default(VectorOffset),
      long TssId = 0) {
    builder.StartTable(5);
    DefaultEchelonExcel.AddTssId(builder, TssId);
    DefaultEchelonExcel.AddLeaderId(builder, LeaderId);
    DefaultEchelonExcel.AddSupportId(builder, SupportIdOffset);
    DefaultEchelonExcel.AddMainId(builder, MainIdOffset);
    DefaultEchelonExcel.AddEchlonId(builder, EchlonId);
    return DefaultEchelonExcel.EndDefaultEchelonExcel(builder);
  }

  public static void StartDefaultEchelonExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEchlonId(FlatBufferBuilder builder, int EchlonId) { builder.AddInt(0, EchlonId, 0); }
  public static void AddLeaderId(FlatBufferBuilder builder, long LeaderId) { builder.AddLong(1, LeaderId, 0); }
  public static void AddMainId(FlatBufferBuilder builder, VectorOffset MainIdOffset) { builder.AddOffset(2, MainIdOffset.Value, 0); }
  public static VectorOffset CreateMainIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMainIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMainIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMainIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMainIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddSupportId(FlatBufferBuilder builder, VectorOffset SupportIdOffset) { builder.AddOffset(3, SupportIdOffset.Value, 0); }
  public static VectorOffset CreateSupportIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSupportIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSupportIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSupportIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSupportIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTssId(FlatBufferBuilder builder, long TssId) { builder.AddLong(4, TssId, 0); }
  public static Offset<FlatDataJp.DefaultEchelonExcel> EndDefaultEchelonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.DefaultEchelonExcel>(o);
  }
}


}
