// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventContentCollectionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static EventContentCollectionExcel GetRootAsEventContentCollectionExcel(ByteBuffer _bb) { return GetRootAsEventContentCollectionExcel(_bb, new EventContentCollectionExcel()); }
  public static EventContentCollectionExcel GetRootAsEventContentCollectionExcel(ByteBuffer _bb, EventContentCollectionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentCollectionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.EventCollectionUnlockType UnlockConditionType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataJp.EventCollectionUnlockType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.EventCollectionUnlockType.None; } }
  public long UnlockConditionParameter(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int UnlockConditionParameterLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetUnlockConditionParameterBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetUnlockConditionParameterBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetUnlockConditionParameterArray() { return __p.__vector_as_array<long>(12); }
  public FlatDataJp.MultipleConditionCheckType MultipleConditionCheckType { get { int o = __p.__offset(14); return o != 0 ? (FlatDataJp.MultipleConditionCheckType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.MultipleConditionCheckType.And; } }
  public long UnlockConditionCount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsObject { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsHorizon { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string EmblemResource { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemResourceBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetEmblemResourceBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetEmblemResourceArray() { return __p.__vector_as_array<byte>(22); }
  public string ThumbResource { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThumbResourceBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetThumbResourceBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetThumbResourceArray() { return __p.__vector_as_array<byte>(24); }
  public string FullResource { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFullResourceBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetFullResourceBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetFullResourceArray() { return __p.__vector_as_array<byte>(26); }
  public uint LocalizeEtcId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string SubNameLocalizeCodeId { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubNameLocalizeCodeIdBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetSubNameLocalizeCodeIdBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetSubNameLocalizeCodeIdArray() { return __p.__vector_as_array<byte>(30); }

  public static Offset<FlatDataJp.EventContentCollectionExcel> CreateEventContentCollectionExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      long GroupId = 0,
      FlatDataJp.EventCollectionUnlockType UnlockConditionType = FlatDataJp.EventCollectionUnlockType.None,
      VectorOffset UnlockConditionParameterOffset = default(VectorOffset),
      FlatDataJp.MultipleConditionCheckType multipleConditionCheckType = FlatDataJp.MultipleConditionCheckType.And,
      long UnlockConditionCount = 0,
      bool IsObject = false,
      bool IsHorizon = false,
      StringOffset EmblemResourceOffset = default(StringOffset),
      StringOffset ThumbResourceOffset = default(StringOffset),
      StringOffset FullResourceOffset = default(StringOffset),
      uint LocalizeEtcId = 0,
      StringOffset SubNameLocalizeCodeIdOffset = default(StringOffset)) {
    builder.StartTable(14);
    EventContentCollectionExcel.AddUnlockConditionCount(builder, UnlockConditionCount);
    EventContentCollectionExcel.AddGroupId(builder, GroupId);
    EventContentCollectionExcel.AddEventContentId(builder, EventContentId);
    EventContentCollectionExcel.AddId(builder, Id);
    EventContentCollectionExcel.AddSubNameLocalizeCodeId(builder, SubNameLocalizeCodeIdOffset);
    EventContentCollectionExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    EventContentCollectionExcel.AddFullResource(builder, FullResourceOffset);
    EventContentCollectionExcel.AddThumbResource(builder, ThumbResourceOffset);
    EventContentCollectionExcel.AddEmblemResource(builder, EmblemResourceOffset);
    EventContentCollectionExcel.AddMultipleConditionCheckType(builder, multipleConditionCheckType);
    EventContentCollectionExcel.AddUnlockConditionParameter(builder, UnlockConditionParameterOffset);
    EventContentCollectionExcel.AddUnlockConditionType(builder, UnlockConditionType);
    EventContentCollectionExcel.AddIsHorizon(builder, IsHorizon);
    EventContentCollectionExcel.AddIsObject(builder, IsObject);
    return EventContentCollectionExcel.EndEventContentCollectionExcel(builder);
  }

  public static void StartEventContentCollectionExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(1, EventContentId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long GroupId) { builder.AddLong(2, GroupId, 0); }
  public static void AddUnlockConditionType(FlatBufferBuilder builder, FlatDataJp.EventCollectionUnlockType UnlockConditionType) { builder.AddInt(3, (int)UnlockConditionType, 0); }
  public static void AddUnlockConditionParameter(FlatBufferBuilder builder, VectorOffset UnlockConditionParameterOffset) { builder.AddOffset(4, UnlockConditionParameterOffset.Value, 0); }
  public static VectorOffset CreateUnlockConditionParameterVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUnlockConditionParameterVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUnlockConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMultipleConditionCheckType(FlatBufferBuilder builder, FlatDataJp.MultipleConditionCheckType multipleConditionCheckType) { builder.AddInt(5, (int)multipleConditionCheckType, 0); }
  public static void AddUnlockConditionCount(FlatBufferBuilder builder, long UnlockConditionCount) { builder.AddLong(6, UnlockConditionCount, 0); }
  public static void AddIsObject(FlatBufferBuilder builder, bool IsObject) { builder.AddBool(7, IsObject, false); }
  public static void AddIsHorizon(FlatBufferBuilder builder, bool IsHorizon) { builder.AddBool(8, IsHorizon, false); }
  public static void AddEmblemResource(FlatBufferBuilder builder, StringOffset EmblemResourceOffset) { builder.AddOffset(9, EmblemResourceOffset.Value, 0); }
  public static void AddThumbResource(FlatBufferBuilder builder, StringOffset ThumbResourceOffset) { builder.AddOffset(10, ThumbResourceOffset.Value, 0); }
  public static void AddFullResource(FlatBufferBuilder builder, StringOffset FullResourceOffset) { builder.AddOffset(11, FullResourceOffset.Value, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint LocalizeEtcId) { builder.AddUint(12, LocalizeEtcId, 0); }
  public static void AddSubNameLocalizeCodeId(FlatBufferBuilder builder, StringOffset SubNameLocalizeCodeIdOffset) { builder.AddOffset(13, SubNameLocalizeCodeIdOffset.Value, 0); }
  public static Offset<FlatDataJp.EventContentCollectionExcel> EndEventContentCollectionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.EventContentCollectionExcel>(o);
  }
}


}
