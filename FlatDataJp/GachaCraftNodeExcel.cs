// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GachaCraftNodeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static GachaCraftNodeExcel GetRootAsGachaCraftNodeExcel(ByteBuffer _bb) { return GetRootAsGachaCraftNodeExcel(_bb, new GachaCraftNodeExcel()); }
  public static GachaCraftNodeExcel GetRootAsGachaCraftNodeExcel(ByteBuffer _bb, GachaCraftNodeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaCraftNodeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Tier { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int QuickCraftNodeDisplayOrder { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long NodeQuality { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Icon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(12); }
  public uint LocalizeKey { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long Property { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.GachaCraftNodeExcel> CreateGachaCraftNodeExcel(FlatBufferBuilder builder,
      long ID = 0,
      long Tier = 0,
      int QuickCraftNodeDisplayOrder = 0,
      long NodeQuality = 0,
      StringOffset IconOffset = default(StringOffset),
      uint LocalizeKey = 0,
      long Property = 0) {
    builder.StartTable(7);
    GachaCraftNodeExcel.AddProperty(builder, Property);
    GachaCraftNodeExcel.AddNodeQuality(builder, NodeQuality);
    GachaCraftNodeExcel.AddTier(builder, Tier);
    GachaCraftNodeExcel.AddID(builder, ID);
    GachaCraftNodeExcel.AddLocalizeKey(builder, LocalizeKey);
    GachaCraftNodeExcel.AddIcon(builder, IconOffset);
    GachaCraftNodeExcel.AddQuickCraftNodeDisplayOrder(builder, QuickCraftNodeDisplayOrder);
    return GachaCraftNodeExcel.EndGachaCraftNodeExcel(builder);
  }

  public static void StartGachaCraftNodeExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddID(FlatBufferBuilder builder, long ID) { builder.AddLong(0, ID, 0); }
  public static void AddTier(FlatBufferBuilder builder, long Tier) { builder.AddLong(1, Tier, 0); }
  public static void AddQuickCraftNodeDisplayOrder(FlatBufferBuilder builder, int QuickCraftNodeDisplayOrder) { builder.AddInt(2, QuickCraftNodeDisplayOrder, 0); }
  public static void AddNodeQuality(FlatBufferBuilder builder, long NodeQuality) { builder.AddLong(3, NodeQuality, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(4, IconOffset.Value, 0); }
  public static void AddLocalizeKey(FlatBufferBuilder builder, uint LocalizeKey) { builder.AddUint(5, LocalizeKey, 0); }
  public static void AddProperty(FlatBufferBuilder builder, long Property) { builder.AddLong(6, Property, 0); }
  public static Offset<FlatDataJp.GachaCraftNodeExcel> EndGachaCraftNodeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.GachaCraftNodeExcel>(o);
  }
}


}
