// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct OperatorExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static OperatorExcel GetRootAsOperatorExcel(ByteBuffer _bb) { return GetRootAsOperatorExcel(_bb, new OperatorExcel()); }
  public static OperatorExcel GetRootAsOperatorExcel(ByteBuffer _bb, OperatorExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OperatorExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroupIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGroupIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGroupIdArray() { return __p.__vector_as_array<byte>(6); }
  public FlatDataJp.OperatorCondition OperatorCondition { get { int o = __p.__offset(8); return o != 0 ? (FlatDataJp.OperatorCondition)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.OperatorCondition.None; } }
  public int OutputSequence { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RandomWeight { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OutputDelay { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Duration { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OperatorOutputPriority { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PortraitPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPortraitPathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetPortraitPathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetPortraitPathArray() { return __p.__vector_as_array<byte>(20); }
  public string TextLocalizeKey { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextLocalizeKeyBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTextLocalizeKeyBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTextLocalizeKeyArray() { return __p.__vector_as_array<byte>(22); }
  public uint VoiceId(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int VoiceIdLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetVoiceIdBytes() { return __p.__vector_as_span<uint>(24, 4); }
#else
  public ArraySegment<byte>? GetVoiceIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public uint[] GetVoiceIdArray() { return __p.__vector_as_array<uint>(24); }
  public bool OperatorWaitQueue { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataJp.OperatorExcel> CreateOperatorExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      StringOffset GroupIdOffset = default(StringOffset),
      FlatDataJp.OperatorCondition operatorCondition = FlatDataJp.OperatorCondition.None,
      int OutputSequence = 0,
      int RandomWeight = 0,
      int OutputDelay = 0,
      int Duration = 0,
      int OperatorOutputPriority = 0,
      StringOffset PortraitPathOffset = default(StringOffset),
      StringOffset TextLocalizeKeyOffset = default(StringOffset),
      VectorOffset VoiceIdOffset = default(VectorOffset),
      bool OperatorWaitQueue = false) {
    builder.StartTable(12);
    OperatorExcel.AddUniqueId(builder, UniqueId);
    OperatorExcel.AddVoiceId(builder, VoiceIdOffset);
    OperatorExcel.AddTextLocalizeKey(builder, TextLocalizeKeyOffset);
    OperatorExcel.AddPortraitPath(builder, PortraitPathOffset);
    OperatorExcel.AddOperatorOutputPriority(builder, OperatorOutputPriority);
    OperatorExcel.AddDuration(builder, Duration);
    OperatorExcel.AddOutputDelay(builder, OutputDelay);
    OperatorExcel.AddRandomWeight(builder, RandomWeight);
    OperatorExcel.AddOutputSequence(builder, OutputSequence);
    OperatorExcel.AddOperatorCondition(builder, operatorCondition);
    OperatorExcel.AddGroupId(builder, GroupIdOffset);
    OperatorExcel.AddOperatorWaitQueue(builder, OperatorWaitQueue);
    return OperatorExcel.EndOperatorExcel(builder);
  }

  public static void StartOperatorExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, StringOffset GroupIdOffset) { builder.AddOffset(1, GroupIdOffset.Value, 0); }
  public static void AddOperatorCondition(FlatBufferBuilder builder, FlatDataJp.OperatorCondition operatorCondition) { builder.AddInt(2, (int)operatorCondition, 0); }
  public static void AddOutputSequence(FlatBufferBuilder builder, int OutputSequence) { builder.AddInt(3, OutputSequence, 0); }
  public static void AddRandomWeight(FlatBufferBuilder builder, int RandomWeight) { builder.AddInt(4, RandomWeight, 0); }
  public static void AddOutputDelay(FlatBufferBuilder builder, int OutputDelay) { builder.AddInt(5, OutputDelay, 0); }
  public static void AddDuration(FlatBufferBuilder builder, int Duration) { builder.AddInt(6, Duration, 0); }
  public static void AddOperatorOutputPriority(FlatBufferBuilder builder, int OperatorOutputPriority) { builder.AddInt(7, OperatorOutputPriority, 0); }
  public static void AddPortraitPath(FlatBufferBuilder builder, StringOffset PortraitPathOffset) { builder.AddOffset(8, PortraitPathOffset.Value, 0); }
  public static void AddTextLocalizeKey(FlatBufferBuilder builder, StringOffset TextLocalizeKeyOffset) { builder.AddOffset(9, TextLocalizeKeyOffset.Value, 0); }
  public static void AddVoiceId(FlatBufferBuilder builder, VectorOffset VoiceIdOffset) { builder.AddOffset(10, VoiceIdOffset.Value, 0); }
  public static VectorOffset CreateVoiceIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVoiceIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOperatorWaitQueue(FlatBufferBuilder builder, bool OperatorWaitQueue) { builder.AddBool(11, OperatorWaitQueue, false); }
  public static Offset<FlatDataJp.OperatorExcel> EndOperatorExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.OperatorExcel>(o);
  }
}


}
