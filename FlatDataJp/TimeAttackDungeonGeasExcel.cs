// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TimeAttackDungeonGeasExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static TimeAttackDungeonGeasExcel GetRootAsTimeAttackDungeonGeasExcel(ByteBuffer _bb) { return GetRootAsTimeAttackDungeonGeasExcel(_bb, new TimeAttackDungeonGeasExcel()); }
  public static TimeAttackDungeonGeasExcel GetRootAsTimeAttackDungeonGeasExcel(ByteBuffer _bb, TimeAttackDungeonGeasExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeAttackDungeonGeasExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.TimeAttackDungeonType TimeAttackDungeonType { get { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.TimeAttackDungeonType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.TimeAttackDungeonType.None; } }
  public uint LocalizeEtcKey { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long BattleDuration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearDefaultPoint { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearTimeWeightPoint { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TimeWeightConst { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Difficulty { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommandLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long GroundId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string AllyPassiveSkillId(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllyPassiveSkillIdLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int AllyPassiveSkillLevel(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AllyPassiveSkillLevelLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAllyPassiveSkillLevelBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetAllyPassiveSkillLevelBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetAllyPassiveSkillLevelArray() { return __p.__vector_as_array<int>(26); }
  public string EnemyPassiveSkillId(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EnemyPassiveSkillIdLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int EnemyPassiveSkillLevel(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EnemyPassiveSkillLevelLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEnemyPassiveSkillLevelBytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetEnemyPassiveSkillLevelBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetEnemyPassiveSkillLevelArray() { return __p.__vector_as_array<int>(30); }
  public string GeasIconPath(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GeasIconPathLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint GeasLocalizeEtcKey(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int GeasLocalizeEtcKeyLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetGeasLocalizeEtcKeyBytes() { return __p.__vector_as_span<uint>(34, 4); }
#else
  public ArraySegment<byte>? GetGeasLocalizeEtcKeyBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public uint[] GetGeasLocalizeEtcKeyArray() { return __p.__vector_as_array<uint>(34); }

  public static Offset<FlatDataJp.TimeAttackDungeonGeasExcel> CreateTimeAttackDungeonGeasExcel(FlatBufferBuilder builder,
      long Id = 0,
      FlatDataJp.TimeAttackDungeonType TimeAttackDungeonType = FlatDataJp.TimeAttackDungeonType.None,
      uint LocalizeEtcKey = 0,
      long BattleDuration = 0,
      long ClearDefaultPoint = 0,
      long ClearTimeWeightPoint = 0,
      long TimeWeightConst = 0,
      int Difficulty = 0,
      int RecommandLevel = 0,
      long GroundId = 0,
      VectorOffset AllyPassiveSkillIdOffset = default(VectorOffset),
      VectorOffset AllyPassiveSkillLevelOffset = default(VectorOffset),
      VectorOffset EnemyPassiveSkillIdOffset = default(VectorOffset),
      VectorOffset EnemyPassiveSkillLevelOffset = default(VectorOffset),
      VectorOffset GeasIconPathOffset = default(VectorOffset),
      VectorOffset GeasLocalizeEtcKeyOffset = default(VectorOffset)) {
    builder.StartTable(16);
    TimeAttackDungeonGeasExcel.AddGroundId(builder, GroundId);
    TimeAttackDungeonGeasExcel.AddTimeWeightConst(builder, TimeWeightConst);
    TimeAttackDungeonGeasExcel.AddClearTimeWeightPoint(builder, ClearTimeWeightPoint);
    TimeAttackDungeonGeasExcel.AddClearDefaultPoint(builder, ClearDefaultPoint);
    TimeAttackDungeonGeasExcel.AddBattleDuration(builder, BattleDuration);
    TimeAttackDungeonGeasExcel.AddId(builder, Id);
    TimeAttackDungeonGeasExcel.AddGeasLocalizeEtcKey(builder, GeasLocalizeEtcKeyOffset);
    TimeAttackDungeonGeasExcel.AddGeasIconPath(builder, GeasIconPathOffset);
    TimeAttackDungeonGeasExcel.AddEnemyPassiveSkillLevel(builder, EnemyPassiveSkillLevelOffset);
    TimeAttackDungeonGeasExcel.AddEnemyPassiveSkillId(builder, EnemyPassiveSkillIdOffset);
    TimeAttackDungeonGeasExcel.AddAllyPassiveSkillLevel(builder, AllyPassiveSkillLevelOffset);
    TimeAttackDungeonGeasExcel.AddAllyPassiveSkillId(builder, AllyPassiveSkillIdOffset);
    TimeAttackDungeonGeasExcel.AddRecommandLevel(builder, RecommandLevel);
    TimeAttackDungeonGeasExcel.AddDifficulty(builder, Difficulty);
    TimeAttackDungeonGeasExcel.AddLocalizeEtcKey(builder, LocalizeEtcKey);
    TimeAttackDungeonGeasExcel.AddTimeAttackDungeonType(builder, TimeAttackDungeonType);
    return TimeAttackDungeonGeasExcel.EndTimeAttackDungeonGeasExcel(builder);
  }

  public static void StartTimeAttackDungeonGeasExcel(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddTimeAttackDungeonType(FlatBufferBuilder builder, FlatDataJp.TimeAttackDungeonType TimeAttackDungeonType) { builder.AddInt(1, (int)TimeAttackDungeonType, 0); }
  public static void AddLocalizeEtcKey(FlatBufferBuilder builder, uint LocalizeEtcKey) { builder.AddUint(2, LocalizeEtcKey, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long BattleDuration) { builder.AddLong(3, BattleDuration, 0); }
  public static void AddClearDefaultPoint(FlatBufferBuilder builder, long ClearDefaultPoint) { builder.AddLong(4, ClearDefaultPoint, 0); }
  public static void AddClearTimeWeightPoint(FlatBufferBuilder builder, long ClearTimeWeightPoint) { builder.AddLong(5, ClearTimeWeightPoint, 0); }
  public static void AddTimeWeightConst(FlatBufferBuilder builder, long TimeWeightConst) { builder.AddLong(6, TimeWeightConst, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, int Difficulty) { builder.AddInt(7, Difficulty, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int RecommandLevel) { builder.AddInt(8, RecommandLevel, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long GroundId) { builder.AddLong(9, GroundId, 0); }
  public static void AddAllyPassiveSkillId(FlatBufferBuilder builder, VectorOffset AllyPassiveSkillIdOffset) { builder.AddOffset(10, AllyPassiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreateAllyPassiveSkillIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllyPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllyPassiveSkillLevel(FlatBufferBuilder builder, VectorOffset AllyPassiveSkillLevelOffset) { builder.AddOffset(11, AllyPassiveSkillLevelOffset.Value, 0); }
  public static VectorOffset CreateAllyPassiveSkillLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllyPassiveSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyPassiveSkillId(FlatBufferBuilder builder, VectorOffset EnemyPassiveSkillIdOffset) { builder.AddOffset(12, EnemyPassiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreateEnemyPassiveSkillIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyPassiveSkillLevel(FlatBufferBuilder builder, VectorOffset EnemyPassiveSkillLevelOffset) { builder.AddOffset(13, EnemyPassiveSkillLevelOffset.Value, 0); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyPassiveSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGeasIconPath(FlatBufferBuilder builder, VectorOffset GeasIconPathOffset) { builder.AddOffset(14, GeasIconPathOffset.Value, 0); }
  public static VectorOffset CreateGeasIconPathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGeasIconPathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGeasIconPathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGeasIconPathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGeasIconPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGeasLocalizeEtcKey(FlatBufferBuilder builder, VectorOffset GeasLocalizeEtcKeyOffset) { builder.AddOffset(15, GeasLocalizeEtcKeyOffset.Value, 0); }
  public static VectorOffset CreateGeasLocalizeEtcKeyVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGeasLocalizeEtcKeyVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGeasLocalizeEtcKeyVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGeasLocalizeEtcKeyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGeasLocalizeEtcKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatDataJp.TimeAttackDungeonGeasExcel> EndTimeAttackDungeonGeasExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.TimeAttackDungeonGeasExcel>(o);
  }
}


}
