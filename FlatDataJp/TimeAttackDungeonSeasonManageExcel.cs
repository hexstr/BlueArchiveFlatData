// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TimeAttackDungeonSeasonManageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static TimeAttackDungeonSeasonManageExcel GetRootAsTimeAttackDungeonSeasonManageExcel(ByteBuffer _bb) { return GetRootAsTimeAttackDungeonSeasonManageExcel(_bb, new TimeAttackDungeonSeasonManageExcel()); }
  public static TimeAttackDungeonSeasonManageExcel GetRootAsTimeAttackDungeonSeasonManageExcel(ByteBuffer _bb, TimeAttackDungeonSeasonManageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeAttackDungeonSeasonManageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StartDate { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartDateBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStartDateBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStartDateArray() { return __p.__vector_as_array<byte>(6); }
  public string EndDate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndDateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEndDateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEndDateArray() { return __p.__vector_as_array<byte>(8); }
  public long DungeonId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DifficultyGeas(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int DifficultyGeasLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetDifficultyGeasBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetDifficultyGeasBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetDifficultyGeasArray() { return __p.__vector_as_array<long>(12); }
  public long TimeAttackDungeonRewardId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RoomLifeTimeInSeconds { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.TimeAttackDungeonSeasonManageExcel> CreateTimeAttackDungeonSeasonManageExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset StartDateOffset = default(StringOffset),
      StringOffset EndDateOffset = default(StringOffset),
      long DungeonId = 0,
      VectorOffset DifficultyGeasOffset = default(VectorOffset),
      long TimeAttackDungeonRewardId = 0,
      long RoomLifeTimeInSeconds = 0) {
    builder.StartTable(7);
    TimeAttackDungeonSeasonManageExcel.AddRoomLifeTimeInSeconds(builder, RoomLifeTimeInSeconds);
    TimeAttackDungeonSeasonManageExcel.AddTimeAttackDungeonRewardId(builder, TimeAttackDungeonRewardId);
    TimeAttackDungeonSeasonManageExcel.AddDungeonId(builder, DungeonId);
    TimeAttackDungeonSeasonManageExcel.AddId(builder, Id);
    TimeAttackDungeonSeasonManageExcel.AddDifficultyGeas(builder, DifficultyGeasOffset);
    TimeAttackDungeonSeasonManageExcel.AddEndDate(builder, EndDateOffset);
    TimeAttackDungeonSeasonManageExcel.AddStartDate(builder, StartDateOffset);
    return TimeAttackDungeonSeasonManageExcel.EndTimeAttackDungeonSeasonManageExcel(builder);
  }

  public static void StartTimeAttackDungeonSeasonManageExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddStartDate(FlatBufferBuilder builder, StringOffset StartDateOffset) { builder.AddOffset(1, StartDateOffset.Value, 0); }
  public static void AddEndDate(FlatBufferBuilder builder, StringOffset EndDateOffset) { builder.AddOffset(2, EndDateOffset.Value, 0); }
  public static void AddDungeonId(FlatBufferBuilder builder, long DungeonId) { builder.AddLong(3, DungeonId, 0); }
  public static void AddDifficultyGeas(FlatBufferBuilder builder, VectorOffset DifficultyGeasOffset) { builder.AddOffset(4, DifficultyGeasOffset.Value, 0); }
  public static VectorOffset CreateDifficultyGeasVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyGeasVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyGeasVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDifficultyGeasVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDifficultyGeasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTimeAttackDungeonRewardId(FlatBufferBuilder builder, long TimeAttackDungeonRewardId) { builder.AddLong(5, TimeAttackDungeonRewardId, 0); }
  public static void AddRoomLifeTimeInSeconds(FlatBufferBuilder builder, long RoomLifeTimeInSeconds) { builder.AddLong(6, RoomLifeTimeInSeconds, 0); }
  public static Offset<FlatDataJp.TimeAttackDungeonSeasonManageExcel> EndTimeAttackDungeonSeasonManageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.TimeAttackDungeonSeasonManageExcel>(o);
  }
}


}
