// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldInteractionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static FieldInteractionExcel GetRootAsFieldInteractionExcel(ByteBuffer _bb) { return GetRootAsFieldInteractionExcel(_bb, new FieldInteractionExcel()); }
  public static FieldInteractionExcel GetRootAsFieldInteractionExcel(ByteBuffer _bb, FieldInteractionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldInteractionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FieldDateId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool ShowEmoji { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string KeywordLocalize { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeywordLocalizeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetKeywordLocalizeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetKeywordLocalizeArray() { return __p.__vector_as_array<byte>(10); }
  public long FieldSeasonId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.FieldInteractionType InteractionType(int j) { int o = __p.__offset(14); return o != 0 ? (FlatDataJp.FieldInteractionType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.FieldInteractionType)0; }
  public int InteractionTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.FieldInteractionType> GetInteractionTypeBytes() { return __p.__vector_as_span<FlatDataJp.FieldInteractionType>(14, 4); }
#else
  public ArraySegment<byte>? GetInteractionTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public FlatDataJp.FieldInteractionType[] GetInteractionTypeArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.FieldInteractionType[] a = new FlatDataJp.FieldInteractionType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.FieldInteractionType)__p.bb.GetInt(p + i * 4); } return a; }
  public long InteractionId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int InteractionIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetInteractionIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetInteractionIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetInteractionIdArray() { return __p.__vector_as_array<long>(16); }
  public FlatDataJp.FieldConditionClass ConditionClass { get { int o = __p.__offset(18); return o != 0 ? (FlatDataJp.FieldConditionClass)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.FieldConditionClass.AndOr; } }
  public long ConditionClassParameters(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionClassParametersLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionClassParametersBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetConditionClassParametersBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetConditionClassParametersArray() { return __p.__vector_as_array<long>(20); }
  public bool OnceOnly { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long ConditionIndex(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionIndexLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionIndexBytes() { return __p.__vector_as_span<long>(24, 8); }
#else
  public ArraySegment<byte>? GetConditionIndexBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public long[] GetConditionIndexArray() { return __p.__vector_as_array<long>(24); }
  public FlatDataJp.FieldConditionType ConditionType(int j) { int o = __p.__offset(26); return o != 0 ? (FlatDataJp.FieldConditionType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.FieldConditionType)0; }
  public int ConditionTypeLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.FieldConditionType> GetConditionTypeBytes() { return __p.__vector_as_span<FlatDataJp.FieldConditionType>(26, 4); }
#else
  public ArraySegment<byte>? GetConditionTypeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public FlatDataJp.FieldConditionType[] GetConditionTypeArray() { int o = __p.__offset(26); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.FieldConditionType[] a = new FlatDataJp.FieldConditionType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.FieldConditionType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ConditionId(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionIdLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionIdBytes() { return __p.__vector_as_span<long>(28, 8); }
#else
  public ArraySegment<byte>? GetConditionIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public long[] GetConditionIdArray() { return __p.__vector_as_array<long>(28); }
  public bool NegateCondition(int j) { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int NegateConditionLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetNegateConditionBytes() { return __p.__vector_as_span<bool>(30, 1); }
#else
  public ArraySegment<byte>? GetNegateConditionBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public bool[] GetNegateConditionArray() { return __p.__vector_as_array<bool>(30); }

  public static Offset<FlatDataJp.FieldInteractionExcel> CreateFieldInteractionExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long FieldDateId = 0,
      bool ShowEmoji = false,
      StringOffset KeywordLocalizeOffset = default(StringOffset),
      long FieldSeasonId = 0,
      VectorOffset InteractionTypeOffset = default(VectorOffset),
      VectorOffset InteractionIdOffset = default(VectorOffset),
      FlatDataJp.FieldConditionClass ConditionClass = FlatDataJp.FieldConditionClass.AndOr,
      VectorOffset ConditionClassParametersOffset = default(VectorOffset),
      bool OnceOnly = false,
      VectorOffset ConditionIndexOffset = default(VectorOffset),
      VectorOffset ConditionTypeOffset = default(VectorOffset),
      VectorOffset ConditionIdOffset = default(VectorOffset),
      VectorOffset NegateConditionOffset = default(VectorOffset)) {
    builder.StartTable(14);
    FieldInteractionExcel.AddFieldSeasonId(builder, FieldSeasonId);
    FieldInteractionExcel.AddFieldDateId(builder, FieldDateId);
    FieldInteractionExcel.AddUniqueId(builder, UniqueId);
    FieldInteractionExcel.AddNegateCondition(builder, NegateConditionOffset);
    FieldInteractionExcel.AddConditionId(builder, ConditionIdOffset);
    FieldInteractionExcel.AddConditionType(builder, ConditionTypeOffset);
    FieldInteractionExcel.AddConditionIndex(builder, ConditionIndexOffset);
    FieldInteractionExcel.AddConditionClassParameters(builder, ConditionClassParametersOffset);
    FieldInteractionExcel.AddConditionClass(builder, ConditionClass);
    FieldInteractionExcel.AddInteractionId(builder, InteractionIdOffset);
    FieldInteractionExcel.AddInteractionType(builder, InteractionTypeOffset);
    FieldInteractionExcel.AddKeywordLocalize(builder, KeywordLocalizeOffset);
    FieldInteractionExcel.AddOnceOnly(builder, OnceOnly);
    FieldInteractionExcel.AddShowEmoji(builder, ShowEmoji);
    return FieldInteractionExcel.EndFieldInteractionExcel(builder);
  }

  public static void StartFieldInteractionExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddFieldDateId(FlatBufferBuilder builder, long FieldDateId) { builder.AddLong(1, FieldDateId, 0); }
  public static void AddShowEmoji(FlatBufferBuilder builder, bool ShowEmoji) { builder.AddBool(2, ShowEmoji, false); }
  public static void AddKeywordLocalize(FlatBufferBuilder builder, StringOffset KeywordLocalizeOffset) { builder.AddOffset(3, KeywordLocalizeOffset.Value, 0); }
  public static void AddFieldSeasonId(FlatBufferBuilder builder, long FieldSeasonId) { builder.AddLong(4, FieldSeasonId, 0); }
  public static void AddInteractionType(FlatBufferBuilder builder, VectorOffset InteractionTypeOffset) { builder.AddOffset(5, InteractionTypeOffset.Value, 0); }
  public static VectorOffset CreateInteractionTypeVector(FlatBufferBuilder builder, FlatDataJp.FieldInteractionType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInteractionTypeVectorBlock(FlatBufferBuilder builder, FlatDataJp.FieldInteractionType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInteractionTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.FieldInteractionType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInteractionTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.FieldInteractionType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInteractionTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInteractionId(FlatBufferBuilder builder, VectorOffset InteractionIdOffset) { builder.AddOffset(6, InteractionIdOffset.Value, 0); }
  public static VectorOffset CreateInteractionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInteractionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInteractionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInteractionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInteractionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddConditionClass(FlatBufferBuilder builder, FlatDataJp.FieldConditionClass ConditionClass) { builder.AddInt(7, (int)ConditionClass, 0); }
  public static void AddConditionClassParameters(FlatBufferBuilder builder, VectorOffset ConditionClassParametersOffset) { builder.AddOffset(8, ConditionClassParametersOffset.Value, 0); }
  public static VectorOffset CreateConditionClassParametersVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionClassParametersVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionClassParametersVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionClassParametersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionClassParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddOnceOnly(FlatBufferBuilder builder, bool OnceOnly) { builder.AddBool(9, OnceOnly, false); }
  public static void AddConditionIndex(FlatBufferBuilder builder, VectorOffset ConditionIndexOffset) { builder.AddOffset(10, ConditionIndexOffset.Value, 0); }
  public static VectorOffset CreateConditionIndexVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionIndexVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddConditionType(FlatBufferBuilder builder, VectorOffset ConditionTypeOffset) { builder.AddOffset(11, ConditionTypeOffset.Value, 0); }
  public static VectorOffset CreateConditionTypeVector(FlatBufferBuilder builder, FlatDataJp.FieldConditionType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, FlatDataJp.FieldConditionType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.FieldConditionType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.FieldConditionType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionId(FlatBufferBuilder builder, VectorOffset ConditionIdOffset) { builder.AddOffset(12, ConditionIdOffset.Value, 0); }
  public static VectorOffset CreateConditionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddNegateCondition(FlatBufferBuilder builder, VectorOffset NegateConditionOffset) { builder.AddOffset(13, NegateConditionOffset.Value, 0); }
  public static VectorOffset CreateNegateConditionVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNegateConditionVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNegateConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNegateConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNegateConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<FlatDataJp.FieldInteractionExcel> EndFieldInteractionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.FieldInteractionExcel>(o);
  }
}


}
