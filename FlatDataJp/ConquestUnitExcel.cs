// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ConquestUnitExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ConquestUnitExcel GetRootAsConquestUnitExcel(ByteBuffer _bb) { return GetRootAsConquestUnitExcel(_bb, new ConquestUnitExcel()); }
  public static ConquestUnitExcel GetRootAsConquestUnitExcel(ByteBuffer _bb, ConquestUnitExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestUnitExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint Key { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string PrefabName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(10); }
  public float Scale { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ShieldEffectScale { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string UnitFxPrefabName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnitFxPrefabNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetUnitFxPrefabNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetUnitFxPrefabNameArray() { return __p.__vector_as_array<byte>(16); }
  public string PointAnimation { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPointAnimationBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPointAnimationBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPointAnimationArray() { return __p.__vector_as_array<byte>(18); }
  public FlatDataJp.ConquestEnemyType EnemyType { get { int o = __p.__offset(20); return o != 0 ? (FlatDataJp.ConquestEnemyType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ConquestEnemyType.None; } }
  public FlatDataJp.ConquestTeamType Team { get { int o = __p.__offset(22); return o != 0 ? (FlatDataJp.ConquestTeamType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ConquestTeamType.None; } }
  public long UnitGroup { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PrevUnitGroup { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BattleDuration { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroundId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.StarGoalType StarGoal(int j) { int o = __p.__offset(32); return o != 0 ? (FlatDataJp.StarGoalType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.StarGoalType)0; }
  public int StarGoalLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.StarGoalType> GetStarGoalBytes() { return __p.__vector_as_span<FlatDataJp.StarGoalType>(32, 4); }
#else
  public ArraySegment<byte>? GetStarGoalBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public FlatDataJp.StarGoalType[] GetStarGoalArray() { int o = __p.__offset(32); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.StarGoalType[] a = new FlatDataJp.StarGoalType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.StarGoalType)__p.bb.GetInt(p + i * 4); } return a; }
  public int StarGoalAmount(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StarGoalAmountLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStarGoalAmountBytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetStarGoalAmountBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetStarGoalAmountArray() { return __p.__vector_as_array<int>(34); }
  public long GroupBuffId { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.ParcelType StageEnterCostType { get { int o = __p.__offset(38); return o != 0 ? (FlatDataJp.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataJp.ParcelType ManageEchelonStageEnterCostType { get { int o = __p.__offset(44); return o != 0 ? (FlatDataJp.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ParcelType.None; } }
  public long ManageEchelonStageEnterCostId { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ManageEchelonStageEnterCostAmount { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EnterScenarioGroupId { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearScenarioGroupId { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ConquestRewardId { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.StageTopography StageTopography { get { int o = __p.__offset(56); return o != 0 ? (FlatDataJp.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long TacticRewardExp { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FixedEchelonId { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.ConquestUnitExcel> CreateConquestUnitExcel(FlatBufferBuilder builder,
      long Id = 0,
      uint Key = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset PrefabNameOffset = default(StringOffset),
      float Scale = 0.0f,
      float ShieldEffectScale = 0.0f,
      StringOffset UnitFxPrefabNameOffset = default(StringOffset),
      StringOffset PointAnimationOffset = default(StringOffset),
      FlatDataJp.ConquestEnemyType EnemyType = FlatDataJp.ConquestEnemyType.None,
      FlatDataJp.ConquestTeamType Team = FlatDataJp.ConquestTeamType.None,
      long UnitGroup = 0,
      long PrevUnitGroup = 0,
      long BattleDuration = 0,
      long GroundId = 0,
      VectorOffset StarGoalOffset = default(VectorOffset),
      VectorOffset StarGoalAmountOffset = default(VectorOffset),
      long GroupBuffId = 0,
      FlatDataJp.ParcelType StageEnterCostType = FlatDataJp.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      FlatDataJp.ParcelType ManageEchelonStageEnterCostType = FlatDataJp.ParcelType.None,
      long ManageEchelonStageEnterCostId = 0,
      int ManageEchelonStageEnterCostAmount = 0,
      long EnterScenarioGroupId = 0,
      long ClearScenarioGroupId = 0,
      long ConquestRewardId = 0,
      FlatDataJp.StageTopography StageTopography = FlatDataJp.StageTopography.Street,
      int RecommandLevel = 0,
      long TacticRewardExp = 0,
      long FixedEchelonId = 0) {
    builder.StartTable(30);
    ConquestUnitExcel.AddFixedEchelonId(builder, FixedEchelonId);
    ConquestUnitExcel.AddTacticRewardExp(builder, TacticRewardExp);
    ConquestUnitExcel.AddConquestRewardId(builder, ConquestRewardId);
    ConquestUnitExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupId);
    ConquestUnitExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId);
    ConquestUnitExcel.AddManageEchelonStageEnterCostId(builder, ManageEchelonStageEnterCostId);
    ConquestUnitExcel.AddStageEnterCostId(builder, StageEnterCostId);
    ConquestUnitExcel.AddGroupBuffId(builder, GroupBuffId);
    ConquestUnitExcel.AddGroundId(builder, GroundId);
    ConquestUnitExcel.AddBattleDuration(builder, BattleDuration);
    ConquestUnitExcel.AddPrevUnitGroup(builder, PrevUnitGroup);
    ConquestUnitExcel.AddUnitGroup(builder, UnitGroup);
    ConquestUnitExcel.AddId(builder, Id);
    ConquestUnitExcel.AddRecommandLevel(builder, RecommandLevel);
    ConquestUnitExcel.AddStageTopography(builder, StageTopography);
    ConquestUnitExcel.AddManageEchelonStageEnterCostAmount(builder, ManageEchelonStageEnterCostAmount);
    ConquestUnitExcel.AddManageEchelonStageEnterCostType(builder, ManageEchelonStageEnterCostType);
    ConquestUnitExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    ConquestUnitExcel.AddStageEnterCostType(builder, StageEnterCostType);
    ConquestUnitExcel.AddStarGoalAmount(builder, StarGoalAmountOffset);
    ConquestUnitExcel.AddStarGoal(builder, StarGoalOffset);
    ConquestUnitExcel.AddTeam(builder, Team);
    ConquestUnitExcel.AddEnemyType(builder, EnemyType);
    ConquestUnitExcel.AddPointAnimation(builder, PointAnimationOffset);
    ConquestUnitExcel.AddUnitFxPrefabName(builder, UnitFxPrefabNameOffset);
    ConquestUnitExcel.AddShieldEffectScale(builder, ShieldEffectScale);
    ConquestUnitExcel.AddScale(builder, Scale);
    ConquestUnitExcel.AddPrefabName(builder, PrefabNameOffset);
    ConquestUnitExcel.AddName(builder, NameOffset);
    ConquestUnitExcel.AddKey(builder, Key);
    return ConquestUnitExcel.EndConquestUnitExcel(builder);
  }

  public static void StartConquestUnitExcel(FlatBufferBuilder builder) { builder.StartTable(30); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddKey(FlatBufferBuilder builder, uint Key) { builder.AddUint(1, Key, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(2, NameOffset.Value, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(3, PrefabNameOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, float Scale) { builder.AddFloat(4, Scale, 0.0f); }
  public static void AddShieldEffectScale(FlatBufferBuilder builder, float ShieldEffectScale) { builder.AddFloat(5, ShieldEffectScale, 0.0f); }
  public static void AddUnitFxPrefabName(FlatBufferBuilder builder, StringOffset UnitFxPrefabNameOffset) { builder.AddOffset(6, UnitFxPrefabNameOffset.Value, 0); }
  public static void AddPointAnimation(FlatBufferBuilder builder, StringOffset PointAnimationOffset) { builder.AddOffset(7, PointAnimationOffset.Value, 0); }
  public static void AddEnemyType(FlatBufferBuilder builder, FlatDataJp.ConquestEnemyType EnemyType) { builder.AddInt(8, (int)EnemyType, 0); }
  public static void AddTeam(FlatBufferBuilder builder, FlatDataJp.ConquestTeamType Team) { builder.AddInt(9, (int)Team, 0); }
  public static void AddUnitGroup(FlatBufferBuilder builder, long UnitGroup) { builder.AddLong(10, UnitGroup, 0); }
  public static void AddPrevUnitGroup(FlatBufferBuilder builder, long PrevUnitGroup) { builder.AddLong(11, PrevUnitGroup, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long BattleDuration) { builder.AddLong(12, BattleDuration, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long GroundId) { builder.AddLong(13, GroundId, 0); }
  public static void AddStarGoal(FlatBufferBuilder builder, VectorOffset StarGoalOffset) { builder.AddOffset(14, StarGoalOffset.Value, 0); }
  public static VectorOffset CreateStarGoalVector(FlatBufferBuilder builder, FlatDataJp.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, FlatDataJp.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.StarGoalType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.StarGoalType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStarGoalAmount(FlatBufferBuilder builder, VectorOffset StarGoalAmountOffset) { builder.AddOffset(15, StarGoalAmountOffset.Value, 0); }
  public static VectorOffset CreateStarGoalAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGroupBuffId(FlatBufferBuilder builder, long GroupBuffId) { builder.AddLong(16, GroupBuffId, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, FlatDataJp.ParcelType StageEnterCostType) { builder.AddInt(17, (int)StageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long StageEnterCostId) { builder.AddLong(18, StageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int StageEnterCostAmount) { builder.AddInt(19, StageEnterCostAmount, 0); }
  public static void AddManageEchelonStageEnterCostType(FlatBufferBuilder builder, FlatDataJp.ParcelType ManageEchelonStageEnterCostType) { builder.AddInt(20, (int)ManageEchelonStageEnterCostType, 0); }
  public static void AddManageEchelonStageEnterCostId(FlatBufferBuilder builder, long ManageEchelonStageEnterCostId) { builder.AddLong(21, ManageEchelonStageEnterCostId, 0); }
  public static void AddManageEchelonStageEnterCostAmount(FlatBufferBuilder builder, int ManageEchelonStageEnterCostAmount) { builder.AddInt(22, ManageEchelonStageEnterCostAmount, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, long EnterScenarioGroupId) { builder.AddLong(23, EnterScenarioGroupId, 0); }
  public static void AddClearScenarioGroupId(FlatBufferBuilder builder, long ClearScenarioGroupId) { builder.AddLong(24, ClearScenarioGroupId, 0); }
  public static void AddConquestRewardId(FlatBufferBuilder builder, long ConquestRewardId) { builder.AddLong(25, ConquestRewardId, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, FlatDataJp.StageTopography StageTopography) { builder.AddInt(26, (int)StageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int RecommandLevel) { builder.AddInt(27, RecommandLevel, 0); }
  public static void AddTacticRewardExp(FlatBufferBuilder builder, long TacticRewardExp) { builder.AddLong(28, TacticRewardExp, 0); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long FixedEchelonId) { builder.AddLong(29, FixedEchelonId, 0); }
  public static Offset<FlatDataJp.ConquestUnitExcel> EndConquestUnitExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.ConquestUnitExcel>(o);
  }
}


}
