// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EmblemExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static EmblemExcel GetRootAsEmblemExcel(ByteBuffer _bb) { return GetRootAsEmblemExcel(_bb, new EmblemExcel()); }
  public static EmblemExcel GetRootAsEmblemExcel(ByteBuffer _bb, EmblemExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmblemExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.EmblemCategory Category { get { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.EmblemCategory)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.EmblemCategory.None; } }
  public FlatDataJp.Rarity Rarity { get { int o = __p.__offset(8); return o != 0 ? (FlatDataJp.Rarity)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.Rarity.N; } }
  public long DisplayOrder { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint LocalizeCodeId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long UseAtLocalizeId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool EmblemTextVisible { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string IconPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(20); }
  public string EmblemIconPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemIconPathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetEmblemIconPathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetEmblemIconPathArray() { return __p.__vector_as_array<byte>(22); }
  public string EmblemIconBGPath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemIconBGPathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetEmblemIconBGPathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetEmblemIconBGPathArray() { return __p.__vector_as_array<byte>(24); }
  public string EmblemBGPathJp { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemBGPathJpBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEmblemBGPathJpBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEmblemBGPathJpArray() { return __p.__vector_as_array<byte>(26); }
  public string EmblemBGPathKr { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemBGPathKrBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetEmblemBGPathKrBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetEmblemBGPathKrArray() { return __p.__vector_as_array<byte>(28); }
  public FlatDataJp.EmblemDisplayType DisplayType { get { int o = __p.__offset(30); return o != 0 ? (FlatDataJp.EmblemDisplayType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.EmblemDisplayType.Always; } }
  public string DisplayStartDate { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayStartDateBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetDisplayStartDateBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetDisplayStartDateArray() { return __p.__vector_as_array<byte>(32); }
  public string DisplayEndDate { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayEndDateBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetDisplayEndDateBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetDisplayEndDateArray() { return __p.__vector_as_array<byte>(34); }
  public int DislpayFavorLevel { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataJp.EmblemCheckPassType CheckPassType { get { int o = __p.__offset(38); return o != 0 ? (FlatDataJp.EmblemCheckPassType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.EmblemCheckPassType.None; } }
  public long EmblemParameter { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CheckPassCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.EmblemExcel> CreateEmblemExcel(FlatBufferBuilder builder,
      long Id = 0,
      FlatDataJp.EmblemCategory Category = FlatDataJp.EmblemCategory.None,
      FlatDataJp.Rarity rarity = FlatDataJp.Rarity.N,
      long DisplayOrder = 0,
      uint LocalizeEtcId = 0,
      uint LocalizeCodeId = 0,
      long UseAtLocalizeId = 0,
      bool EmblemTextVisible = false,
      StringOffset IconPathOffset = default(StringOffset),
      StringOffset EmblemIconPathOffset = default(StringOffset),
      StringOffset EmblemIconBGPathOffset = default(StringOffset),
      StringOffset EmblemBGPathJpOffset = default(StringOffset),
      StringOffset EmblemBGPathKrOffset = default(StringOffset),
      FlatDataJp.EmblemDisplayType DisplayType = FlatDataJp.EmblemDisplayType.Always,
      StringOffset DisplayStartDateOffset = default(StringOffset),
      StringOffset DisplayEndDateOffset = default(StringOffset),
      int DislpayFavorLevel = 0,
      FlatDataJp.EmblemCheckPassType CheckPassType = FlatDataJp.EmblemCheckPassType.None,
      long EmblemParameter = 0,
      long CheckPassCount = 0) {
    builder.StartTable(20);
    EmblemExcel.AddCheckPassCount(builder, CheckPassCount);
    EmblemExcel.AddEmblemParameter(builder, EmblemParameter);
    EmblemExcel.AddUseAtLocalizeId(builder, UseAtLocalizeId);
    EmblemExcel.AddDisplayOrder(builder, DisplayOrder);
    EmblemExcel.AddId(builder, Id);
    EmblemExcel.AddCheckPassType(builder, CheckPassType);
    EmblemExcel.AddDislpayFavorLevel(builder, DislpayFavorLevel);
    EmblemExcel.AddDisplayEndDate(builder, DisplayEndDateOffset);
    EmblemExcel.AddDisplayStartDate(builder, DisplayStartDateOffset);
    EmblemExcel.AddDisplayType(builder, DisplayType);
    EmblemExcel.AddEmblemBGPathKr(builder, EmblemBGPathKrOffset);
    EmblemExcel.AddEmblemBGPathJp(builder, EmblemBGPathJpOffset);
    EmblemExcel.AddEmblemIconBGPath(builder, EmblemIconBGPathOffset);
    EmblemExcel.AddEmblemIconPath(builder, EmblemIconPathOffset);
    EmblemExcel.AddIconPath(builder, IconPathOffset);
    EmblemExcel.AddLocalizeCodeId(builder, LocalizeCodeId);
    EmblemExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    EmblemExcel.AddRarity(builder, rarity);
    EmblemExcel.AddCategory(builder, Category);
    EmblemExcel.AddEmblemTextVisible(builder, EmblemTextVisible);
    return EmblemExcel.EndEmblemExcel(builder);
  }

  public static void StartEmblemExcel(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddCategory(FlatBufferBuilder builder, FlatDataJp.EmblemCategory Category) { builder.AddInt(1, (int)Category, 0); }
  public static void AddRarity(FlatBufferBuilder builder, FlatDataJp.Rarity rarity) { builder.AddInt(2, (int)rarity, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long DisplayOrder) { builder.AddLong(3, DisplayOrder, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint LocalizeEtcId) { builder.AddUint(4, LocalizeEtcId, 0); }
  public static void AddLocalizeCodeId(FlatBufferBuilder builder, uint LocalizeCodeId) { builder.AddUint(5, LocalizeCodeId, 0); }
  public static void AddUseAtLocalizeId(FlatBufferBuilder builder, long UseAtLocalizeId) { builder.AddLong(6, UseAtLocalizeId, 0); }
  public static void AddEmblemTextVisible(FlatBufferBuilder builder, bool EmblemTextVisible) { builder.AddBool(7, EmblemTextVisible, false); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset IconPathOffset) { builder.AddOffset(8, IconPathOffset.Value, 0); }
  public static void AddEmblemIconPath(FlatBufferBuilder builder, StringOffset EmblemIconPathOffset) { builder.AddOffset(9, EmblemIconPathOffset.Value, 0); }
  public static void AddEmblemIconBGPath(FlatBufferBuilder builder, StringOffset EmblemIconBGPathOffset) { builder.AddOffset(10, EmblemIconBGPathOffset.Value, 0); }
  public static void AddEmblemBGPathJp(FlatBufferBuilder builder, StringOffset EmblemBGPathJpOffset) { builder.AddOffset(11, EmblemBGPathJpOffset.Value, 0); }
  public static void AddEmblemBGPathKr(FlatBufferBuilder builder, StringOffset EmblemBGPathKrOffset) { builder.AddOffset(12, EmblemBGPathKrOffset.Value, 0); }
  public static void AddDisplayType(FlatBufferBuilder builder, FlatDataJp.EmblemDisplayType DisplayType) { builder.AddInt(13, (int)DisplayType, 0); }
  public static void AddDisplayStartDate(FlatBufferBuilder builder, StringOffset DisplayStartDateOffset) { builder.AddOffset(14, DisplayStartDateOffset.Value, 0); }
  public static void AddDisplayEndDate(FlatBufferBuilder builder, StringOffset DisplayEndDateOffset) { builder.AddOffset(15, DisplayEndDateOffset.Value, 0); }
  public static void AddDislpayFavorLevel(FlatBufferBuilder builder, int DislpayFavorLevel) { builder.AddInt(16, DislpayFavorLevel, 0); }
  public static void AddCheckPassType(FlatBufferBuilder builder, FlatDataJp.EmblemCheckPassType CheckPassType) { builder.AddInt(17, (int)CheckPassType, 0); }
  public static void AddEmblemParameter(FlatBufferBuilder builder, long EmblemParameter) { builder.AddLong(18, EmblemParameter, 0); }
  public static void AddCheckPassCount(FlatBufferBuilder builder, long CheckPassCount) { builder.AddLong(19, CheckPassCount, 0); }
  public static Offset<FlatDataJp.EmblemExcel> EndEmblemExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.EmblemExcel>(o);
  }
}


}
