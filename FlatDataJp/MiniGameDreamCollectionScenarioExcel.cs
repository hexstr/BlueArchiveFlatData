// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameDreamCollectionScenarioExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameDreamCollectionScenarioExcel GetRootAsMiniGameDreamCollectionScenarioExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamCollectionScenarioExcel(_bb, new MiniGameDreamCollectionScenarioExcel()); }
  public static MiniGameDreamCollectionScenarioExcel GetRootAsMiniGameDreamCollectionScenarioExcel(ByteBuffer _bb, MiniGameDreamCollectionScenarioExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamCollectionScenarioExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsSkip { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long EventContentId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.DreamMakerParameterType Parameter(int j) { int o = __p.__offset(10); return o != 0 ? (FlatDataJp.DreamMakerParameterType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.DreamMakerParameterType)0; }
  public int ParameterLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.DreamMakerParameterType> GetParameterBytes() { return __p.__vector_as_span<FlatDataJp.DreamMakerParameterType>(10, 4); }
#else
  public ArraySegment<byte>? GetParameterBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public FlatDataJp.DreamMakerParameterType[] GetParameterArray() { int o = __p.__offset(10); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.DreamMakerParameterType[] a = new FlatDataJp.DreamMakerParameterType[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.DreamMakerParameterType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ParameterAmount(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ParameterAmountLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetParameterAmountBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetParameterAmountBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetParameterAmountArray() { return __p.__vector_as_array<long>(12); }
  public long ScenarioGroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.MiniGameDreamCollectionScenarioExcel> CreateMiniGameDreamCollectionScenarioExcel(FlatBufferBuilder builder,
      long Id = 0,
      bool IsSkip = false,
      long EventContentId = 0,
      VectorOffset ParameterOffset = default(VectorOffset),
      VectorOffset ParameterAmountOffset = default(VectorOffset),
      long ScenarioGroupId = 0) {
    builder.StartTable(6);
    MiniGameDreamCollectionScenarioExcel.AddScenarioGroupId(builder, ScenarioGroupId);
    MiniGameDreamCollectionScenarioExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamCollectionScenarioExcel.AddId(builder, Id);
    MiniGameDreamCollectionScenarioExcel.AddParameterAmount(builder, ParameterAmountOffset);
    MiniGameDreamCollectionScenarioExcel.AddParameter(builder, ParameterOffset);
    MiniGameDreamCollectionScenarioExcel.AddIsSkip(builder, IsSkip);
    return MiniGameDreamCollectionScenarioExcel.EndMiniGameDreamCollectionScenarioExcel(builder);
  }

  public static void StartMiniGameDreamCollectionScenarioExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddIsSkip(FlatBufferBuilder builder, bool IsSkip) { builder.AddBool(1, IsSkip, false); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(2, EventContentId, 0); }
  public static void AddParameter(FlatBufferBuilder builder, VectorOffset ParameterOffset) { builder.AddOffset(3, ParameterOffset.Value, 0); }
  public static VectorOffset CreateParameterVector(FlatBufferBuilder builder, FlatDataJp.DreamMakerParameterType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParameterVectorBlock(FlatBufferBuilder builder, FlatDataJp.DreamMakerParameterType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.DreamMakerParameterType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.DreamMakerParameterType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParameterAmount(FlatBufferBuilder builder, VectorOffset ParameterAmountOffset) { builder.AddOffset(4, ParameterAmountOffset.Value, 0); }
  public static VectorOffset CreateParameterAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParameterAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParameterAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParameterAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParameterAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddScenarioGroupId(FlatBufferBuilder builder, long ScenarioGroupId) { builder.AddLong(5, ScenarioGroupId, 0); }
  public static Offset<FlatDataJp.MiniGameDreamCollectionScenarioExcel> EndMiniGameDreamCollectionScenarioExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.MiniGameDreamCollectionScenarioExcel>(o);
  }
}


}
