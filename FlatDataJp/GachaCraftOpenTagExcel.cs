// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GachaCraftOpenTagExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static GachaCraftOpenTagExcel GetRootAsGachaCraftOpenTagExcel(ByteBuffer _bb) { return GetRootAsGachaCraftOpenTagExcel(_bb, new GachaCraftOpenTagExcel()); }
  public static GachaCraftOpenTagExcel GetRootAsGachaCraftOpenTagExcel(ByteBuffer _bb, GachaCraftOpenTagExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaCraftOpenTagExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatDataJp.CraftNodeTier NodeTier { get { int o = __p.__offset(4); return o != 0 ? (FlatDataJp.CraftNodeTier)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.CraftNodeTier.Base; } }
  public FlatDataJp.Tag Tag(int j) { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.Tag)0; }
  public int TagLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.Tag> GetTagBytes() { return __p.__vector_as_span<FlatDataJp.Tag>(6, 4); }
#else
  public ArraySegment<byte>? GetTagBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public FlatDataJp.Tag[] GetTagArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.Tag[] a = new FlatDataJp.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.Tag)__p.bb.GetInt(p + i * 4); } return a; }

  public static Offset<FlatDataJp.GachaCraftOpenTagExcel> CreateGachaCraftOpenTagExcel(FlatBufferBuilder builder,
      FlatDataJp.CraftNodeTier NodeTier = FlatDataJp.CraftNodeTier.Base,
      VectorOffset TagOffset = default(VectorOffset)) {
    builder.StartTable(2);
    GachaCraftOpenTagExcel.AddTag(builder, TagOffset);
    GachaCraftOpenTagExcel.AddNodeTier(builder, NodeTier);
    return GachaCraftOpenTagExcel.EndGachaCraftOpenTagExcel(builder);
  }

  public static void StartGachaCraftOpenTagExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddNodeTier(FlatBufferBuilder builder, FlatDataJp.CraftNodeTier NodeTier) { builder.AddInt(0, (int)NodeTier, 0); }
  public static void AddTag(FlatBufferBuilder builder, VectorOffset TagOffset) { builder.AddOffset(1, TagOffset.Value, 0); }
  public static VectorOffset CreateTagVector(FlatBufferBuilder builder, FlatDataJp.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, FlatDataJp.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatDataJp.GachaCraftOpenTagExcel> EndGachaCraftOpenTagExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.GachaCraftOpenTagExcel>(o);
  }
}


}
