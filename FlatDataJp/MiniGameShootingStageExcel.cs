// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameShootingStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MiniGameShootingStageExcel GetRootAsMiniGameShootingStageExcel(ByteBuffer _bb) { return GetRootAsMiniGameShootingStageExcel(_bb, new MiniGameShootingStageExcel()); }
  public static MiniGameShootingStageExcel GetRootAsMiniGameShootingStageExcel(ByteBuffer _bb, MiniGameShootingStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameShootingStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BgmId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CostGoodsId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.Difficulty Difficulty { get { int o = __p.__offset(10); return o != 0 ? (FlatDataJp.Difficulty)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.Difficulty.Normal; } }
  public string DesignLevel { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesignLevelBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDesignLevelBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDesignLevelArray() { return __p.__vector_as_array<byte>(12); }
  public string ArtLevel { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArtLevelBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetArtLevelBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetArtLevelArray() { return __p.__vector_as_array<byte>(14); }
  public long StartBattleDuration { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefaultBattleDuration { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DefaultLogicEffect { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefaultLogicEffectBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDefaultLogicEffectBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDefaultLogicEffectArray() { return __p.__vector_as_array<byte>(20); }
  public float CameraSizeRate { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long EventContentStageRewardId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.MiniGameShootingStageExcel> CreateMiniGameShootingStageExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long BgmId = 0,
      long CostGoodsId = 0,
      FlatDataJp.Difficulty difficulty = FlatDataJp.Difficulty.Normal,
      StringOffset DesignLevelOffset = default(StringOffset),
      StringOffset ArtLevelOffset = default(StringOffset),
      long StartBattleDuration = 0,
      long DefaultBattleDuration = 0,
      StringOffset DefaultLogicEffectOffset = default(StringOffset),
      float CameraSizeRate = 0.0f,
      long EventContentStageRewardId = 0) {
    builder.StartTable(11);
    MiniGameShootingStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId);
    MiniGameShootingStageExcel.AddDefaultBattleDuration(builder, DefaultBattleDuration);
    MiniGameShootingStageExcel.AddStartBattleDuration(builder, StartBattleDuration);
    MiniGameShootingStageExcel.AddCostGoodsId(builder, CostGoodsId);
    MiniGameShootingStageExcel.AddBgmId(builder, BgmId);
    MiniGameShootingStageExcel.AddUniqueId(builder, UniqueId);
    MiniGameShootingStageExcel.AddCameraSizeRate(builder, CameraSizeRate);
    MiniGameShootingStageExcel.AddDefaultLogicEffect(builder, DefaultLogicEffectOffset);
    MiniGameShootingStageExcel.AddArtLevel(builder, ArtLevelOffset);
    MiniGameShootingStageExcel.AddDesignLevel(builder, DesignLevelOffset);
    MiniGameShootingStageExcel.AddDifficulty(builder, difficulty);
    return MiniGameShootingStageExcel.EndMiniGameShootingStageExcel(builder);
  }

  public static void StartMiniGameShootingStageExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddBgmId(FlatBufferBuilder builder, long BgmId) { builder.AddLong(1, BgmId, 0); }
  public static void AddCostGoodsId(FlatBufferBuilder builder, long CostGoodsId) { builder.AddLong(2, CostGoodsId, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, FlatDataJp.Difficulty difficulty) { builder.AddInt(3, (int)difficulty, 0); }
  public static void AddDesignLevel(FlatBufferBuilder builder, StringOffset DesignLevelOffset) { builder.AddOffset(4, DesignLevelOffset.Value, 0); }
  public static void AddArtLevel(FlatBufferBuilder builder, StringOffset ArtLevelOffset) { builder.AddOffset(5, ArtLevelOffset.Value, 0); }
  public static void AddStartBattleDuration(FlatBufferBuilder builder, long StartBattleDuration) { builder.AddLong(6, StartBattleDuration, 0); }
  public static void AddDefaultBattleDuration(FlatBufferBuilder builder, long DefaultBattleDuration) { builder.AddLong(7, DefaultBattleDuration, 0); }
  public static void AddDefaultLogicEffect(FlatBufferBuilder builder, StringOffset DefaultLogicEffectOffset) { builder.AddOffset(8, DefaultLogicEffectOffset.Value, 0); }
  public static void AddCameraSizeRate(FlatBufferBuilder builder, float CameraSizeRate) { builder.AddFloat(9, CameraSizeRate, 0.0f); }
  public static void AddEventContentStageRewardId(FlatBufferBuilder builder, long EventContentStageRewardId) { builder.AddLong(10, EventContentStageRewardId, 0); }
  public static Offset<FlatDataJp.MiniGameShootingStageExcel> EndMiniGameShootingStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.MiniGameShootingStageExcel>(o);
  }
}


}
