// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameTBGThemaExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameTBGThemaExcel GetRootAsMinigameTBGThemaExcel(ByteBuffer _bb) { return GetRootAsMinigameTBGThemaExcel(_bb, new MinigameTBGThemaExcel()); }
  public static MinigameTBGThemaExcel GetRootAsMinigameTBGThemaExcel(ByteBuffer _bb, MinigameTBGThemaExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameTBGThemaExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ThemaIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ThemaMap { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThemaMapBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetThemaMapBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetThemaMapArray() { return __p.__vector_as_array<byte>(8); }
  public string ThemaMapBG { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThemaMapBGBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetThemaMapBGBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetThemaMapBGArray() { return __p.__vector_as_array<byte>(10); }
  public string ThemaNameLocalize { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThemaNameLocalizeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetThemaNameLocalizeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetThemaNameLocalizeArray() { return __p.__vector_as_array<byte>(12); }
  public string ThemaLoadingImage { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThemaLoadingImageBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetThemaLoadingImageBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetThemaLoadingImageArray() { return __p.__vector_as_array<byte>(14); }
  public long ThemaLeaderId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ThemaGoalLocalize { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThemaGoalLocalizeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetThemaGoalLocalizeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetThemaGoalLocalizeArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<FlatDataJp.MinigameTBGThemaExcel> CreateMinigameTBGThemaExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      int ThemaIndex = 0,
      StringOffset ThemaMapOffset = default(StringOffset),
      StringOffset ThemaMapBGOffset = default(StringOffset),
      StringOffset ThemaNameLocalizeOffset = default(StringOffset),
      StringOffset ThemaLoadingImageOffset = default(StringOffset),
      long ThemaLeaderId = 0,
      StringOffset ThemaGoalLocalizeOffset = default(StringOffset)) {
    builder.StartTable(8);
    MinigameTBGThemaExcel.AddThemaLeaderId(builder, ThemaLeaderId);
    MinigameTBGThemaExcel.AddEventContentId(builder, EventContentId);
    MinigameTBGThemaExcel.AddThemaGoalLocalize(builder, ThemaGoalLocalizeOffset);
    MinigameTBGThemaExcel.AddThemaLoadingImage(builder, ThemaLoadingImageOffset);
    MinigameTBGThemaExcel.AddThemaNameLocalize(builder, ThemaNameLocalizeOffset);
    MinigameTBGThemaExcel.AddThemaMapBG(builder, ThemaMapBGOffset);
    MinigameTBGThemaExcel.AddThemaMap(builder, ThemaMapOffset);
    MinigameTBGThemaExcel.AddThemaIndex(builder, ThemaIndex);
    return MinigameTBGThemaExcel.EndMinigameTBGThemaExcel(builder);
  }

  public static void StartMinigameTBGThemaExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEventContentId(FlatBufferBuilder builder, long EventContentId) { builder.AddLong(0, EventContentId, 0); }
  public static void AddThemaIndex(FlatBufferBuilder builder, int ThemaIndex) { builder.AddInt(1, ThemaIndex, 0); }
  public static void AddThemaMap(FlatBufferBuilder builder, StringOffset ThemaMapOffset) { builder.AddOffset(2, ThemaMapOffset.Value, 0); }
  public static void AddThemaMapBG(FlatBufferBuilder builder, StringOffset ThemaMapBGOffset) { builder.AddOffset(3, ThemaMapBGOffset.Value, 0); }
  public static void AddThemaNameLocalize(FlatBufferBuilder builder, StringOffset ThemaNameLocalizeOffset) { builder.AddOffset(4, ThemaNameLocalizeOffset.Value, 0); }
  public static void AddThemaLoadingImage(FlatBufferBuilder builder, StringOffset ThemaLoadingImageOffset) { builder.AddOffset(5, ThemaLoadingImageOffset.Value, 0); }
  public static void AddThemaLeaderId(FlatBufferBuilder builder, long ThemaLeaderId) { builder.AddLong(6, ThemaLeaderId, 0); }
  public static void AddThemaGoalLocalize(FlatBufferBuilder builder, StringOffset ThemaGoalLocalizeOffset) { builder.AddOffset(7, ThemaGoalLocalizeOffset.Value, 0); }
  public static Offset<FlatDataJp.MinigameTBGThemaExcel> EndMinigameTBGThemaExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.MinigameTBGThemaExcel>(o);
  }
}


}
