// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PickupDuplicateBonusExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static PickupDuplicateBonusExcel GetRootAsPickupDuplicateBonusExcel(ByteBuffer _bb) { return GetRootAsPickupDuplicateBonusExcel(_bb, new PickupDuplicateBonusExcel()); }
  public static PickupDuplicateBonusExcel GetRootAsPickupDuplicateBonusExcel(ByteBuffer _bb, PickupDuplicateBonusExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PickupDuplicateBonusExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.ShopCategoryType ShopCategoryType { get { int o = __p.__offset(6); return o != 0 ? (FlatDataJp.ShopCategoryType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ShopCategoryType.General; } }
  public long ShopId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PickupCharacterId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public FlatDataJp.ParcelType RewardParcelType { get { int o = __p.__offset(12); return o != 0 ? (FlatDataJp.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.PickupDuplicateBonusExcel> CreatePickupDuplicateBonusExcel(FlatBufferBuilder builder,
      long Id = 0,
      FlatDataJp.ShopCategoryType ShopCategoryType = FlatDataJp.ShopCategoryType.General,
      long ShopId = 0,
      long PickupCharacterId = 0,
      FlatDataJp.ParcelType RewardParcelType = FlatDataJp.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0) {
    builder.StartTable(7);
    PickupDuplicateBonusExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    PickupDuplicateBonusExcel.AddRewardParcelId(builder, RewardParcelId);
    PickupDuplicateBonusExcel.AddPickupCharacterId(builder, PickupCharacterId);
    PickupDuplicateBonusExcel.AddShopId(builder, ShopId);
    PickupDuplicateBonusExcel.AddId(builder, Id);
    PickupDuplicateBonusExcel.AddRewardParcelType(builder, RewardParcelType);
    PickupDuplicateBonusExcel.AddShopCategoryType(builder, ShopCategoryType);
    return PickupDuplicateBonusExcel.EndPickupDuplicateBonusExcel(builder);
  }

  public static void StartPickupDuplicateBonusExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddShopCategoryType(FlatBufferBuilder builder, FlatDataJp.ShopCategoryType ShopCategoryType) { builder.AddInt(1, (int)ShopCategoryType, 0); }
  public static void AddShopId(FlatBufferBuilder builder, long ShopId) { builder.AddLong(2, ShopId, 0); }
  public static void AddPickupCharacterId(FlatBufferBuilder builder, long PickupCharacterId) { builder.AddLong(3, PickupCharacterId, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, FlatDataJp.ParcelType RewardParcelType) { builder.AddInt(4, (int)RewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long RewardParcelId) { builder.AddLong(5, RewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long RewardParcelAmount) { builder.AddLong(6, RewardParcelAmount, 0); }
  public static Offset<FlatDataJp.PickupDuplicateBonusExcel> EndPickupDuplicateBonusExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.PickupDuplicateBonusExcel>(o);
  }
}


}
