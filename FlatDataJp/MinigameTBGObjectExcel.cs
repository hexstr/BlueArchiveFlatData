// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MinigameTBGObjectExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MinigameTBGObjectExcel GetRootAsMinigameTBGObjectExcel(ByteBuffer _bb) { return GetRootAsMinigameTBGObjectExcel(_bb, new MinigameTBGObjectExcel()); }
  public static MinigameTBGObjectExcel GetRootAsMinigameTBGObjectExcel(ByteBuffer _bb, MinigameTBGObjectExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameTBGObjectExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Key { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(6); }
  public string PrefabName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(8); }
  public FlatDataJp.TBGObjectType ObjectType { get { int o = __p.__offset(10); return o != 0 ? (FlatDataJp.TBGObjectType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.TBGObjectType.None; } }
  public FlatDataJp.ParcelType ObjectCostType { get { int o = __p.__offset(12); return o != 0 ? (FlatDataJp.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ParcelType.None; } }
  public long ObjectCostId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ObjectCostAmount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Disposable { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ReEncounterCost { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatDataJp.MinigameTBGObjectExcel> CreateMinigameTBGObjectExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      StringOffset KeyOffset = default(StringOffset),
      StringOffset PrefabNameOffset = default(StringOffset),
      FlatDataJp.TBGObjectType ObjectType = FlatDataJp.TBGObjectType.None,
      FlatDataJp.ParcelType ObjectCostType = FlatDataJp.ParcelType.None,
      long ObjectCostId = 0,
      int ObjectCostAmount = 0,
      bool Disposable = false,
      bool ReEncounterCost = false) {
    builder.StartTable(9);
    MinigameTBGObjectExcel.AddObjectCostId(builder, ObjectCostId);
    MinigameTBGObjectExcel.AddUniqueId(builder, UniqueId);
    MinigameTBGObjectExcel.AddObjectCostAmount(builder, ObjectCostAmount);
    MinigameTBGObjectExcel.AddObjectCostType(builder, ObjectCostType);
    MinigameTBGObjectExcel.AddObjectType(builder, ObjectType);
    MinigameTBGObjectExcel.AddPrefabName(builder, PrefabNameOffset);
    MinigameTBGObjectExcel.AddKey(builder, KeyOffset);
    MinigameTBGObjectExcel.AddReEncounterCost(builder, ReEncounterCost);
    MinigameTBGObjectExcel.AddDisposable(builder, Disposable);
    return MinigameTBGObjectExcel.EndMinigameTBGObjectExcel(builder);
  }

  public static void StartMinigameTBGObjectExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddUniqueId(FlatBufferBuilder builder, long UniqueId) { builder.AddLong(0, UniqueId, 0); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset KeyOffset) { builder.AddOffset(1, KeyOffset.Value, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(2, PrefabNameOffset.Value, 0); }
  public static void AddObjectType(FlatBufferBuilder builder, FlatDataJp.TBGObjectType ObjectType) { builder.AddInt(3, (int)ObjectType, 0); }
  public static void AddObjectCostType(FlatBufferBuilder builder, FlatDataJp.ParcelType ObjectCostType) { builder.AddInt(4, (int)ObjectCostType, 0); }
  public static void AddObjectCostId(FlatBufferBuilder builder, long ObjectCostId) { builder.AddLong(5, ObjectCostId, 0); }
  public static void AddObjectCostAmount(FlatBufferBuilder builder, int ObjectCostAmount) { builder.AddInt(6, ObjectCostAmount, 0); }
  public static void AddDisposable(FlatBufferBuilder builder, bool Disposable) { builder.AddBool(7, Disposable, false); }
  public static void AddReEncounterCost(FlatBufferBuilder builder, bool ReEncounterCost) { builder.AddBool(8, ReEncounterCost, false); }
  public static Offset<FlatDataJp.MinigameTBGObjectExcel> EndMinigameTBGObjectExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.MinigameTBGObjectExcel>(o);
  }
}


}
