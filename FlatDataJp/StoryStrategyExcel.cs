// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct StoryStrategyExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static StoryStrategyExcel GetRootAsStoryStrategyExcel(ByteBuffer _bb) { return GetRootAsStoryStrategyExcel(_bb, new StoryStrategyExcel()); }
  public static StoryStrategyExcel GetRootAsStoryStrategyExcel(ByteBuffer _bb, StoryStrategyExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StoryStrategyExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Localize { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetLocalizeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLocalizeArray() { return __p.__vector_as_array<byte>(8); }
  public int StageEnterEchelonCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long BattleDuration { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WhiteListId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StrategyMap { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyMapBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetStrategyMapBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetStrategyMapArray() { return __p.__vector_as_array<byte>(16); }
  public string StrategyMapBG { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyMapBGBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetStrategyMapBGBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetStrategyMapBGArray() { return __p.__vector_as_array<byte>(18); }
  public int MaxTurn { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataJp.StageTopography StageTopography { get { int o = __p.__offset(22); return o != 0 ? (FlatDataJp.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatDataJp.StrategyEnvironment StrategyEnvironment { get { int o = __p.__offset(26); return o != 0 ? (FlatDataJp.StrategyEnvironment)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.StrategyEnvironment.None; } }
  public FlatDataJp.ContentType ContentType { get { int o = __p.__offset(28); return o != 0 ? (FlatDataJp.ContentType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ContentType.None; } }
  public long BGMId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string FirstClearReportEventName { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFirstClearReportEventNameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetFirstClearReportEventNameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetFirstClearReportEventNameArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<FlatDataJp.StoryStrategyExcel> CreateStoryStrategyExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset LocalizeOffset = default(StringOffset),
      int StageEnterEchelonCount = 0,
      long BattleDuration = 0,
      long WhiteListId = 0,
      StringOffset StrategyMapOffset = default(StringOffset),
      StringOffset StrategyMapBGOffset = default(StringOffset),
      int MaxTurn = 0,
      FlatDataJp.StageTopography StageTopography = FlatDataJp.StageTopography.Street,
      int RecommandLevel = 0,
      FlatDataJp.StrategyEnvironment StrategyEnvironment = FlatDataJp.StrategyEnvironment.None,
      FlatDataJp.ContentType ContentType = FlatDataJp.ContentType.None,
      long BGMId = 0,
      StringOffset FirstClearReportEventNameOffset = default(StringOffset)) {
    builder.StartTable(15);
    StoryStrategyExcel.AddBGMId(builder, BGMId);
    StoryStrategyExcel.AddWhiteListId(builder, WhiteListId);
    StoryStrategyExcel.AddBattleDuration(builder, BattleDuration);
    StoryStrategyExcel.AddId(builder, Id);
    StoryStrategyExcel.AddFirstClearReportEventName(builder, FirstClearReportEventNameOffset);
    StoryStrategyExcel.AddContentType(builder, ContentType);
    StoryStrategyExcel.AddStrategyEnvironment(builder, StrategyEnvironment);
    StoryStrategyExcel.AddRecommandLevel(builder, RecommandLevel);
    StoryStrategyExcel.AddStageTopography(builder, StageTopography);
    StoryStrategyExcel.AddMaxTurn(builder, MaxTurn);
    StoryStrategyExcel.AddStrategyMapBG(builder, StrategyMapBGOffset);
    StoryStrategyExcel.AddStrategyMap(builder, StrategyMapOffset);
    StoryStrategyExcel.AddStageEnterEchelonCount(builder, StageEnterEchelonCount);
    StoryStrategyExcel.AddLocalize(builder, LocalizeOffset);
    StoryStrategyExcel.AddName(builder, NameOffset);
    return StoryStrategyExcel.EndStoryStrategyExcel(builder);
  }

  public static void StartStoryStrategyExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddLocalize(FlatBufferBuilder builder, StringOffset LocalizeOffset) { builder.AddOffset(2, LocalizeOffset.Value, 0); }
  public static void AddStageEnterEchelonCount(FlatBufferBuilder builder, int StageEnterEchelonCount) { builder.AddInt(3, StageEnterEchelonCount, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long BattleDuration) { builder.AddLong(4, BattleDuration, 0); }
  public static void AddWhiteListId(FlatBufferBuilder builder, long WhiteListId) { builder.AddLong(5, WhiteListId, 0); }
  public static void AddStrategyMap(FlatBufferBuilder builder, StringOffset StrategyMapOffset) { builder.AddOffset(6, StrategyMapOffset.Value, 0); }
  public static void AddStrategyMapBG(FlatBufferBuilder builder, StringOffset StrategyMapBGOffset) { builder.AddOffset(7, StrategyMapBGOffset.Value, 0); }
  public static void AddMaxTurn(FlatBufferBuilder builder, int MaxTurn) { builder.AddInt(8, MaxTurn, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, FlatDataJp.StageTopography StageTopography) { builder.AddInt(9, (int)StageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int RecommandLevel) { builder.AddInt(10, RecommandLevel, 0); }
  public static void AddStrategyEnvironment(FlatBufferBuilder builder, FlatDataJp.StrategyEnvironment StrategyEnvironment) { builder.AddInt(11, (int)StrategyEnvironment, 0); }
  public static void AddContentType(FlatBufferBuilder builder, FlatDataJp.ContentType ContentType) { builder.AddInt(12, (int)ContentType, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long BGMId) { builder.AddLong(13, BGMId, 0); }
  public static void AddFirstClearReportEventName(FlatBufferBuilder builder, StringOffset FirstClearReportEventNameOffset) { builder.AddOffset(14, FirstClearReportEventNameOffset.Value, 0); }
  public static Offset<FlatDataJp.StoryStrategyExcel> EndStoryStrategyExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.StoryStrategyExcel>(o);
  }
}


}
