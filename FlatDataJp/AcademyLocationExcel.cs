// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatDataJp
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AcademyLocationExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
  public static AcademyLocationExcel GetRootAsAcademyLocationExcel(ByteBuffer _bb) { return GetRootAsAcademyLocationExcel(_bb, new AcademyLocationExcel()); }
  public static AcademyLocationExcel GetRootAsAcademyLocationExcel(ByteBuffer _bb, AcademyLocationExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AcademyLocationExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string PrefabPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrefabPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrefabPathArray() { return __p.__vector_as_array<byte>(8); }
  public string IconImagePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconImagePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconImagePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconImagePathArray() { return __p.__vector_as_array<byte>(10); }
  public FlatDataJp.School OpenCondition(int j) { int o = __p.__offset(12); return o != 0 ? (FlatDataJp.School)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FlatDataJp.School)0; }
  public int OpenConditionLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatDataJp.School> GetOpenConditionBytes() { return __p.__vector_as_span<FlatDataJp.School>(12, 4); }
#else
  public ArraySegment<byte>? GetOpenConditionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public FlatDataJp.School[] GetOpenConditionArray() { int o = __p.__offset(12); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatDataJp.School[] a = new FlatDataJp.School[l]; for (int i = 0; i < l; i++) { a[i] = (FlatDataJp.School)__p.bb.GetInt(p + i * 4); } return a; }
  public long OpenConditionCount(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int OpenConditionCountLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetOpenConditionCountBytes() { return __p.__vector_as_span<long>(14, 8); }
#else
  public ArraySegment<byte>? GetOpenConditionCountBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public long[] GetOpenConditionCountArray() { return __p.__vector_as_array<long>(14); }
  public FlatDataJp.ParcelType RewardParcelType { get { int o = __p.__offset(16); return o != 0 ? (FlatDataJp.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : FlatDataJp.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenTeacherRank { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<FlatDataJp.AcademyLocationExcel> CreateAcademyLocationExcel(FlatBufferBuilder builder,
      long Id = 0,
      uint LocalizeEtcId = 0,
      StringOffset PrefabPathOffset = default(StringOffset),
      StringOffset IconImagePathOffset = default(StringOffset),
      VectorOffset OpenConditionOffset = default(VectorOffset),
      VectorOffset OpenConditionCountOffset = default(VectorOffset),
      FlatDataJp.ParcelType RewardParcelType = FlatDataJp.ParcelType.None,
      long RewardParcelId = 0,
      long OpenTeacherRank = 0) {
    builder.StartTable(9);
    AcademyLocationExcel.AddOpenTeacherRank(builder, OpenTeacherRank);
    AcademyLocationExcel.AddRewardParcelId(builder, RewardParcelId);
    AcademyLocationExcel.AddId(builder, Id);
    AcademyLocationExcel.AddRewardParcelType(builder, RewardParcelType);
    AcademyLocationExcel.AddOpenConditionCount(builder, OpenConditionCountOffset);
    AcademyLocationExcel.AddOpenCondition(builder, OpenConditionOffset);
    AcademyLocationExcel.AddIconImagePath(builder, IconImagePathOffset);
    AcademyLocationExcel.AddPrefabPath(builder, PrefabPathOffset);
    AcademyLocationExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    return AcademyLocationExcel.EndAcademyLocationExcel(builder);
  }

  public static void StartAcademyLocationExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, long Id) { builder.AddLong(0, Id, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint LocalizeEtcId) { builder.AddUint(1, LocalizeEtcId, 0); }
  public static void AddPrefabPath(FlatBufferBuilder builder, StringOffset PrefabPathOffset) { builder.AddOffset(2, PrefabPathOffset.Value, 0); }
  public static void AddIconImagePath(FlatBufferBuilder builder, StringOffset IconImagePathOffset) { builder.AddOffset(3, IconImagePathOffset.Value, 0); }
  public static void AddOpenCondition(FlatBufferBuilder builder, VectorOffset OpenConditionOffset) { builder.AddOffset(4, OpenConditionOffset.Value, 0); }
  public static VectorOffset CreateOpenConditionVector(FlatBufferBuilder builder, FlatDataJp.School[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionVectorBlock(FlatBufferBuilder builder, FlatDataJp.School[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatDataJp.School> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatDataJp.School>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOpenConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOpenConditionCount(FlatBufferBuilder builder, VectorOffset OpenConditionCountOffset) { builder.AddOffset(5, OpenConditionCountOffset.Value, 0); }
  public static VectorOffset CreateOpenConditionCountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionCountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionCountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpenConditionCountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOpenConditionCountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, FlatDataJp.ParcelType RewardParcelType) { builder.AddInt(6, (int)RewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long RewardParcelId) { builder.AddLong(7, RewardParcelId, 0); }
  public static void AddOpenTeacherRank(FlatBufferBuilder builder, long OpenTeacherRank) { builder.AddLong(8, OpenTeacherRank, 0); }
  public static Offset<FlatDataJp.AcademyLocationExcel> EndAcademyLocationExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatDataJp.AcademyLocationExcel>(o);
  }
}


}
